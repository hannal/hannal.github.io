<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kay on the rails</title>
    <description>Kay as known as Hannal walks on the rails
</description>
    <link>http://blog.hannal.com//</link>
    <atom:link href="http://blog.hannal.com//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 10 Jan 2016 18:28:45 +0900</pubDate>
    <lastBuildDate>Sun, 10 Jan 2016 18:28:45 +0900</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>2016년을 맞이하며 20년 전 판을 생각하다</title>
        <description>&lt;h3&gt;게임 개발&lt;/h3&gt;

&lt;p&gt;20년 전에 첫 게임을 만들었다. 내 &lt;a href=&quot;http://blog.hannal.com/profile/&quot;&gt;필명인 한날은 이 게임 이름에서 비롯&lt;/a&gt;된 것이다. 어설프고 재미없고 허섭했지만, 내 게임을 만들어 친구들과 내 게임 얘기를 나누었다. 내 고교 시절 생활기록부를 보니 장래 희망이 컴퓨터 프로그래머라 적혀 있었다. 당시엔 게임 개발이라는 직업이 사회에 인식되기 전이라서 편의상 게임 개발자 대신 컴퓨터 프로그래머라 적은 것인데, 20년이 지난 지금은 정말 게임 개발자가 아니라 컴퓨터 프로그래머가 되어 있다.&lt;/p&gt;

&lt;p&gt;가끔 언제 다시 게임 업계에 돌아오냐는 안부성 질문을 받곤 한다. 게임 업계에 돌아갈 지 안 갈 지 아직은 모르겠다. 하지만 난 게임을 만들어 왔고, 앞으로도 게임을 만들 것이다.&lt;/p&gt;

&lt;h3&gt;홈페이지&lt;/h3&gt;

&lt;p&gt;20년 전에 내 홈페이지를 처음 열었다. 1997년부터는 게임 개발, 프로그래밍 등을 주제로 운영하다 &lt;a href=&quot;https://web.archive.org/web/19991012051013/http://dimanche.co.kr/index-kr.html&quot;&gt;1998년에 도메인을 사서 나 나름대로 브랜드&lt;/a&gt;를 만들고 유지하려 했다. 꾸준하진 않지만 완전히 놓지 않고 계속 운영해 온 지난 20년을 스스로 대견하게 여긴다.&lt;/p&gt;

&lt;p&gt;나를 표현하는 익숙한 방법이 내 홈페이지 또는 블로그이다. 앞으로도 내 공간에 글을 쓸 것이다.&lt;/p&gt;

&lt;h3&gt;판&lt;/h3&gt;

&lt;p&gt;작더라도 내 판을 만들어야 한다는 생각을 해왔다. 아무리 잘하고 위협스러워도 남의 판에서는 승산이 없다. 판의 주인이 판을 엎고 새 규칙을 짜면 그만이다. 주인이 판 엎지 않게 아양 떨고 비위 맞추고, 규칙을 바꾸면 바꿀 규칙을 예측하며 그 판에 길들여지면 더이상 희망이 없다. 차라리 판의 주인이 한 짓에 삐쳐서 그 판을 떠나는 게 낫다. 내 판을 만들어 사람들이 내 판에 들어오고, 그 판을 키워야 한다. 그래야 내가 바라는 진정한 독립이 이뤄진다.&lt;/p&gt;

&lt;p&gt;하지만 난 그동안 준비되지 않았으며 진심으로 독립을 갈망한 것이 아니었을지도 모른다는 생각을 했다. 내 판을 만들어야 한다고 주창했지만 정작 말로만 고민했을 뿐, 실행할만큼 고민하지 않았다. 여전히 남의 판에 기대어 마이너 버전 수준에서 내 몸뚱아리를 업그레이드 하려 아둥바둥거렸다.&lt;/p&gt;

&lt;p&gt;앞으로 3~4년 뒤부터는 갈수록 내 판을 만드는 데 들이는 노력이 비싸질 것이라 예상한다. 내 판을 만드는 비용이 비싸질수록 포기할 가능성이 커지고, 포기하는 그때부터 남의 판에서 움직이는 장기말이자 노예가 될 것이다.&lt;/p&gt;

&lt;p&gt;20년 전에 막연히 내 판을 만들어야 한다는 생각을 한 것 같다. 능력도 없으면서 게임 만들자며 사람들 꼬셔 게임개발팀을 만들었고, 하루 방문자가 몇 명이더라도 내 홈페이지에 내 글을 남기려 했다. 내 스토리를 갖고 싶었고 만들려 애썼다. 길들여지지 말자. 내 판의 20년 전 원시형을 잊지 말고 포기하지 말자.&lt;/p&gt;

&lt;p&gt;그렇게 다짐하며 각오를 세운다.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jan 2016 16:00:49 +0900</pubDate>
        <link>http://blog.hannal.com//2016/01/hello_2016/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2016/01/hello_2016/</guid>
        
        <category>2016년</category>
        
        <category>판</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>내 개발 환경.</title>
        <description>&lt;p&gt;프로그래밍 입문자, 또는 새로 프로그래밍이나 도구에 입문하는 사람과 얘기를 나누다 보면 다른 사람, 기왕이면 그 언어나 도구에 익숙한 사람이 사용하는 개발 환경을 무척 궁금해 한다는 걸 느꼈다. 그냥 공식 홈페이지에 있는 걸 내려 받아서 설치하면 되는 거 아닌가? 생각하며 관련 자료를 찾아보니 사람들은 공식 홈페이지에 소개되지 않은 방법으로 개발 환경을 꾸린다는 걸 발견하면 더 혼란이 빠져서 아예 입문 자체를 부담스러워 하는 사람도 많다.&lt;/p&gt;

&lt;p&gt;그래서 내가 쓰는 개발 환경을 정리해 본다.&lt;/p&gt;

&lt;h3&gt;공통 환경&lt;/h3&gt;

&lt;h4&gt;PC&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Macbook Pro 13인치 (2015년 early)&lt;/li&gt;
&lt;li&gt;Macbook Pro 15인치 (2014년 early)&lt;/li&gt;
&lt;li&gt;iMac 20인치 (2011년 mid)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;운영체제&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;주 환경 : OS X. 내가 주로 활동하는 분야는 윈도우 보다는 리눅스나 OS X에서 개발하기 더 편하다.&lt;/li&gt;
&lt;li&gt;보조 환경 : Ubuntu. 주로 실 서버에 올리기 전에 시험 동작하려고 사용하거나 라즈베리 파이용 뭔가를 만들 때 쓰는 환경이지만, 집에 있는 리눅스 박스가 저사양이라서 평소엔 잘 안 쓴다.&lt;/li&gt;
&lt;li&gt;쉘(shell) : bash를 주로 써왔지만, 2015년 11월부터 zsh을 쓰고 있다. &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;oh-my-zsh&lt;/a&gt;을 쓰고 설정은 기본값으로 쓰고 있으며, plugin만 git, virtualenv, virtualenvwrapper를 설정했다.&lt;/li&gt;
&lt;li&gt;터미널은 OS X에 기본 내장된 것을 사용한다.&lt;/li&gt;
&lt;li&gt;맥 패키지는 &lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt;로 관리한다.&lt;/li&gt;
&lt;li&gt;파일, 디렉터리 구조는 &lt;a href=&quot;http://mama.indstate.edu/users/ice/tree/&quot;&gt;tree&lt;/a&gt;을 쓴다. OS X는 &lt;code&gt;brew install tree&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;원격에 있는 파일은 &lt;a href=&quot;https://www.gnu.org/software/wget/&quot;&gt;wget&lt;/a&gt;로 받는다. OS X는 &lt;code&gt;brew install wget&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;글꼴&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://sourcefoundry.org/hack/&quot;&gt;Hack&lt;/a&gt;을 사용한다.&lt;/p&gt;

&lt;h4&gt;VCS client&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; : 기본 클라이언트를 터미널에서 쓴다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;sourcetree&lt;/a&gt; : 커밋이 복잡하게 꼬였을 때 쓰지만, 느려서 가끔 쓴다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/karan/joe&quot;&gt;joe&lt;/a&gt; : &lt;code&gt;.gitignore&lt;/code&gt; 파일을 다룰 때 쓴다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;h4&gt;에디터&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot;&gt;PyCharm&lt;/a&gt; : 2015년 11월부터 쓰고 있다. 아직 익숙하지 않다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime text 3&lt;/a&gt; : 평소에 주로 써왔는데, 최근엔 조금씩 빈도를 줄이고 있다.

&lt;ul&gt;
&lt;li&gt;SublimeLinter + Python Flake8 lint : 코드 검사기는 &lt;a href=&quot;https://flake8.readthedocs.org&quot;&gt;Flake8&lt;/a&gt;을 SublimeLinter에 연동해 쓴다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;VIM : 급히 간단히 편집할 때 쓴다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Python 관련&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Python 3, 2.7 : 최근엔 3 버전으로 시작하는 프로젝트가 늘고 있지만, 아직은 2.7로 동작하는 게 더 많다.&lt;/li&gt;
&lt;li&gt;PyPy : 실 사용 환경에서 사용하고 있긴 한데, 여전히 제한되게 쓰고 있다.&lt;/li&gt;
&lt;li&gt;virtualenv/virtualenvwrapper : 주로 사용하는 Python 환경 격리 도구.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Golang&lt;/h3&gt;

&lt;h4&gt;에디터&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; : 2015년 11월부터 쓰고 있다. 느려서 답답한데, 편하긴 하다. golang 정식 plugin이 출시되었다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime text 3&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;plugin : Goimports, GoSublime, SublimeLinter-contrib-golint&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;문서와 자료&lt;/h3&gt;

&lt;h4&gt;편집&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;markdown : 로컬에서 문서를 작성하는 경우엔 대부분 markdown으로 작성한다. 편집은 &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;으로 하는데, 한글이 많으면 어느 에디터든 무척 느려지기 때문에 코딩 할 땐 사용하지 않는 Atom을 markdown 문서 편집용으로 쓴다.&lt;/li&gt;
&lt;li&gt;google drive : 다른 사람과 협업하거나 공유해야 하는 경우에 사용한다. 주로 google docs, spreadsheet.&lt;/li&gt;
&lt;li&gt;dropbox paper : 베타판부터 쓰고 있긴 한데, dropbox의 최근 선택과 집중 행보를 보자니 오래 유지 안 하고 종료할 것 같아서 이젠 별로 사용하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;자료 관리&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;웹 스크래핑 : 모바일 환경에선 &lt;a href=&quot;https://getpocket.com/&quot;&gt;pocket&lt;/a&gt;, PC 환경에선 pocket과 &lt;a href=&quot;http://www.devontechnologies.com/products/devonthink/overview.html&quot;&gt;devonthink&lt;/a&gt;로 스크랩한다. evernote + clearly를 썼는데, 갈수록 구려져서 안 쓴다.&lt;/li&gt;
&lt;li&gt;PDF : devonthink에 담아서 관리하며, dropbox에도 올려서 모바일 환경에서 접근한다.&lt;/li&gt;
&lt;li&gt;bookmark : 구글 크롬에 북마크한다. 구글 계정 동기화를 해놔서 내가 사용하는 장비 모두와 북마크 동기화가 늘 되어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;이외&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Google chrome : 느리고 뚱뚱하지만, 구글 계정 연동이 편해서 여전히 쓴다.&lt;/li&gt;
&lt;li&gt;이외 도구는 가장 기본 설정대로 사용한다.

&lt;ul&gt;
&lt;li&gt;R Studio, Apache spark, React, Jupyter, ...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 18 Dec 2015 14:45:00 +0900</pubDate>
        <link>http://blog.hannal.com//2015/12/my-dev-envs/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/12/my-dev-envs/</guid>
        
        <category>python</category>
        
        <category>golang</category>
        
        <category>개발환경</category>
        
        <category>os X</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>10. 이용자가 올린 사진 목록 보기</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막 갱신일시 : 2015년 10월 2일 12시 45분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사진을 게시하였으니 저장된 사진을 가져와 나열하는 기능이 필요합니다. 로그인한 이용자가 사진을 게시하는 기능을 만들었으니 이용자 단위로 사진을 가져와 보여주는 개인 프로필 공간을 만들어 보겠습니다. 이번 편은 &lt;code&gt;QuerySet&lt;/code&gt; 객체를 이용해 데이터를 찾는 방법을 다룹니다.&lt;/p&gt;

&lt;p&gt;아참, 강좌를 연재하는 중에 Django 1.8판이 출시되었습니다. 그래서 &lt;a href=&quot;http://blog.hannal.com/2014/9/start_with_django_webframework_03/&quot;&gt;3편 Photo 앱과 모델 만들기&lt;/a&gt;과 &lt;a href=&quot;http://blog.hannal.com/2014/11/start_with_django_webframework_05/&quot;&gt;5편 url에 view 함수 연결해서 사진 출력하기&lt;/a&gt;, &lt;a href=&quot;http://blog.hannal.com/2015/05/start_with_django_webframework_07/&quot;&gt;7편 사진 게시물 제출하여 게시하기&lt;/a&gt;에 관련 내용을 추가 반영했습니다.&lt;/p&gt;

&lt;h3&gt;개인 프로필 기능용 앱 만들기&lt;/h3&gt;

&lt;p&gt;강좌 &lt;a href=&quot;http://blog.hannal.com/2014/8/start_with_django_webframework_01/&quot;&gt;1편 Pystagram 기획&lt;/a&gt;에서 개인 프로필 공간(이하 프로필 페이지)은 다음 기능을 포함합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;간단한 소개&lt;/li&gt;
&lt;li&gt;팔로잉, 팔로워&lt;/li&gt;
&lt;li&gt;이용자가 올린 사진&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로필 페이지를 비롯해서 이용자의 대외 노출 기능은 모두 별도 Django 앱을 만들어 다루겠습니다. 꼭 앱으로 나누지 않아도 되지만, 같은 목적이나 맥락끼리 기능을 구분하여 앱으로 묶어 관리하는 게 낫습니다. 터미널 쉘에서 &lt;code&gt;manage.py&lt;/code&gt; 파일을 이용해 앱을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(pystagram) $ python manage.py startapp profiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;URL 패턴 만들기&lt;/h3&gt;

&lt;p&gt;이번 편에서는 “이용자가 올린 사진”을 나열하는 기능을 구현하는데, 페이지 URL은 &lt;code&gt;/user/&amp;lt;이용자 ID&amp;gt;/&lt;/code&gt; 패턴입니다. 이전 편까지는 URL 패턴을 &lt;code&gt;settings.py&lt;/code&gt; 파일이 있는 시작 패키지의 &lt;code&gt;urls.py&lt;/code&gt;에 등록하였는데, 프로필 공간에 들어가는 기능이나 페이지에 필요한 URL은 따로 분리하여 연결하는 방식을 쓰겠습니다. &lt;code&gt;profiles&lt;/code&gt; 앱 디렉터리에 &lt;code&gt;urls.py&lt;/code&gt; 파일을 만들어서 이 모듈에 프로필 관련 URL을 등록하고, 시작 패키지의 &lt;code&gt;urls.py&lt;/code&gt;에서는 앱 &lt;code&gt;urls.py&lt;/code&gt;를 &lt;code&gt;include()&lt;/code&gt; 함수로 포함시키는 방식입니다. Django Admin에 사용하는 URL 패턴을 이 방식으로 포함시켜 사용합니다.&lt;/p&gt;

&lt;p&gt;먼저 시작 패키지, 그러니까 &lt;code&gt;settings.py&lt;/code&gt; 파일이 있는 디렉터리에 있는 &lt;code&gt;urls.py&lt;/code&gt; 파일을 열고 다음 내용을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    url(
        r&amp;#39;^user/&amp;#39;,
        include(profile_urls, namespace=&amp;#39;profiles&amp;#39;),
    ),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 내용을 추가한 &lt;code&gt;urlpatterns&lt;/code&gt; 변수는 다음과 같습니다&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;urlpatterns = [
    url(
        r&amp;#39;^photo/(?P&amp;lt;photo_id&amp;gt;\d+)/$&amp;#39;,
        &amp;#39;photo.views.single_photo&amp;#39;,
        name=&amp;#39;view_single_photo&amp;#39;
    ),
    # 중략
    url(
        r&amp;#39;^user/&amp;#39;,
        include(profile_urls, namespace=&amp;#39;profiles&amp;#39;),
    ),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;user/&lt;/code&gt;로 시작하는 URL인 경우 &lt;code&gt;profile_urls&lt;/code&gt; 객체를 포함시켜 연결(매핑)하고, 이 영역의 이름공간(&lt;code&gt;namespace&lt;/code&gt;)을 &lt;code&gt;profiles&lt;/code&gt;으로 명명하였습니다. &lt;code&gt;profile_urls&lt;/code&gt;가 뜬금없이 나타났는데, 이 객체는 &lt;code&gt;profiles&lt;/code&gt; 앱의 &lt;code&gt;urls.py&lt;/code&gt;에 있는 &lt;code&gt;urlpatterns&lt;/code&gt; 객체를 &lt;code&gt;profile_urls&lt;/code&gt; 이름으로 가져온 것입니다. &lt;code&gt;urlpatterns&lt;/code&gt; 위에 다음 코드를 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from profiles.urls import urlpatterns as profile_urls

urlpatterns = [
    # 중략
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이와 같은 방식은 &lt;code&gt;patterns()&lt;/code&gt; 함수를 이용해 &lt;code&gt;prefix&lt;/code&gt;를 지정하여 특정 URL 이하에 대해 뷰 함수를 연결하는 방식과 같습니다.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code&gt;profile_urls&lt;/code&gt;로 import 할 프로필 앱의 &lt;code&gt;urlpatterns&lt;/code&gt;를 만듭니다. &lt;code&gt;profiles&lt;/code&gt; 디렉터리에 &lt;code&gt;urls.py&lt;/code&gt; 파일을 만들고 URL 패턴을 추가합니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.conf.urls import url

from . import views

urlpatterns = [
    url(
        r&amp;#39;^(?P&amp;lt;username&amp;gt;[\w.@+-]+)/$&amp;#39;,
        views.profile,
        name=&amp;#39;profile&amp;#39;
    ),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;URL 정규표현식 패턴은 &lt;code&gt;[\w.@+-]+)/$&lt;/code&gt;인데, 영문자, 공백, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; 문자가 하나 이상인 문자열입니다. 이 정규표현식은 Django에 내장된 &lt;code&gt;User&lt;/code&gt; 모델의 &lt;code&gt;username&lt;/code&gt;에 사용되는 패턴과 동일합니다. 이 정규표현식에 해당하는 문자열을 &lt;code&gt;username&lt;/code&gt;으로 받아 뷰 함수에 인자로 전달합니다. 이 URL은 &lt;code&gt;user/&lt;/code&gt;로 시작하는 경우에 해당되니 종합하면 &lt;code&gt;/user/[\w.@+-]+)/&lt;/code&gt;인 경우에 &lt;code&gt;profile&lt;/code&gt; 뷰 함수를 호출합니다. 이 URL 패턴의 이름은 &lt;code&gt;url()&lt;/code&gt; 함수에 &lt;code&gt;name&lt;/code&gt; 인자로 &lt;code&gt;profile&lt;/code&gt;이라 명명하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt; 파일이 있는 현재 경로(&lt;code&gt;.&lt;/code&gt;)에 있는 &lt;code&gt;views&lt;/code&gt; 모듈을 읽어온 뒤 이 객체에 있는 &lt;code&gt;profile&lt;/code&gt; 속성을 뷰 함수로 연결합니다. 즉, 현재 앱의 &lt;code&gt;views.py&lt;/code&gt;를 사용하는 것이며, 사용할 뷰 함수를 직접 읽어와(&lt;code&gt;import&lt;/code&gt;) 함수 객체를 &lt;code&gt;url()&lt;/code&gt; 함수에 인자로 직접 전달합니다.&lt;/p&gt;

&lt;h3&gt;뷰 함수와 템플릿 뼈대 만들기&lt;/h3&gt;

&lt;p&gt;이번엔 &lt;code&gt;profiles&lt;/code&gt; 앱의 &lt;code&gt;views.py&lt;/code&gt; 파일에 &lt;code&gt;profile()&lt;/code&gt; 뷰 함수를 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# coding: utf-8

from __future__ import unicode_literals

from django.shortcuts import render

def profile(request, username):
    return render(request, &amp;#39;profile.html&amp;#39;, {})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt;에서 이용자 이름(ID) 문자열을 &lt;code&gt;username&lt;/code&gt;으로 받아내어 뷰 함수로 전달하도록 하였으므로 &lt;code&gt;profile()&lt;/code&gt; 함수에서도 두 번째 인자로 &lt;code&gt;username&lt;/code&gt;을 지정해야 합니다.&lt;/p&gt;

&lt;p&gt;뷰 함수는 뼈대부터 만들 것이므로 뷰 함수에서 사용할 뷰 함수 템플릿을 &lt;code&gt;&amp;#39;profile.html&amp;#39;&lt;/code&gt;로 지정합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;profile.html&lt;/code&gt; 템플릿 파일은 앱용 템플릿 디렉터리(&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;)에 만듭니다. &lt;code&gt;profiles&lt;/code&gt; 앱 디렉터리 안에 &lt;code&gt;templates&lt;/code&gt; 디렉터리를 새로 만들고, 그 안에 &lt;code&gt;profile.html&lt;/code&gt; 템플릿 파일을 만든 뒤 다음 내용을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% extends &amp;#39;layout.html&amp;#39; %}

{% block content %}
profile page
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;드디어 뼈대를 만들었습니다. &lt;code&gt;manage.py runserver&lt;/code&gt;로 개발용 내장 웹서버를 구동하고 &lt;code&gt;http://localhost:8000/user/hannal/&lt;/code&gt;과 같은 URL로 접근하면 프로필 페이지가 나타납니다.&lt;/p&gt;

&lt;p&gt;하지만, 이 글 내용 그대로 수행했다면 반갑지 않은 화면이 나타납니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/10/10-not_exist_template_file_error.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;profile.html&lt;/code&gt; 템플릿 파일이 존재하지 않는다는 내용입니다. 이 파일이 분명히 있는데 저 오류가 발생한다면 &lt;code&gt;settings.py&lt;/code&gt;에 &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 설정에 우리가 새로 생성한 &lt;code&gt;profiles&lt;/code&gt; 앱을 추가하지 않아서 그렇습니다. &lt;code&gt;profile.html&lt;/code&gt; 템플릿 파일은 &lt;strong&gt;&lt;code&gt;profiles&lt;/code&gt; 앱 디렉터리&lt;/strong&gt;의 &lt;code&gt;templates&lt;/code&gt; 디렉터리에 있습니다. 앱 디렉터리에 있다는 의미는 Django가 앱 디렉터리라는 걸 인식해야 한다는 의미입니다. 그래서 &lt;code&gt;INSTALLED_APPS&lt;/code&gt;에 추가하는 것입니다. &lt;code&gt;settings.py&lt;/code&gt;의 &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 항목에 &lt;code&gt;&amp;#39;profiles&amp;#39;&lt;/code&gt; 문자열을 추가하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;INSTALLED_APPS = (
    &amp;#39;django.contrib.admin&amp;#39;,
    &amp;#39;django.contrib.auth&amp;#39;,
    &amp;#39;django.contrib.contenttypes&amp;#39;,
    &amp;#39;django.contrib.sessions&amp;#39;,
    &amp;#39;django.contrib.messages&amp;#39;,
    &amp;#39;django.contrib.staticfiles&amp;#39;,
    &amp;#39;photo&amp;#39;,
    &amp;#39;profiles&amp;#39;,
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/10/10-profile_page_01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;접속한 페이지의 이용자 정보 가져오기&lt;/h3&gt;

&lt;p&gt;접속한 프로필 페이지의 이용자 이름은 뷰 함수에 &lt;code&gt;username&lt;/code&gt; 인자로 전달됩니다. 우리는 Django에서 제공하는 &lt;code&gt;User&lt;/code&gt; 모델을 사용하므로 이 모델의 &lt;code&gt;username&lt;/code&gt; 모델 필드를 검색(lookup)하는 데 사용하여 이용자를 찾습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.shortcuts import get_object_or_404
from django.contrib.auth import get_user_model

def profile(request, username):
    User = get_user_model()
    user = get_object_or_404(User, username=username)

    return render(request, &amp;#39;profile.html&amp;#39;, {
        &amp;#39;current_user&amp;#39;: user,
    })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;get_user_model()&lt;/code&gt; 함수는 &lt;code&gt;settings.py&lt;/code&gt; 모듈의 &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 설정 항목을 기준으로 Django 프로젝트가 사용하는 이용자 모델을 가져옵니다. 자세한 내용은 &lt;a href=&quot;http://blog.hannal.com/2015/06/start_with_django_webframework_08/&quot;&gt;8편 로그인, 로그아웃 하기&lt;/a&gt; 편을 참고하세요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;get_object_or_404()&lt;/code&gt; 함수는 지정한 모델과 검색 조건으로 데이터를 가져오려 해보고 없으면 HTTP 404 오류를 일으키는 함수입니다. 두 종류 인자를 필요로 하는데, 첫 번째 인자는 데이터를 찾고 가져올 대상 모델 클래스를 받고, 나머지 인자는 검색에 사용합니다. &lt;code&gt;get_object_or_404(User, username=username)&lt;/code&gt;는 &lt;code&gt;User&lt;/code&gt; 모델에서 &lt;code&gt;username&lt;/code&gt; 모델 필드의 값이 뷰 함수에 인자로 전달된 &lt;code&gt;username&lt;/code&gt;과 같은 것을 찾는 내용입니다. &lt;code&gt;/user/hannal/&lt;/code&gt; URL로 접근하면 뷰 함수의 &lt;code&gt;username&lt;/code&gt; 인자의 값은 &lt;code&gt;&amp;#39;hannal&amp;#39;&lt;/code&gt; 문자열이므로 &lt;code&gt;get_object_or_404(User, username=&amp;#39;hannal&amp;#39;)&lt;/code&gt;을 실행합니다. 이 함수는 데이터 하나를 특정 지어 반한하므로 여러 데이터가 조건에 해당되선 안 됩니다. 데이터가 없는 경우 &lt;code&gt;django.http&lt;/code&gt; 모듈에 있는 &lt;code&gt;Http404&lt;/code&gt; 예외 오류를 일으킵니다.&lt;/p&gt;

&lt;p&gt;데이터가 있는 경우 &lt;code&gt;user&lt;/code&gt;에 할당하고, 이 객체는 &lt;code&gt;profile.html&lt;/code&gt; 템플릿에 템플릿 맥락 요소(context)로 전달하며, 템플릿 안에서 템플릿 변수로 사용할 이름은 &lt;code&gt;current_user&lt;/code&gt;입니다.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code&gt;profile.html&lt;/code&gt; 템플릿 파일을 수정합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% extends &amp;#39;layout.html&amp;#39; %}

{% block content %}
님의 프로필 페이지

&amp;lt;ul&amp;gt;
{% for photo in current_user.photo_set.all %}
    &amp;lt;li&amp;gt;&amp;lt;img src=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/li&amp;gt;
{% empty %}
    &amp;lt;li&amp;gt;게시한 사진이 없습니다.&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;눈여겨 볼 부분은 &lt;code&gt;current_user.photo_set.all&lt;/code&gt;입니다. 이 부분은 Python 코드로 표현하면 &lt;code&gt;current_user.photo_set.all()&lt;/code&gt;입니다. Django 템플릿 엔진은 Python의 함수나 클래스와 같이 호출 가능한(callable) 객체를 템플릿 안에서 소괄호를 쳐서 직접 호출하는 걸 허용하지 않습니다. 객체 이름이나 메서드 이름만 명시하면 Django가 대상의 자료형을 검사해서 호출 가능한 객체인 경우 대신 호출하여 수행합니다. 소괄호를 사용하지 못하므로 함수나 메서드에 인자를 전달하지도 못합니다. 인자를 전달하려면 Django 템플릿 필터나 태그를 직접 만들어 사용해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/10/10-profile_page_02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;QuerySet 객체&lt;/h3&gt;

&lt;h4&gt;연관 객체 참조 (related objects reference)&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;current_user.photo_set.all()&lt;/code&gt;는 접속한 프로필 페이지의 이용자(&lt;code&gt;current_user&lt;/code&gt;)가 소유한(own) 모든 사진 게시물을 가져오는 코드입니다. 하나씩 살펴 보겠습니다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;code&gt;current_user&lt;/code&gt;는 뷰 함수에서 &lt;code&gt;user&lt;/code&gt;입니다. &lt;code&gt;user&lt;/code&gt;는 &lt;code&gt;User&lt;/code&gt; &lt;strong&gt;모델&lt;/strong&gt; 클래스로 데이터를 가져와 연결시켜(mapping) Python 인스턴스 객체로 생성한 것입니다. 그런데 &lt;code&gt;User&lt;/code&gt; 모델은 우리가 앞서 만든 &lt;code&gt;photo&lt;/code&gt; 앱의 &lt;code&gt;Photo&lt;/code&gt; 모델이 &lt;code&gt;ForeignKey&lt;/code&gt;로 연결되어 있습니다. 이용자 한 명이 사진을 여러 개 가지므로 &lt;code&gt;User&lt;/code&gt; 모델이 1, &lt;code&gt;Photo&lt;/code&gt; 모델은 다수(n) 관계라서 &lt;code&gt;User&lt;/code&gt; 모델 기준으로는 1:N(OneToMany) 관계입니다.&lt;/p&gt;

&lt;p&gt;이 관계가 중요한데요. Django는 모델이 관계(relationship)를 맺고 있으면 연결 당한 쪽에 &lt;strong&gt;연관 객체 참조 속성&lt;/strong&gt;이라는 특별한 속성을 만듭니다. 연결하는 쪽은 모델 필드로 연결하는 대상 모델을 가리키고 있지만, 연결 당하는 쪽은 Python 코드상으로는 알 도리가 없습니다. &lt;code&gt;User&lt;/code&gt; 모델과 &lt;code&gt;Photo&lt;/code&gt; 모델을 놓고 보면, &lt;code&gt;Photo&lt;/code&gt; 모델엔 &lt;code&gt;user = models.ForeignKey(settings.AUTH_USER_MODEL)&lt;/code&gt; 모델 필드를 만들어서 연결하는 모델이 &lt;code&gt;User&lt;/code&gt; 모델이라는 것이 드러나지만, &lt;code&gt;User&lt;/code&gt; 모델엔 아무런 조치를 취하지 않으므로 Python 코드만으로는 &lt;code&gt;Photo&lt;/code&gt; 모델이 자신을 연결하는지는 알지 못합니다. 하지만 Django는 모델 관계를 파악하여 연결 당하는 쪽에 연결하는 모델에 대한 접근 경로를 객체 속성(attribute)으로 만들어 줍니다.&lt;/p&gt;

&lt;p&gt;일 대 다(&lt;code&gt;ForeignKey&lt;/code&gt;)나 다 대 다(&lt;code&gt;ManyToManyField&lt;/code&gt;) 관계는 연결 당하는 특정 데이터에 연결하는 쪽의 여러 데이터가 관계를 맺습니다. 이처럼 &lt;strong&gt;1&lt;/strong&gt;쪽에 &lt;strong&gt;N&lt;/strong&gt;으로 연결되는 경우, &lt;strong&gt;1&lt;/strong&gt;쪽에 N쪽 모델 이름을 참조하여 속성을 만듭니다. 이 속성은 따로 지정하지 않으면 N쪽 모델 이름을 소문자 Snake case 표기로 만들고 &lt;code&gt;_set&lt;/code&gt;을 덧붙인 이름을 갖습니다. &lt;code&gt;User&lt;/code&gt; 모델과 &lt;code&gt;Photo&lt;/code&gt; 모델로 놓고 보면 &lt;code&gt;User&lt;/code&gt; 모델의 인스턴스 객체에 &lt;code&gt;photo_set&lt;/code&gt; 속성이 만들어 집니다.&lt;/p&gt;

&lt;h4&gt;QuerySet 객체&lt;/h4&gt;

&lt;p&gt;연관 객체 참조 속성은 Django 모델의 &lt;code&gt;QuerySet&lt;/code&gt; 객체입니다. &lt;code&gt;QuerySet&lt;/code&gt;은 이름에서 드러나듯이 Query 집합(set)입니다. Django model manager는 크게 두 종류 객체를 반환하는데, 하나는 &lt;code&gt;QuerySet&lt;/code&gt; 객체이고 다른 하나는 &lt;code&gt;QuerySet&lt;/code&gt; 객체가 아닌 객체입니다. &lt;code&gt;QuerySet&lt;/code&gt;엔 다음과 같은 특징이 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Model manager의 API를 포함 (정확히는 QuerySet API를 manager가 상속 받아 사용)&lt;/li&gt;
&lt;li&gt; 꼬리에 꼬리를 무는 연산(evaluation). 일명 chaining 연산.

&lt;ul&gt;
&lt;li&gt;단 QuerySet(또는 model manager)의 메서드가 반환하는 객체가 QuerySet이어야 함.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;지연 평가 연산과 캐쉬 처리&lt;/li&gt;
&lt;li&gt;순서열(&lt;code&gt;str&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;) 연산 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 특성은 &lt;code&gt;QuerySet&lt;/code&gt;의 역할에 기인합니다. &lt;code&gt;QuerySet&lt;/code&gt;은 사용자의 요청을 받아 질의(query)를 생성합니다. 이 요청이 데이터베이스에서 데이터를 가져와야만 하는 것이면 생성한 질의를 데이터베이스로 보냅니다. 그렇지 않으면 생성한 질의는 그대로 보관한 &lt;code&gt;QuerySet&lt;/code&gt; 객체를 복제하여 새로 반환합니다. 이 경우 반환한 객체도 &lt;code&gt;QuerySet&lt;/code&gt; 객체이므로 또 다시 model manager API를 이용해 요청을 보낼 수 있습니다. 이런 과정을 반복합니다. 데이터베이스에 질의를 보내 데이터를 가져오면 그 데이터를 보관해두며, 이 &lt;code&gt;QuerySet&lt;/code&gt; 객체의 데이터를 사용하는 경우 보관된 데이터를 사용합니다. 몇 번을 접근하더라도 보관된 데이터를 그대로 재사용합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;지연 평가 연산 : 데이터베이스에 접근해야 할 때까지 질의를 보내지 않고 질의를 생성해 조합하며 쌓는 동작&lt;/li&gt;
&lt;li&gt;캐쉬 처리 : 보관한 데이터를 재사용해 데이터에 접근할 때마다 데이터베이스에 질의를 요청하지 않음&lt;/li&gt;
&lt;li&gt;chaining : &lt;code&gt;QuerySet&lt;/code&gt; 객체를 반환하는 경우, 그 객체를 이용해 요청을 이어나감&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우리가 앞서 만든 &lt;code&gt;Photo&lt;/code&gt; 모델 클래스로 예를 들겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;qs = Photo.objects.filter(pk__in=(1, 2, 3, 4, ))  # 첫 번째 요청.
qs = qs.filter(description__contains=&amp;#39;te&amp;#39;)  # 두 번째 요청.
qs.count()  # 세 번째 요청.
qs.count()  # 네 번째 요청.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;총 네 번 &lt;code&gt;QuerySet&lt;/code&gt; 객체의 메서드를 호출했습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;첫 번째 요청은 &lt;code&gt;pk&lt;/code&gt; 모델 필드(기본키, primary key)가 1, 2, 3, 4인 데이터를 가져오라는 질의를 만듭니다. SQL 질의문으로 &lt;code&gt;SELECT * FROM &amp;quot;photo_photo&amp;quot; WHERE &amp;quot;photo_photo&amp;quot;.&amp;quot;id&amp;quot; IN (1, 2, 3, 4)&lt;/code&gt;을 생성한 채 일단 기다립니다.&lt;/li&gt;
&lt;li&gt;두 번째 요청은 &lt;code&gt;description&lt;/code&gt; 모델 필드로 &lt;code&gt;te&lt;/code&gt; 문자열을 포함하는 데이터를 가져오라는 질의를 만듭니다. 기존 질의문을 조합한 만드므로 질의문은 &lt;code&gt;SELECT * FROM &amp;quot;photo_photo&amp;quot; WHERE (&amp;quot;photo_photo&amp;quot;.&amp;quot;id&amp;quot; IN (1, 2, 3, 4) AND &amp;quot;photo_photo&amp;quot;.&amp;quot;description&amp;quot; LIKE %te% ESCAPE &amp;#39;\&amp;#39;)&lt;/code&gt;가 됩니다. 여전히 데이터베이스에 질의를 보내지 않고 기다립니다.&lt;/li&gt;
&lt;li&gt;세 번째 요청은 여태까지 누적한 탐색(lookup) 조건에 해당하는 모든 데이터의 개수를 가져오는 &lt;code&gt;count()&lt;/code&gt; 메서드입니다. 데이터베이스에 질의를 보내야만 확인 가능한 데이터입니다. 여태까지 만든 질의문을 비로소 데이터베이서에 요청합니다.&lt;/li&gt;
&lt;li&gt;네 번째 요청도 &lt;code&gt;count()&lt;/code&gt; 메서드입니다. 이미 캐쉬된 데이터가 있어서 데이터베이스에 질의하지 않고 보관하고 있는 데이터에서 개수를 가져와 반환합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;count()&lt;/code&gt; 메서드는 개수를 숫자로 반환하며, 숫자는 정수형(&lt;code&gt;int&lt;/code&gt;) 객체여서 더이상 &lt;code&gt;QuerySet&lt;/code&gt; 객체의 특성을 사용하지 못합니다. 이렇게 &lt;code&gt;QuerySet&lt;/code&gt; 객체를 반환하지 않는 model manager API는 다음과 같습니다.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;메서드&lt;/th&gt;
&lt;th&gt;반환하는 객체&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
&lt;td&gt;조건에 해당하는 특정 데이터를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
&lt;td&gt;&lt;code&gt;QuerySet&lt;/code&gt;에 보관된 데이터 중 첫 번째 데이터를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;last()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
&lt;td&gt;&lt;code&gt;QuerySet&lt;/code&gt;에 보관된 데이터 중 마지막 데이터를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;earliest()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
&lt;td&gt;인자로 전달해 지정한 모델 필드를 기준으로 가장 첫 번째 데이터를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;latest()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
&lt;td&gt;인자로 전달해 지정한 모델 필드를 기준으로 가장 마지막 데이터를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt; 객체&lt;/td&gt;
&lt;td&gt;&lt;code&gt;QuerySet&lt;/code&gt;에 보관된 질의를 기준으로 개수를 가져오거나 보관된 데이터의 개수를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt; 객체&lt;/td&gt;
&lt;td&gt;&lt;code&gt;QuerySet&lt;/code&gt;에 보관된 질의 또는 보관된 데이터를 기준으로 데이터가 존재하는 지 여부를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_or_create()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
&lt;td&gt;조건에 해당하는 특정 데이터를 가져오고 없으면 인자로 전달한 내용으로 데이터를 저장한 후 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;update_or_create()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
&lt;td&gt;특정 데이터를 수정하고, 그 데이터가 없으면 인자로 전달한 내용으로 데이터를 저장한 후 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;이외에도 몇 가지 더 있는데 강좌 진행 중 사용하면 자세히 다루겠습니다. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;QuerySet&lt;/code&gt; 객체를 반환하는 메서드도 살펴 보겠습니다.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;메서드&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;전체 데이터를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;인자로 전달한 조건에 해당하는 데이터를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;인자로 전달한 조건에 해당하지 않는 데이터를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지정한 모델 필드로 정렬하여 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;QuerySet&lt;/code&gt;에 저장된 데이터를 뒤집어서 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N:1(ManyToOne, &lt;code&gt;ForeginKey&lt;/code&gt;)으로 연결된 데이터를 함께 가져온다. 데이터베이스의 &lt;code&gt;JOIN&lt;/code&gt; 처리.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;prefetch_related()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N:N(&lt;code&gt;ManyToManyField&lt;/code&gt;)으로 연결된 함께 데이터를 가져온다. 데이터베이스의 &lt;code&gt;JOIN&lt;/code&gt; 처리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;using()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지정한 데이터베이스에서 데이터를 가져온다. 기본은 &lt;code&gt;default&lt;/code&gt;로 지정된 데이터베이스.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;이번 편에서는 &lt;code&gt;all()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;와 &lt;code&gt;order_by()&lt;/code&gt;을 다루며, 다른 메서드는 사용할 때 자세히 다루겠습니다.&lt;/p&gt;

&lt;h4&gt;&lt;code&gt;filter()&lt;/code&gt; 메서드&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;photo_set&lt;/code&gt;을 설명하려고 먼 길 다녀왔네요. &lt;code&gt;photo_set&lt;/code&gt; 속성은 &lt;code&gt;QuerySet&lt;/code&gt; 객체입니다. 그냥 객체는 아니고 조건이 걸려있는 &lt;code&gt;QuerySet&lt;/code&gt;입니다. &lt;code&gt;photo_set&lt;/code&gt;은 &lt;code&gt;User&lt;/code&gt; 모델의 인스턴스 객체에서 사용하는데, 이 말은 &lt;code&gt;User&lt;/code&gt; 모델로 가져온 이용자 데이터를 담고 있는 인스턴스 객체, 즉 특정 이용자에 연결된 &lt;code&gt;photo_set&lt;/code&gt;입니다. 이를 &lt;code&gt;Photo&lt;/code&gt; 모델로 풀어쓰면 다음 코드와 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;current_user = User.objects.get(username=&amp;#39;hannal&amp;#39;)
photos = Photo.objects.filter(user=current_user)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 코드는 &lt;code&gt;username&lt;/code&gt;이 &lt;code&gt;&amp;#39;hannal&amp;#39;&lt;/code&gt;인 이용자를 &lt;code&gt;current_user&lt;/code&gt;에 할당하고, 소유주(&lt;code&gt;user&lt;/code&gt;)가 &lt;code&gt;current_user&lt;/code&gt;인 모든 사진 게시물(&lt;code&gt;Photo&lt;/code&gt;)을 찾아서 &lt;code&gt;photos&lt;/code&gt;에 할당합니다. 간단히 말해 &lt;code&gt;username&lt;/code&gt;이 &lt;code&gt;&amp;#39;hannal&amp;#39;&lt;/code&gt;인 이용자의 모든 사진 게시물을 가져오는 것이지요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 메서드는 검색(lookup) 조건을 &lt;a href=&quot;http://blog.hannal.com/2015/03/keyword-only-arguments_and_annotations_for_python3/&quot;&gt;키워드 인자&lt;/a&gt;를 받습니다. 인자 이름(key)는 모델 필드의 탐색 방식이고 전달하는 객체(value)는 검색할 값입니다. &lt;code&gt;filter(description=&amp;#39;hannal&amp;#39;)&lt;/code&gt;로 키워드 인자를 전달하면 모델 필드 &lt;code&gt;description&lt;/code&gt;의 값이 &lt;code&gt;hannal&lt;/code&gt;과 일치하는 데이터를 찾습니다.&lt;/p&gt;

&lt;p&gt;하지만 검색 방식이 이렇게 단순하진 않습니다. &lt;code&gt;hannal&lt;/code&gt; 문자열과 일치하는 게 아니라 &lt;code&gt;hannal&lt;/code&gt; 문자열을 포함한다든지 지정한 숫자보다 큰 값을 갖는 데이터를 찾는 식으로 다양한 검색 방식이 필요한데, Django는 모델 필드 이름에 &lt;code&gt;__탐색키워드&lt;/code&gt;를 덧붙인 인자 이름으로 이러한 검색을 지원합니다. 예를 들어 &lt;code&gt;hannal&lt;/code&gt; 문자열을 포함하는 데이터를 찾는 조건이라면 &lt;code&gt;filter(description__contains=&amp;#39;hannal&amp;#39;)&lt;/code&gt;와 같이 &lt;code&gt;__contains&lt;/code&gt;를 모델 필드인 &lt;code&gt;description&lt;/code&gt;에 덧붙입니다.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;탐색 키워드&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지정한 문자열을 포함&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;리스트나 튜플에 담긴 값들에 해당&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지정한 값을 &lt;strong&gt;초과&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지정한 값 &lt;strong&gt;이상&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지정한 값 &lt;strong&gt;미만&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지정한 값 &lt;strong&gt;이하&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;year&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지정한 연도. &lt;code&gt;DateField&lt;/code&gt;나 &lt;code&gt;DateTimeField&lt;/code&gt; 필드에 한함&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;month&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지정한 월. &lt;code&gt;DateField&lt;/code&gt;나 &lt;code&gt;DateTimeField&lt;/code&gt; 필드에 한함&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;day&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지정한 일. &lt;code&gt;DateField&lt;/code&gt;나 &lt;code&gt;DateTimeField&lt;/code&gt; 필드에 한함&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;탐색 키워드 역시 자주 쓰는 것만 소개하였으며, 이외 탐색 키워드는 사용할 때 자세히 다루겠습니다.&lt;/p&gt;

&lt;p&gt;여러 탐색 조건을 지정해도 되는데, 함수에 키워드 인자 여러 개를 넣는 방법과 동일합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Photo.objects.filter(user=current_user, description__contains=&amp;#39;te&amp;#39;)
Photo.objects.filter(user=current_user).filter(description__contains=&amp;#39;te&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;두 코드는 동일한 역할을 합니다. 이 코드는 사진 게시물의 &lt;code&gt;user&lt;/code&gt;가 &lt;code&gt;current_user&lt;/code&gt;이고(AND), &lt;code&gt;description&lt;/code&gt;에 &lt;code&gt;&amp;#39;te&amp;#39;&lt;/code&gt; 문자열이 포함된 모든 데이터를 가져옵니다. 쉼표로 구분해 여러 키워드 인자를 전달하든 &lt;code&gt;filter()&lt;/code&gt; 메서드를 체인으로 반복해서 부르든 동일하게 &lt;code&gt;AND&lt;/code&gt; 조합으로 데이터를 찾습니다. &lt;code&gt;OR&lt;/code&gt; 조합으로 찾으려면 별도 조치를 취해야 하는데, 나중에 다루겠습니다.&lt;/p&gt;

&lt;p&gt;정리하면, &lt;code&gt;User&lt;/code&gt; 모델 클래스의 인스턴스 객체에 있는 &lt;code&gt;photo_set&lt;/code&gt; 속성은 &lt;code&gt;Photo&lt;/code&gt; 모델 클래스와 연결되어 만들어졌으며, &lt;code&gt;QuerySet&lt;/code&gt; 객체로 만들어졌는데 이 &lt;code&gt;QuerySet&lt;/code&gt; 객체는 &lt;code&gt;photo_set&lt;/code&gt; 속성이 속한 &lt;code&gt;User&lt;/code&gt; 인스턴스 객체의 데이터를 기반으로 합니다. &lt;code&gt;photo_set&lt;/code&gt;은 &lt;code&gt;QuerySet&lt;/code&gt; 객체이므로 체인 연결하듯이 후속 &lt;code&gt;QuerySet&lt;/code&gt;의 메서드를 사용할 수 있습니다. &lt;code&gt;current_user.photo_set.all()&lt;/code&gt;은 &lt;code&gt;all()&lt;/code&gt; 메서드를 쓴 것입니다. &lt;code&gt;Photo.objects.filter(user=current_user).all()&lt;/code&gt;과 동일한 역할을 합니다.&lt;/p&gt;

&lt;h3&gt;사진 정렬하여 나열하기&lt;/h3&gt;

&lt;p&gt;프로필 페이지에서 사진은 저장된 등록된 순서대로 나열됩니다. 별도로 지정하지 않으면 기본키(primary key)를 기준으로 하여 순서대로 나열되기 때문입니다. &lt;code&gt;QuerySet&lt;/code&gt;으로 가져오는 데이터를 정렬하는 방법은 크게 두 가지입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;order_by()&lt;/code&gt; 메서드로 정렬할 모델 필드 이름 지정&lt;/li&gt;
&lt;li&gt;모델에 정렬할 기본(default) 기준을 지정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;order_by()&lt;/code&gt;는 &lt;a href=&quot;http://blog.hannal.com/2015/03/keyword-only-arguments_and_annotations_for_python3/&quot;&gt;위치 인자&lt;/a&gt;로 정렬 기준으로 삼을 모델 필드 이름을 문자열로 받습니다. 여러 개를 지정하면 정렬 우선순위에 따라 정렬합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Photo.objects.order_by(&amp;#39;created_at&amp;#39;)  # created_at 순서대로.
Photo.objects.order_by(&amp;#39;-created_at&amp;#39;)  # created_at 역순으로.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫 번째 구문은 전체 사진 게시물을 &lt;code&gt;created_at&lt;/code&gt; 모델 필드 기준으로 하여 순서대로 가져옵니다. 역순으로 가져오려면 모델 필드 이름 앞에 &lt;code&gt;-&lt;/code&gt;를 덧붙이면 되며 두 번째 구문이 &lt;code&gt;created_at&lt;/code&gt; 역순으로 정렬하는 것입니다. 만약 &lt;code&gt;created_at&lt;/code&gt;, 즉 생성일시가 완전히 동일한 경우에는 기본키 역순으로 정렬하도록 하려면 인자를 추가하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Photo.objects.order_by(&amp;#39;-created_at&amp;#39;, `-pk`)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;무작위 순서로 정렬하려면 &lt;code&gt;Photo.objects.order_by(&amp;#39;?&amp;#39;)&lt;/code&gt;처럼 &lt;code&gt;&amp;#39;?&amp;#39;&lt;/code&gt;를 인자로 전달하면 되는데, 주의할 점은 상당히 느립니다. 되도록이면 쓰지 않길 권합니다.&lt;/p&gt;

&lt;p&gt;모델에 정렬할 기본 기준을 정하려면 모델에 &lt;code&gt;Meta&lt;/code&gt; 클래스를 만들고, &lt;code&gt;Meta&lt;/code&gt; 클래스 안에 &lt;code&gt;ordering&lt;/code&gt; 속성을 만들어 정렬할 모델 필드 이름을 나열하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Photo(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL)
    image_file = models.ImageField(upload_to=&amp;#39;%Y/%m/%d&amp;#39;)
    filtered_image_file = models.ImageField(
        null=True,
        upload_to=&amp;#39;static_files/uploaded/%Y/%m/%d&amp;#39;
    )
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)

    class Meta:
        ordering = (&amp;#39;-created_at&amp;#39;, &amp;#39;-pk&amp;#39;, )

    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;나중에 자세히 다루겠지만, 템플릿에서는 함수 호출하듯이 소괄호(&lt;code&gt;(&lt;/code&gt;과 &lt;code&gt;)&lt;/code&gt;)를 사용하여 객체 호출을 직접 하지 못합니다. &lt;code&gt;profile.html&lt;/code&gt; 템플릿 파일에서 &lt;code&gt;{% for photo in current_user.photo_set.all %}&lt;/code&gt;와 같은 구문을 &lt;code&gt;{% for photo in current_user.photo_set.order_by(&amp;#39;-created_at&amp;#39;, &amp;#39;-pk&amp;#39;) %}&lt;/code&gt;와 같이 쓰지 못합니다. 그래서 정렬하려면 뷰 함수에서 정렬한 데이터를 별도 변수에 할당하여 이 변수를 템플릿에 전달해야 합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# photo/views.py

def profile(request, username):
    User = get_user_model()
    user = get_object_or_404(User, username=username)
    photos = user.photo_set.order_by(&amp;#39;-created_at&amp;#39;, &amp;#39;-pk&amp;#39;)

    return render(request, &amp;#39;profile.html&amp;#39;, {
        &amp;#39;current_user&amp;#39;: user,
        &amp;#39;photos&amp;#39;: photos,
    })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{# photo/templates/profile.html #}
&amp;lt;ul&amp;gt;
{% for photo in photos %}
    &amp;lt;li&amp;gt;&amp;lt;img src=&amp;quot;&amp;quot; /&amp;gt;&amp;lt;/li&amp;gt;
{% empty %}
    &amp;lt;li&amp;gt;게시한 사진이 없습니다.&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또는 모델에서 정렬 기준을 정의하여 따로 &lt;code&gt;order_by()&lt;/code&gt; 메서드를 쓰지 않더라도 기본으로 지정한 기준대로 정렬되도록 처리해도 됩니다.&lt;/p&gt;

&lt;p&gt;이 강좌에서는 명시한 정렬 기준이 코드에 드러나는 차원에서 뷰 함수에서 정렬하겠습니다.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;강좌 10편을 마칩니다. 정말 오랜만에 연재했네요. 이제 몇 회만 더 연재하면 강좌 1부가 끝납니다. 강좌 분량이 많아지면서 처음 계획을 바꿨습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1부 : Django 전반을 두루 겪기&lt;/li&gt;
&lt;li&gt;2부 : 1부에서 다루지 않은 내용을 더 자세히 다루기&lt;/li&gt;
&lt;li&gt;3부 : 앞단 만들고 배포하기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;올해 안에 1부를 마치도록 노력하겠습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/10-fullsource/pystagram&quot;&gt;10편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.hannal.com/2014/11/start_with_django_webframework_05/&quot;&gt;5편 url에 view 함수 연결해서 사진 출력하기&lt;/a&gt; 부록에 변화한 &lt;code&gt;urlpatterns&lt;/code&gt;에 대한 내용을 2015년 10월에 추가하였습니다.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Django 1.8판부터 템플릿 설정 정책이 바뀌었으며, 이에 대한 내용은 &lt;a href=&quot;http://blog.hannal.com/2014/9/start_with_django_webframework_03/&quot;&gt;3편 Photo 앱과 모델 만들기&lt;/a&gt; 부록으로 2015년 10월에 추가하였습니다.&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 02 Oct 2015 12:45:00 +0900</pubDate>
        <link>http://blog.hannal.com//2015/10/start_with_django_webframework_10/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/10/start_with_django_webframework_10/</guid>
        
        <category>django</category>
        
        <category>queryset</category>
        
        <category>ordering</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
      <item>
        <title>Celery의 Subtask 기능을 이용하여 Chord와 Chain로 작업 분산해서 다루기</title>
        <description>&lt;h3&gt;웹페이지 긁어오기&lt;/h3&gt;

&lt;p&gt;Python으로 웹페이지 열 곳을 긁어와서 하나로 합쳐 보겠습니다. Python HTTP library인 &lt;a href=&quot;http://docs.python-requests.org/en/latest/&quot;&gt;requests&lt;/a&gt;를 쓰면 아주 간단합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import requests

def fetch_page_by_url(url):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text

merged_text = []
for i in range(0, 10):
    result = fetch_page_by_url(
        &amp;#39;http://localhost:8000/{}.html&amp;#39;.format(i)
    )

    if result is not None:
        merged_text.append(result)

do_something(merged_text.join(&amp;#39;&amp;#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Celery를 이용해 비동기 방식으로 긁어오기&lt;/h3&gt;

&lt;p&gt;차례대로 긁어오니 열 개 페이지를 모두 가져오기 전까지는 결과를(&lt;code&gt;do_something(merged_text.join(&amp;#39;&amp;#39;))&lt;/code&gt;) 확인하지 못합니다. &lt;a href=&quot;https://docs.python.org/3/library/multiprocessing.html&quot;&gt;multiprocessing&lt;/a&gt;을 이용해 여러 프로세스로 동시성을 확보해도 되지만, 분산 작업 큐 시스템인 &lt;a href=&quot;http://celery.readthedocs.org/en/latest/&quot;&gt;Celery&lt;/a&gt;로 쉽고 간편하게 비동기 처리하기도 합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from celery import Celery

app = Celery(__name__)

@app.task
def fetch_page_by_url(url):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text

merged_text = []
for i in range(0, 10):
    result = fetch_page_by_url.apply_async(
        &amp;#39;http://localhost:8000/{}.html&amp;#39;.format(i)
    )

    if result is not None:
        merged_text.append(result)

do_something(merged_text.join(&amp;#39;&amp;#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 코드에는 문제가 있습니다. Celery 작업 수행 객체로 장식된(decorated) &lt;code&gt;fetch_page_by_url&lt;/code&gt; 객체의 &lt;code&gt;apply_async()&lt;/code&gt; 메서드를&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 이용하여 &lt;strong&gt;비동기&lt;/strong&gt;로 작업을 수행하는데, 이 메서드가 반환하는 객체는 &lt;code&gt;res.text&lt;/code&gt;가 아니라 Celery 결과 작업을 다루는 객체입니다. 게다가 비동기로 작업을 수행하고 바로 프로그램 수행 제어권을 호출자에게 반환하므로 &lt;code&gt;fetch_page_by_url.apply_async(...)&lt;/code&gt; 호출이 되자마자 바로 다음 구문을 수행하는데, 웹 페이지를 가져오는 작업이 끝났는지 여부는 알지 못 합니다.&lt;/p&gt;

&lt;p&gt;이 문제를 피하려면 &lt;code&gt;get()&lt;/code&gt; 메서드를 이용합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    if result.get() is not None:
        merged_text.append(result)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;get()&lt;/code&gt; 메서드는 비동기로 수행하는 작업 객체(&lt;code&gt;fetch_page_by_url()&lt;/code&gt;)가 작업을 마치고 값을 반환하기를 &lt;strong&gt;동기식&lt;/strong&gt;으로 기다려서 반환합니다. 어?! 이렇게 할 거라면 굳이 Celery를 쓸 필요가 없지요. Celery에게 여러 작업을 맡겨서 비동기로 처리하고, 비동기로 처리한 결과를 받아다 뭔가를 하려면 다른 방법을 써야 합니다. 이 글에서는 &lt;code&gt;chain&lt;/code&gt;와 &lt;code&gt;chord&lt;/code&gt;을 사용하겠습니다.&lt;/p&gt;

&lt;h3&gt;chain 기능&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;chain&lt;/code&gt; 기능은 이름에서 전해지듯이 작업을 체인처럼 줄줄이 수행합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from celery import chain

@app.task
def fetch_page_by_url(url, append_text=None):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        if append_text is None
            return res.text
        else:
            res.text + append_text

tasks = []
for i in range(0, 10):
    tasks.append(
        fetch_page_by_url.subtask(
            &amp;#39;http://localhost:8000/{}.html&amp;#39;.format(i)
        )
    )

result = chain(tasks)()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;subtask()&lt;/code&gt;는 Celery 작업 객체를 하위 작업으로 수행하는 메서드입니다&lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. &lt;code&gt;fetch_page_by_url&lt;/code&gt; 객체를 하위 작업으로 수행하는 작업 열 개를 담아 &lt;code&gt;chain()&lt;/code&gt;에 전달하면 &lt;code&gt;chain()&lt;/code&gt;은 순서대로 작업을 수행합니다. 각 작업이 반환하는 객체는 다음 작업자에게 인자로 전달합니다. 첫 번째 &lt;code&gt;fetch_page_by_url()&lt;/code&gt; 함수가 반환하는 웹페이지 문자열을 두 번째 &lt;code&gt;fetch_page_by_url()&lt;/code&gt;는 두 번째 인자로 받는 것이죠. 그래서 두 번째 &lt;code&gt;fetch_page_by_url()&lt;/code&gt;부터는 앞 작업자가 반환하는 결과를 넘겨 받는 것이지요.&lt;/p&gt;

&lt;p&gt;다른 예를 들어 보겠습니다. 숫자 두 개를 인자로 전달하면 두 숫자를 더하는 작업자를 쓰겠습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;첫 번째 셈은 1 + 1 입니다.&lt;/li&gt;
&lt;li&gt;두 번째 셈은 첫 번째 덧셈 결과를 받아서 10을 더합니다.&lt;/li&gt;
&lt;li&gt;세 번째 셈은 두 번째 덧셈 결과를 받아서 100을 더합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이걸 &lt;code&gt;chain()&lt;/code&gt;을 이용하면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;do_chain_tasks = chain(add.s(1, 1), add.s(10), add.s(100))
do_chain_tasks()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;chain()&lt;/code&gt;도 바로 작업을 수행하는 게 아니라 Celery 작업 객체를 반환하며&lt;sup id=&quot;fnref3&quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, 이 작업 객체를 실행해야 합니다. 바로 위 코드는 &lt;code&gt;chain(...)()&lt;/code&gt;라는 구문을 나눈 것입니다.&lt;/p&gt;

&lt;p&gt;재밌는 점은 Celery는 비트 연산으로도 &lt;code&gt;chain()&lt;/code&gt; 작업 객체를 만들어 준다는 점입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(
    fetch_page_by_url.s(&amp;#39;http://localhost:8000/0.html&amp;#39;) |
    fetch_page_by_url.s(&amp;#39;http://localhost:8000/1.html&amp;#39;) |
    fetch_page_by_url.s(&amp;#39;http://localhost:8000/2.html&amp;#39;) |
    fetch_page_by_url.s(&amp;#39;http://localhost:8000/3.html&amp;#39;)
).apply_async()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참 꼼꼼하게 만들어 놨어요. :)&lt;/p&gt;

&lt;h3&gt;chord 기능&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;chain()&lt;/code&gt;을 이용해 비동기로 열 개 작업을 수행하고 그 결과를 합쳤는데, 아쉬운 마음이 듭니다. 전체 작업 자체는 분명 비동기로 시작한 게 맞지만, 웹페이지를 긁어오는 작업도 동시에 분산해서 처리하면 더 효율이 좋을 겁니다. &lt;code&gt;chord()&lt;/code&gt;는 하위 작업을 동시에 수행하고, 각 작업자가 반환하는 값을 callback 실행 객체로 전달해줍니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from collections import MutableSequence
from celery import chord

@app.task
def fetch_page_by_url(url):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text

@app.task
def merge_text(texts):
    assert(isinstance(texts, MutableSequence))
    return texts.join(&amp;#39;&amp;#39;)

tasks = []
for i in range(0, 10):
    tasks.append(
        fetch_page_by_url.s(&amp;#39;http://localhost:8000/{}.html&amp;#39;.format(i))
    )

do_chain_tasks = chord(tasks)
do_chain_tasks(merge_text.s())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fetch_page_by_url()&lt;/code&gt; 함수가 원래대로(?) 돌아왔고, &lt;code&gt;merge_text()&lt;/code&gt; 함수가 새로 추가됐습니다. &lt;code&gt;merge_text()&lt;/code&gt;는 전달받은 인자 &lt;code&gt;texts&lt;/code&gt;를 합치는 일을 하는데, &lt;code&gt;fetch_page_by_url()&lt;/code&gt;가 반환하는 문자열을 담은 리스트형(&lt;code&gt;list&lt;/code&gt;) 객체입니다. 맨 처음에 비동기로 작성한 코드에서 웹페이지 문자열을 리스트로 담은 &lt;code&gt;merged_text&lt;/code&gt;와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chord()&lt;/code&gt;는 각 작업자(&lt;code&gt;fetch_page_by_url()&lt;/code&gt;)가 반환하는 값을 리스트형으로 모아서 callback 객체에게 인자로 전달합니다. &lt;code&gt;chord()&lt;/code&gt;로 만든 Celery 작업 객체로 callback 객체를 전달할 때 인자를 지정하지 않아도 됩니다. 알아서 넣어 줍니다.&lt;/p&gt;

&lt;p&gt;근데 이 코드엔 사소하다면 사소하고 심각하다면 심각한 문제가 있습니다. 작업들을 비동기로 수행하다보니 웹페이지 문자열이 우리가 원하는 순서대로 담겨져 &lt;code&gt;merge_text()&lt;/code&gt;로 전달된다는 보장이 없습니다. 작업이 먼저 끝나는 순서대로 결과가 담기니 0 - 1 - 2 - 3 ... 순서가 될 지 9 - 4 - 7 - 1 순서가 될 지는 아무도 모릅니다.&lt;/p&gt;

&lt;p&gt;여러 해결책이 있겠지만, 각 작업자마다 순번을 주고, &lt;code&gt;merge_text()&lt;/code&gt;는 이 순번대로 문자열을 합치면 되겠네요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@app.task
def fetch_page_by_url(url, num):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text, num

@app.task
def merge_text(texts):
    assert(isinstance(texts, MutableSequence))
    texts.sort(key=lambda x: x[1])
    return texts.join(&amp;#39;&amp;#39;)

tasks = []
for i in range(0, 10):
    tasks.append(
        fetch_page_by_url.s(
            &amp;#39;http://localhost:8000/{}.html&amp;#39;.format(i), i
        )
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;각 &lt;code&gt;fetch_page_by_url()&lt;/code&gt;에 두 번째 인자로 순번(&lt;code&gt;i&lt;/code&gt;)을 전달하고, &lt;code&gt;fetch_page_by_url()&lt;/code&gt;는 받은 순번을 웹페이지 문자열과 함께 그대로 반환합니다. &lt;code&gt;merge_text()&lt;/code&gt;가 전달받은 &lt;code&gt;texts&lt;/code&gt;엔 각 &lt;code&gt;fetch_page_by_url()&lt;/code&gt; 결과가 &lt;code&gt;[(문자열, 0), (문자열, 3), ...]&lt;/code&gt; 형태로 담깁니다. 그래서 각 항목의 두 번째(&lt;code&gt;[1]&lt;/code&gt;) 값으로 정렬하고 나서 한 문자열로 합친 것입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://celery.readthedocs.org/en/latest/userguide/canvas.html#the-primitives&quot;&gt;Canvas: Designing Workflows : The primitives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://celery.readthedocs.org/en/latest/userguide/tasks.html#avoid-launching-synchronous-subtasks&quot;&gt;Tasks : Avoid launching synchronous subtasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;대개는 &lt;code&gt;delay()&lt;/code&gt;라는 메서드로 줄여서 수행합니다.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;대개는 &lt;code&gt;s()&lt;/code&gt;로 줄인 메서드 이름을 씁니다.&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;&lt;code&gt;chain&lt;/code&gt;과 &lt;code&gt;chord&lt;/code&gt;는 함수처럼 생겼지만 클래스입니다.&amp;nbsp;&lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 08 Jul 2015 17:25:00 +0900</pubDate>
        <link>http://blog.hannal.com//2015/07/celery_chord_and_chain/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/07/celery_chord_and_chain/</guid>
        
        <category>python</category>
        
        <category>celery</category>
        
        <category>asynchronous</category>
        
        <category>distributed</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>9. 로그인한 이용자만 사진 게시물 게시하기</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막 갱신일시 : 2015년 6월 28일 1시 20분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;지난 편에서는 Django 이용자 인증 체계을 알아봤으니 이번 편에서는 인증 기능을 이용하여 로그인한 이용자만 사진 게시물을 게시하는 기능을 만들어 보겠습니다.&lt;/p&gt;

&lt;h3&gt;1. 사진 게시물에 이용자 정보 연결&lt;/h3&gt;

&lt;h4&gt;(1) 기본키 (Primary Key)&lt;/h4&gt;

&lt;p&gt;로그인한 이용자만 사진 게시물을 게시한다면 각 사진 게시물엔 사진을 게시한 이용자 정보를 담아야 합니다. 누가 게시한 사진인지 알아야 하니까요. 이용자 ID(&lt;code&gt;username&lt;/code&gt;)을 문자열로 담아도 되지만, 대개는 고유하며 변하지 않을 정보인 기본키(Primary Key)를 담습니다. &lt;/p&gt;

&lt;p&gt;이용자가 따로 기본키 역할을 하는 모델 필드를 지정하지 않으면 Django는 관례대로 &lt;code&gt;id&lt;/code&gt;라는 모델 필드를 알아서 만들고 이를 기본키로 사용합니다. 사진 모델인 &lt;code&gt;Photo&lt;/code&gt;로 사진 게시물 데이터를 &lt;code&gt;photo01&lt;/code&gt;이라는 인스턴스 객체로 할당하면 이 객체엔 &lt;code&gt;id&lt;/code&gt;라는 멤버 변수가 속성으로 존재하고 이 속성에 정수(&lt;code&gt;int&lt;/code&gt;) 값이 할당되어 있습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt;&amp;gt;&amp;gt; photo01 = Photo.objects.last()
&amp;gt;&amp;gt;&amp;gt; print(photo01.id)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;모델의 인스턴스 객체엔 &lt;code&gt;pk&lt;/code&gt; 속성도 존재하는데, 이 속성은 기본키를 가리키고 있습니다. 이용자가 &lt;code&gt;id&lt;/code&gt; 모델 필드를 기본키로 하지 않고 &lt;code&gt;uuid&lt;/code&gt;라는 모델 필드를 만들어 이 필드를 기본키로 지정하면 &lt;code&gt;pk&lt;/code&gt;는 이 모델 필드를 가리킵니다. 우리는 각 모델의 기본키로 설정된 모델 필드의 이름이 무엇인지 신경쓰지 않고 &lt;code&gt;pk&lt;/code&gt; 속성을 사용하면 됩니다.&lt;/p&gt;

&lt;h4&gt;(2) 모델 관계 필드 (relationship fields)&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델로 데이터베이스에 저장할 데이터에 이용자 모델의 기본키 값을 저장하려면 다음과 같이 하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Photo(models.Model):
    user_id = models.IntegerField()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런 뒤에 &lt;code&gt;Photo&lt;/code&gt; 모델로 데이터를 저장하는 과정에서 이용자의 기본키 값을 &lt;code&gt;user_id&lt;/code&gt;에 할당하면 됩니다. 각 게시물을 게시한 이용자가 누구인지 아니까 각 사진 게시물 정보를 가져오면서 이용자 정보도 함께 가져오면 좋겠군요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.contrib.auth import get_user_model
User = get_user_model()

class Photo(models.Model):
    # 중략
    def get_user(self):
        return User.objects.get(pk=self.user_id)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 코드들엔 문제가 있습니다. 모델의 기본키 모델 필드가 &lt;code&gt;IntegerField&lt;/code&gt;가 아닌 경우에 제대로 대응하지 못하고, &lt;code&gt;get_user()&lt;/code&gt; 메서드를 호출할 때마다 매번 이용자 모델에서 이용자 데이터를 탐색해 반환하며, 이용자 모델과 연결하는 모델마다 매번 저런 구현을 중복 적용해야 합니다. 이런 문제들에 대응하는 구현체를 만들어야 하는데, Django는 &lt;a href=&quot;https://docs.djangoproject.com/en/1.8/ref/models/fields/#module-django.db.models.fields.related&quot;&gt;관계 모델 필드&lt;/a&gt;로 제공합니다. 총 세 종류입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ForeignKey&lt;/code&gt; : 1 대 다(1 to n) 관계&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OneToOneField&lt;/code&gt; : 1 대 1 관계&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ManyToManyField&lt;/code&gt; : 다 대 다(n to n) 관계&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이용자와 사진 게시물 관계로 세 관계 필드를 살펴 보겠습니다. &lt;code&gt;OneToOneField&lt;/code&gt;는 이용자는 오직 사진 게시물을 하나만 게시하고 소유합니다. &lt;code&gt;ManyToManyField&lt;/code&gt;는 이용자가 사진 게시물을 여러 개 올릴 수 있는데, 각 사진 게시물을 여러 이용자가 소유하는 게 가능합니다. 1번 사진을 Hannal 이용자 뿐만 아니라 Kay, Yuna 이용자가 소유하는 관계가 맺어지므로 소유한 누구나 사진 게시물을 변경하거나 지울 수 있습니다. 마지막으로 &lt;code&gt;ForeignKey&lt;/code&gt;는 한 이용자가 여러 사진 게시물을 게시하고 소유하는 관계입니다. 우리에게 필요한 모델 관계군요. &lt;code&gt;ForeignKey&lt;/code&gt;에 대한 건 본 편 “2. &lt;code&gt;ForeignKey&lt;/code&gt; 모델 필드”를 참고하시고, 연결부터 해보겠습니다.&lt;/p&gt;

&lt;h4&gt;(3) &lt;code&gt;Photo&lt;/code&gt; 모델에 이용자 기본키 정보 연결하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.conf import settings

class Photo(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL)
    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ForeignKey&lt;/code&gt; 모델 필드(클래스)는 &lt;code&gt;django.db.models&lt;/code&gt; 모듈에 있어서 다른 모델 필드처럼 &lt;code&gt;models&lt;/code&gt; 객체에서 접근하여 사용하면 됩니다. 첫 번째 인자로 관계 지을 모델을 모델 객체나 경로를 문자열로 전달합니다. &lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 설정 항목은 현재 프로젝트에서 사용하는 인증용 이용자 모델이 위치한 경로를 문자열로 지정하고 있습니다. &lt;a href=&quot;http://blog.hannal.com/2015/06/start_with_django_webframework_08/&quot;&gt;8. 로그인, 로그아웃 하기&lt;/a&gt;편에서 이에 대한 내용을 참조하세요.&lt;/p&gt;

&lt;h5&gt;마이그레이션 수행&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델이 변경됐으니 데이터베이스에 반영해야 합니다. 마이그레이션을 수행합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py makemigrations photo
You are trying to add a non-nullable field &amp;#39;user&amp;#39; to photo without a default;
we can&amp;#39;t do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows)
 2) Quit, and let me add a default in models.py
Select an option:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;긴 영어 문장이 나오며 뭔가를 물어 보는데 당황하지 말고 내용을 잘 살펴 보세요. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;당신은 Null(&lt;code&gt;None&lt;/code&gt;)을 허용하지 않는(non-nullable) &lt;code&gt;user&lt;/code&gt;라는 필드를 추가하려 하는데, 값이 주어지지 않는 경우에 기본으로 저장될 기본값(default)이 없다.&lt;/li&gt;
&lt;li&gt;데이터베이스가 기존에 저장된 데이터(populate existing rows)에 Null 외 값을 필요로 해서 우린(Django) 이 작업을 바로 수행하지 못한다.&lt;/li&gt;
&lt;li&gt;그러니 뭔가 조치를 취해달라.

&lt;ol&gt;
&lt;li&gt;이 자리에서 기본값을 제공해주든&lt;/li&gt;
&lt;li&gt;마이그레이션 수행 과정에서 빠져 나간 뒤에 &lt;code&gt;models.py&lt;/code&gt;에 기본값 지정 인자(&lt;code&gt;default&lt;/code&gt;)를 추가해달라.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그 자리에서 기본값을 제공해줄테니 &lt;code&gt;1&lt;/code&gt;을 입력합니다. Django가 뭔가를 요구하네요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Please enter the default value now, as valid Python
The datetime module is available, so you can do e.g. datetime.date.today()
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본값으로 유효한 Python의 객체를 입력하라는 말입니다. 일단 &lt;code&gt;1&lt;/code&gt;을 입력합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Migrations for &amp;#39;photo&amp;#39;:
  0006_photo_user.py:
    - Add field user to photo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제야 마이그레이션 수행에 필요한 마이그레이션 작업 파일이 만들어 졌습니다. 두 번째 입력한 &lt;code&gt;1&lt;/code&gt;은 이용자 모델의 기본키 값이 &lt;code&gt;1&lt;/code&gt;을 뜻합니다. 기존에 저장한 사진 게시물의 이용자를 기본키 값이 &lt;code&gt;1&lt;/code&gt;인 이용자로 지정한 것입니다. 만약, 기존에 소유자가 없는 사진 게시물을 위해 별도 이용자를 만들어서 연결하고자 한다면, 그 이용자를 만들어서 그 이용자의 기본키 숫자값을 지정하면 됩니다.&lt;/p&gt;

&lt;p&gt;왜 기본키 값을 넣는지 첫 번째 이유는 앞서 설명을 하였고, 두 번째 이유는 “(2) ForeignKey 모델 필드”에서 설명하겠습니다.&lt;/p&gt;

&lt;p&gt;이제 &lt;code&gt;makemigrations&lt;/code&gt; 명령어로 만든 마이그레이션 작업 내용을 데이터베이스에 반영합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py migrate photo
Operations to perform:
  Apply all migrations: photo
Running migrations:
  Applying photo.0006_photo_user... OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. 로그인한 이용자만 사진 게시물 게시하기&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델에 이용자 모델 연결을 마쳤으니 이번엔 사진 게시물을 저장하는 과정에 로그인한 이용자 정보를 적용하겠습니다. 간단히 말해서 로그인한 이용자만 사진 게시물을 게시하는 것이지요.&lt;/p&gt;

&lt;h4&gt;(1) 현재 이용자를 사진 게시물에 적용&lt;/h4&gt;

&lt;p&gt;현재 웹 서비스에 연결된(requested) 접속 정보는 &lt;code&gt;request&lt;/code&gt; 객체에 담겨 있습니다. &lt;code&gt;request&lt;/code&gt;는 뷰(view) 함수가 첫 번째 인자로 전달받는 객체입니다. 개별 사진을 보는 &lt;code&gt;single_photo&lt;/code&gt; 뷰 함수는 &lt;code&gt;def single_photo(request, photo_id):&lt;/code&gt;와 같이, 사진 게시물을 새로 저장하는 &lt;code&gt;new_photo&lt;/code&gt; 뷰 함수는 &lt;code&gt;def new_photo(request):&lt;/code&gt;와 같이 첫 번째 인자로 &lt;code&gt;request&lt;/code&gt;를 전달 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reuqest&lt;/code&gt; 객체엔 &lt;code&gt;user&lt;/code&gt; 속성이 존재하는데, 이 속성은 접속한 이용자에 정보가 담겨 있습니다. 로그인한 이용자라면 이용자 모델 클래스로 생성한 인스턴스 객체가, 로그인하지 않은 이용자라면 &lt;code&gt;AnonymousUser&lt;/code&gt; 모델 클래스로 생성한 인스턴스 객체가 할당됩니다. 먼저 코드부터 작성해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def new_photo(request):
    if request.method == &amp;quot;GET&amp;quot;:
        edit_form = PhotoEditForm()
    elif request.method == &amp;quot;POST&amp;quot;:
        edit_form = PhotoEditForm(request.POST, request.FILES)

        if edit_form.is_valid():
            new_photo = edit_form.save(commit=False)
            new_photo.user = request.user
            new_photo.save()

            return redirect(new_photo.get_absolute_url())

    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;한 줄은 조금 바뀌었고, 두 줄이 추가됐습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if edit_form.is_valid():
    new_photo = edit_form.save(commit=False)
    new_photo.user = request.user
    new_photo.save()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;두 번째 줄 &lt;code&gt;new_photo = edit_form.save(commit=False)&lt;/code&gt;에서 &lt;code&gt;edit_form&lt;/code&gt; 객체는 사진 게시물 생성과 관련된 폼(Form)인 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼 클래스입니다. 첫 번째 줄에서 &lt;code&gt;is_valid()&lt;/code&gt;로 웹에서 전달받은 자료를 검증한 그 객체입니다. 이 객체가 모델 폼인 경우, 그러니까 &lt;code&gt;ModelForm&lt;/code&gt; 클래스를 상속받아 만든 폼인 경우 &lt;code&gt;save()&lt;/code&gt; 인스턴스 메서드를 포함하고 있는데, 이 메서드는 모델의 &lt;code&gt;save()&lt;/code&gt; 메서드와 동일한 역할을 합니다. 데이터를 모델에 연결된 데이터베이스 테이블에 저장하는 것이지요. 모델의 &lt;code&gt;save()&lt;/code&gt; 메서드와 마찬가지로 저장한 내용이 반영된 모델의 인스턴스 객체를 반환합니다. 즉, &lt;code&gt;edit_form.save()&lt;/code&gt;로부터 반환받은 객체를 할당한 &lt;code&gt;new_photo&lt;/code&gt;는 폼과 관련된 객체가 아니라 &lt;code&gt;PhotoEditForm&lt;/code&gt; 모델 폼 클래스에 연결되어 있는 &lt;code&gt;Photo&lt;/code&gt; 모델로 생성한 인스턴스 객체입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;save()&lt;/code&gt; 메서드에 인자로 전달한 &lt;code&gt;commit&lt;/code&gt;은 실제로 데이터베이스에 반영할 것인지 여부를 정합니다. &lt;code&gt;True&lt;/code&gt;를 전달하면 바로 데이터베이스에 저장하고, &lt;code&gt;False&lt;/code&gt;라고 하면 모델 클래스로 생성한 인스턴스 객체만 반영하고 데이터베이스에 실제로 반영하진 않습니다. 따로 반영 여부를 정해주지 않으면 기본값은 &lt;code&gt;True&lt;/code&gt;이어서 바로 데이터베이스에 반영합니다. 데이터베이스에 저장하지 않을 거면서 뭐하러 &lt;code&gt;save()&lt;/code&gt; 메서드를 호출했으며, &lt;code&gt;save()&lt;/code&gt; 메서드엔 실제로 반영할 것인지 여부를 정하는 &lt;code&gt;commit&lt;/code&gt; 인자가 필요한 이유는 무엇일까요? 답은 그 바로 다음에 나오는 두 줄에 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;new_photo.user = request.user&lt;/code&gt;는 &lt;code&gt;new_photo&lt;/code&gt; 객체의 &lt;code&gt;user&lt;/code&gt; 속성에 현재 로그인한 &lt;code&gt;request.user&lt;/code&gt; 속성을 할당하는 것입니다. &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼 클래스는 웹에서 폼 양식 자료가 담긴 &lt;code&gt;request.POST&lt;/code&gt;와 &lt;code&gt;request.FILES&lt;/code&gt;만 전달 받았지, 현재 이용자 정보가 담긴 &lt;code&gt;request.user&lt;/code&gt;를 전달받은 적이 없습니다. 그래서 &lt;code&gt;save()&lt;/code&gt; 메서드가 반환한 &lt;code&gt;new_photo&lt;/code&gt; 인스턴스 객체의 &lt;code&gt;user&lt;/code&gt;에는 이용자 정보가 없습니다. &lt;code&gt;Photo&lt;/code&gt; 모델에 &lt;code&gt;auth.User&lt;/code&gt;에 있는 이용자 모델을 &lt;code&gt;ForeignKey&lt;/code&gt; 관계로 연결했는데, 뷰 함수에서는 관련 정보를 &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt;에 반영하지 않았습니다.&lt;/p&gt;

&lt;p&gt;만약, &lt;code&gt;edit_form.save()&lt;/code&gt;나 &lt;code&gt;edit_form.save(commit=True)&lt;/code&gt;처럼 바로 데이터베이스에 반영하려고 하면 &lt;code&gt;IntegrityError&lt;/code&gt; 예외 오류가 발생하며, &lt;code&gt;NOT NULL constraint failed: photo_photo.user_id&lt;/code&gt;라 안내 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-IntegrityError.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;겁먹지 말고 오류 안내말을 잘 보세요. 정확히 이해하지 않은 채 추측만 하려는 태도는 안 좋지만, 여러분은 이 강좌 나머지 내용을 그냥 건너뛰지 않을테니 예외 오류 내용을 보고 상황을 추측해 보겠습니다. &lt;code&gt;NOT NULL&lt;/code&gt;, &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;photo_photo.user_id&lt;/code&gt; 이 세 가지 표현이 눈에 들어오지요? “photo”가 두 번 반복된 &lt;code&gt;photo_photo&lt;/code&gt;는 &lt;code&gt;Photo&lt;/code&gt; 모델과 연관되어 보이고, &lt;code&gt;user_id&lt;/code&gt;는 우리가 만든 적이 없지만 &lt;code&gt;user&lt;/code&gt; 모델 필드와 관련되어 보입니다. &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드에 &lt;code&gt;NOT NULL&lt;/code&gt;과 관련된 문제가 발생하여 진행하던 작업(&lt;code&gt;save()&lt;/code&gt;)이 실패했다는 뜻이군요. &lt;code&gt;NOT NULL&lt;/code&gt;은 &lt;code&gt;NULL&lt;/code&gt;이면 안 된다는 의미니까 &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드에 &lt;code&gt;NULL&lt;/code&gt;이 들어가서 오류가 생긴 겁니다.&lt;/p&gt;

&lt;p&gt;웹페이지의 폼 양식에서 이용자 모델의 기본키 값을 직접 전달하면 안 됩니다. 예를 들어, &lt;code&gt;hannal&lt;/code&gt; 이용자의 기본키 값이 &lt;code&gt;1023&lt;/code&gt;이고 이 값을 웹 폼 양식에서 &lt;code&gt;user_id&lt;/code&gt;로 담아서 서버로 전달한다면, 이용자는 기본키 값 숫자를 고쳐서 마치 다른 이용자가 사진 게시물을 올린 것처럼 왜곡할지도 모릅니다. 이런 정보는 서버에서 알아내서 다뤄야 합니다. 그게 &lt;code&gt;request.user&lt;/code&gt;입니다. 아하, &lt;code&gt;request.user&lt;/code&gt;를 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼 클래스에 전달하면 되겠구나.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;edit_form = PhotoEditForm(request.POST, request.FILES, request.user)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;request.POST&lt;/code&gt;처럼.&lt;/p&gt;

&lt;p&gt;아닙니다. 그렇게 알아서 동작(magic behaviour)해주지 않고, 그래서도 안 됩니다. 추측해야 하는 코드와 기능은 좋지 않다고 봅니다. 이용자 정보가 필요한 폼 클래스라면 이용자 정보를 따로 전달받도록 처리해야 합니다. Python 클래스는 실행 가능한(callable) 객체이므로 함수처럼 소괄호를 사용하여 실행하고 실행 결과로 인스턴스 객체를 반환 받는데, 인스턴스 초기화를 수행하는 메서드가 &lt;code&gt;__init__()&lt;/code&gt;입니다. 이용자 정보인 &lt;code&gt;request.user&lt;/code&gt;를 인자로 전달 받는 &lt;code&gt;__init__()&lt;/code&gt; 메서드를 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼 클래스에 만들면 됩니다. 이건 Class based view를 다룰 때 살펴보기로 하고, 이번 편에서는 &lt;code&gt;save()&lt;/code&gt; 메서드에 &lt;code&gt;commit&lt;/code&gt; 인자를 &lt;code&gt;False&lt;/code&gt;로 전달하여 처리합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드는 &lt;code&gt;user = models.ForeignKey(settings.AUTH_USER_MODEL)&lt;/code&gt;로 만들었고, 이 모델 필드는 NULL을 허용하지 않습니다. 데이터베이스 테이블에도 &lt;code&gt;NOT NULL&lt;/code&gt;로 정의되어 있습니다. 그래서 데이터베이스에 실제로 반영하지 말고 우선 모델로 생성한 인스턴스 객체를 &lt;code&gt;edit_form&lt;/code&gt; 객체로부터 받으려고 &lt;code&gt;save(commit=False)&lt;/code&gt; 메서드를 수행했습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EditPhotoForm&lt;/code&gt;이 반환하는 &lt;code&gt;Photo&lt;/code&gt; 모델의 인스턴스 객체를 &lt;code&gt;new_photo&lt;/code&gt;에 할당받고, 이 객체의 &lt;code&gt;user&lt;/code&gt; 속성에 이용자 정보인 &lt;code&gt;request.user&lt;/code&gt;를 할당합니다. &lt;code&gt;new_photo.user = request.user&lt;/code&gt; 코드입니다. 이제 &lt;code&gt;new_photo.save()&lt;/code&gt;를 수행하여 데이터베이스에 저장합니다. &lt;code&gt;new_photo.save(commit=True)&lt;/code&gt;와 동일합니다.&lt;/p&gt;

&lt;p&gt;이제 로그인한 이용자 정보가 사진 게시물에 반영되어 저장됩니다.&lt;/p&gt;

&lt;h4&gt;(2) &lt;code&gt;new_photo&lt;/code&gt; 뷰 함수에 로그인한 이용자만 접근하도록 제한&lt;/h4&gt;

&lt;p&gt;로그인하지 않은 이용자가 사진 게시물을 저장하려 하면 오류가 발생할 겁니다. 로그인하지 않은 이용자는 이용자 모델로 생성한 인스턴스 객체에 기본키 값이 없을테니 &lt;code&gt;IntegrityError&lt;/code&gt; 예외 오류가 발생할 것 같습니다. 이렇게 예상하셨다면 훌륭합니다. 한 번 시도해보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-anonymous_user_exception.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;실제로 발생하는 예외는 &lt;code&gt;ValueError&lt;/code&gt;가 발생하며, 안내말은 &lt;code&gt;User&lt;/code&gt; 모델 클래스로 만든 인스턴스여야 한다는 내용입니다. 앞서 설명드린 바와 같이 로그인하지 않은 경우 &lt;code&gt;request.user&lt;/code&gt;엔 &lt;code&gt;AnonymousUser&lt;/code&gt; 모델 클래스로 생성한 인스턴스 객체가 할당되어 있습니다. &lt;code&gt;django.contrib.auth.models&lt;/code&gt;에 있는데, 코드를 보면 아시겠지만 껍데기 역할을 할 뿐입니다.&lt;/p&gt;

&lt;p&gt;로그인한 이용자인지 여부는 &lt;code&gt;request.user&lt;/code&gt;의 &lt;code&gt;is_authenticated()&lt;/code&gt; 메서드를 실행하면 &lt;code&gt;bool&lt;/code&gt; 객체를 반환받아 구분합니다. &lt;code&gt;True&lt;/code&gt;이면 로그인한 이용자, &lt;code&gt;False&lt;/code&gt;이면 로그인하지 않은 이용자입니다. 코드도 아주 간단합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.conf import settings

def new_photo(request):
    if not request.user.is_authenticated():
        return redirect(settings.LOGIN_URL)
    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;로그인하지 않은 이용자가 &lt;code&gt;new_photo&lt;/code&gt; 뷰 함수로 접근하면 &lt;code&gt;settings.LOGIN_URL&lt;/code&gt;에 지정되어 있는 URL로 이동(redirect) 시킵니다. &lt;code&gt;LOGIN_URL&lt;/code&gt;은 &lt;code&gt;global_settings&lt;/code&gt;에 &lt;code&gt;/accounts/login/&lt;/code&gt;으로 기본 지정되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@login_required&lt;/code&gt; 장식자(decorator)를 사용하면 더 명확하고 간결합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.contrib.auth.decorators import login_required

@login_required
def new_photo(request):
    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-login_required.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;더 친절하게도 로그인한 후 이동할 도착지도 &lt;code&gt;next&lt;/code&gt; 인자로 지정됩니다. 로그인 주소를 &lt;code&gt;settings.LOGIN_URL&lt;/code&gt;에 따로 지정해주면 자동으로 변경한 주소로 이동해 줍니다.&lt;/p&gt;

&lt;h3&gt;3. 모델 관계에 더 자세히 알아보기&lt;/h3&gt;

&lt;p&gt;우리는 이용자 모델을 &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드에 &lt;code&gt;ForeignKey&lt;/code&gt; 관계로 연결했습니다. 그리고 &lt;code&gt;user&lt;/code&gt; 모델 필드에 이용자 모델로 생성한 인스턴스 객체(&lt;code&gt;request.user&lt;/code&gt;)를 할당하지 않자 &lt;code&gt;photo_photo.user_id&lt;/code&gt;에 NULL을 저장하려 해서 저장하지 못했다는 예외 오류도 접했습니다. 이 중에서 &lt;code&gt;user_id&lt;/code&gt; 정체를 살펴 보겠습니다.&lt;/p&gt;

&lt;h4&gt;(1) ForeignKey 모델 필드&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;ForeignKey&lt;/code&gt;, 그러니까 Many to one 관계는 “One”쪽에 “Many”쪽 데이터 여러 개가 연결되는 구조입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-ManyToOne.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;한 이용자가 여러 게시물을 남기거나, 한 글갈래(category)에 여러 글이 속하는 관계입니다. Django 모델로는 &lt;code&gt;ForeignKey&lt;/code&gt; 모델 필드로 모델 클래스를 지정한 것인데, 이 관계 정보를 데이터베이스엔 어떻게 저장할까요?&lt;/p&gt;

&lt;p&gt;일단 각 모델은 데이터베이스에 Django 앱 이름과 모델 이름을 조합하여 테이블로 만듭니다. &lt;code&gt;photo_photo&lt;/code&gt;는 &lt;code&gt;photo&lt;/code&gt; 앱에 있는 &lt;code&gt;Photo&lt;/code&gt; 모델을 뜻합니다. &lt;code&gt;hello&lt;/code&gt;라는 앱의 &lt;code&gt;Hannal&lt;/code&gt; 모델은 &lt;code&gt;hello_hannal&lt;/code&gt; 테이블을, &lt;code&gt;KayCha&lt;/code&gt; 모델은 &lt;code&gt;hello_kay_cha&lt;/code&gt; 테이블을 만들어 연결합니다. 앞서 발생한 &lt;code&gt;IntegrityError&lt;/code&gt; 예외 오류에서 &lt;code&gt;photo_photo&lt;/code&gt; 정체가 무엇인지 이제 아시겠죠?&lt;/p&gt;

&lt;p&gt;Django의 모델 필드는 데이터베이스의 컬럼(column)이 됩니다. &lt;code&gt;image_file&lt;/code&gt; 모델 필드는 같은 이름을 갖는 테이블 컬럼이 됩니다. 모델 필드형(type)은 테이블 컬럼형을 결정합니다. 그런데 &lt;code&gt;ForeignKey&lt;/code&gt;와 같은 모델 관계 필드는 컬럼 이름이 조금 다릅니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드는 컬럼 이름이 &lt;code&gt;user_id&lt;/code&gt;입니다. &lt;code&gt;user_id&lt;/code&gt; 정체는 &lt;code&gt;user&lt;/code&gt; 모델 필드가 맞습니다. 그런데 &lt;code&gt;user&lt;/code&gt;가 아니라 &lt;code&gt;user_id&lt;/code&gt;인 이유는 무엇일까요? 질문 아니니 대답 안 하셔도 됩니다. :)&lt;/p&gt;

&lt;p&gt;이번 9회 초반에 모델 간 연결은 기본키로 한다고 설명했습니다. Django는 Many쪽이 One쪽을 연결하는 경우, Many쪽 모델 필드 이름에 One쪽의 기본키 이름을 덧붙입니다.&lt;/p&gt;

&lt;p&gt;기본키는 관례에 따라 &lt;code&gt;id&lt;/code&gt;라는 모델 필드가 되며, 모델 필드는 데이터베이스 테이블 컬럼과 이름이 같으므로 테이블 컬럼도 &lt;code&gt;id&lt;/code&gt;입니다. &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드는 이용자 모델을 Many to one으로 가리키는데, 이용자 모델의 기본키인 모델 필드도 &lt;code&gt;id&lt;/code&gt;입니다. &lt;code&gt;Photo&lt;/code&gt; 모델 데이터가 Many쪽이고 이용자 모델이 One쪽이므로, &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드는 이용자 모델 필드의 기본키 모델 필드인 &lt;code&gt;id&lt;/code&gt; 이름을 덧붙여서 &lt;code&gt;user_id&lt;/code&gt;가 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-foreign_key_db_table_schema.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;만약 기본키 모델 필드 이름이 &lt;code&gt;id&lt;/code&gt;가 아니라 &lt;code&gt;uid&lt;/code&gt;라면 &lt;code&gt;_uid&lt;/code&gt;가 덧붙게 됩니다. Django는 이 데이터베이스 컬럼 값을 참조하여 서로 분리된 모델의 데이터 연결 관계를 알아냅니다.&lt;/p&gt;

&lt;h4&gt;(2) 모델 관계를 나중에 맺기 (lazy relation)&lt;/h4&gt;

&lt;p&gt;모델 관계를 맺을 대상 모델 클래스 객체를 직접 전달해도 됩니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.contrib.auth import get_user_model
User = get_user_model()

class Photo(models.Model):
    user = models.ForeignKey(User)
    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;models.ForeignKey(User)&lt;/code&gt;는 &lt;code&gt;ForeignKey&lt;/code&gt; 클래스에 &lt;code&gt;User&lt;/code&gt;라는 객체를 첫 번째 인자로 전달하여 호출(call)하고, 모델 필드의 인스턴스 객체를 반환받아 &lt;code&gt;user&lt;/code&gt;에 할당하는 것입니다. Python은 소스 파일 맨 윗 줄부터 아래로 실행하므로 저 구문을 실행하여 모델 필드를 만드는 시점에 실제로 존재하는 &lt;code&gt;User&lt;/code&gt; 객체를 사용합니다.&lt;/p&gt;

&lt;p&gt;그렇다면 관계 맺을 모델이 있는 경로를 문자열로 담아 인자로 전달하는 경우는 언제일까요? 이용자 모델처럼 상황에 따라 연결할 모델이 바뀌는 경우가 있습니다. 지난 편에서 예를 든 것처럼 이용자 모델이 바꾸면 이 모델을 가져오는(&lt;code&gt;import&lt;/code&gt;) 모든 코드에도 영향이 미칩니다. 그러나 &lt;code&gt;settings.AUTH_USER_MODEL&lt;/code&gt;에 이용자 모델이 있는 위치를 지정하고, &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 내용을 참조하여 &lt;code&gt;get_user_model()&lt;/code&gt; 함수로 이용자 모델을 가져오면 &lt;a href=&quot;http://blog.dahlia.kr/post/103101756957&quot;&gt;한 의도를 한 구현체로 정리&lt;/a&gt;할 수 있지요.&lt;/p&gt;

&lt;p&gt;관계 맺을 대상 모델이 아직 만들어지기 전에 연결하려는 경우에도 문자열로 지정합니다. A 모델이(from) B 모델을(to) 관계를 맺는다면 다음과 같이 B 모델을 먼저 만들고 그 &lt;strong&gt;이후&lt;/strong&gt;에 A 모델을 만들어야 합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class B(models.Model):
    pass

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B 모델은 C 모델을 관계 맺는다면 C 모델을 B 모델에 앞서 만들어야 합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class C(models.Model):
    pass

class B(models.Model):
    c = models.ForeignKey(C)

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런데 C 모델은 A 모델에 관계를 지어야 한다고 가정하겠습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class C(models.Model):
    a = models.ForeignKey(A)

class B(models.Model):
    c = models.ForeignKey(C)

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;문제가 생깁니다. C 모델이 만들어지는 시점에 A라는 객체가 존재하지 않기 때문이죠. A 모델을 C 모델 코드 위로 올리면 안 됩니다. A 모델이 만들어지는 시점에 B 모델이 없기 때문이지요. 이런 경우에, C 모델에서 A 모델을 문자열 인자로 전달하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class C(models.Model):
    a = models.ForeignKey(&amp;#39;A&amp;#39;)

class B(models.Model):
    c = models.ForeignKey(C)

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;문자열로 관계 맺을 대상 모델을 지정하면 관계 맺을 대상 모델이 만들어졌다는 신호가 오기 전까지 관계를 맺지 않은 채 관계 맺는 연산을 지연시켜 놓습니다. 비유가 아니라 정말로 대상 모델 클래스(예 : &lt;code&gt;A&lt;/code&gt; 모델)가 초기화 되면 모델 신호(&lt;code&gt;ModelSignal&lt;/code&gt;)인 &lt;code&gt;class_prepared&lt;/code&gt;를 일으키고(fire), 대상 모델을 바라보던 모델은(예 : &lt;code&gt;C&lt;/code&gt; 모델) 이 신호을 받고선 비로소 실제 관계를 맺습니다.&lt;/p&gt;

&lt;p&gt;이런 연산 특성을 응용하여 관계 맺을 대상 모델로 자기 자신을 지정하는 것도 가능합니다. 순환 관계(recursive relationship)이라고 하는데, 문자열 &lt;code&gt;&amp;#39;self&amp;#39;&lt;/code&gt;을 지정하면 됩니다. 추후에 기회가 닿으면 순환 관계 모델을 만들어 보겠습니다.&lt;/p&gt;

&lt;p&gt;정리하면, 모델 관계 필드는 관계 맺을 대상을 세 가지 형태로 지정합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;관계 지을 모델 클래스 객체를 직접 인자로 전달&lt;/li&gt;
&lt;li&gt;관계 지을 모델 클래스 객체가 있는 경로를 문자열로 전달

&lt;ul&gt;
&lt;li&gt;형식 : &lt;code&gt;Django앱이름.모델이름&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;자기 자신을 가리키는 경우 &lt;code&gt;&amp;#39;self&amp;#39;&lt;/code&gt; 문자열 전달&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;강좌 9편을 마칩니다. 그동안 강좌 연재 소식을 &lt;a href=&quot;https://www.facebook.com/hello.kaycha&quot;&gt;제 페이스북 개인 페이지&lt;/a&gt;, &lt;a href=&quot;https://www.facebook.com/groups/django/&quot;&gt;Django 페이스북 그룹&lt;/a&gt;, 제 페이스북 개인 계정, 제 트위터에서 알려 왔는데요. 10편부터는 제 페이스북 개인 페이지와 트위터에만 알릴 예정입니다. 제 블로그를 구독하지 않고 강좌 연재 소식을 보시려면 제 페이스북 개인 페이지나 트위터를 구독하시길 바랍니다. :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/09-fullsource/pystagram&quot;&gt;9편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 28 Jun 2015 01:20:00 +0900</pubDate>
        <link>http://blog.hannal.com//2015/06/start_with_django_webframework_09/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/06/start_with_django_webframework_09/</guid>
        
        <category>django</category>
        
        <category>model relationship</category>
        
        <category>foreignkey</category>
        
        <category>authentication</category>
        
        <category>many to one relationship</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
      <item>
        <title>8. 로그인, 로그아웃 하기</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막 갱신일시 : 2015년 6월 7일 7시 19분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 편에서는 Django 이용자 인증 체계을 알아보고, 이 인증 체계에서 로그인을 어떻게 처리하는지 살펴 보겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Django 이용자 인증 체계&lt;/h3&gt;

&lt;p&gt;Django 이용자 인증 체계는 크게 두 가지 요소로 구분합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;인증 (Authentication)&lt;/li&gt;
&lt;li&gt;권한 (Authorization)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인증은 “나 누구인데 확인 좀...”이라면 권한은 “나 이거 해도 돼요?”라 보면 됩니다. 누구인지 신원이 확인되지 않은 존재에게 권한을 세밀하게 부여하진 못합니다. 신원이 확인된, 즉, 인증된 이용자인지 아닌지로 구분하는 정도로 권한을 부여합니다. 그래서, 권한 체계를 비롯하여 이용자 인증 체계 자체는 인증(Authetication)을 바탕으로 합니다.&lt;/p&gt;

&lt;h4&gt;(1) Django 내장 인증 기능&lt;/h4&gt;

&lt;p&gt;Django는 이용자 인증 체계를 내장하고 있으며, 우리는 이미 이 기능을 사용해봤습니다. &lt;a href=&quot;http://blog.hannal.com/2014/10/start_with_django_webframework_04/&quot;&gt;4. Photo 모델로 Admin 영역에서 데이터 다루기&lt;/a&gt; 편에서 최고 권한 이용자로 Admin 영역에 로그인하여 사진 게시물을 입력 했었거든요.&lt;/p&gt;

&lt;p&gt;Django에 내장된 인증 체계는 &lt;code&gt;django.contrib.auth&lt;/code&gt;라는 경로(name space)인 Python 패키지에 모여 있으며, Django 개념으로는 Django App입니다. &lt;code&gt;settings.py&lt;/code&gt; 파일에 있는 &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 설정 항목을 보면 &lt;code&gt;&amp;#39;django.contrib.auth&amp;#39;,&lt;/code&gt;가 있는데, 우리가 만드는 Pystagram에 사용할 Django App에 Django 인증 체계가 앱 형태로 기본 내장되어 있는 것입니다.&lt;/p&gt;

&lt;p&gt;Django webframework으로 제품을 만든다면 Django 인증 체계를 사용하는 게 좋습니다. 오랜 기간 개발되어 보안 수준은 성숙하고 안전하며, 확장 가능하게 유연합니다. Django에서 제공하는 다른 여러 기능이 내장된 인증 기능 구조를 따르기 때문에 Django가 제공하는 기능을 유기성 있고 풍부하게 쓰기에도 Django 인증 체계를 쓰는 게 좋습니다.&lt;/p&gt;

&lt;h4&gt;(2) Django 내장 권한 기능&lt;/h4&gt;

&lt;p&gt;권한 검사 기능도 Django에 내장되어 있습니다. 뷰(View) 단위 행동(behaviour), 데이터 단위 행동에 권한을 부여하여 운용 가능하며, 권한을 그룹 단위로 묶어서(grouping) 이용자에게 지정하는 기능도 제공합니다. 자세한 내용은 권한 기능을 적용할 때 다루겠습니다.&lt;/p&gt;

&lt;h3&gt;2. 로그인 기능 구현&lt;/h3&gt;

&lt;h4&gt;(1) URL 패턴 추가&lt;/h4&gt;

&lt;p&gt;Django에서 제공하는 인증 기능을 이용하여 로그인, 로그아웃 기능을 구현 하겠습니다. &lt;code&gt;settings.py&lt;/code&gt; 파일이 있는 시작패키지에서 &lt;code&gt;urls.py&lt;/code&gt; 파일을 열고, 다음 URL 패턴을 &lt;code&gt;urlpatterns&lt;/code&gt;에 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;urlpatterns = patterns(
    &amp;#39;&amp;#39;,
    # 중략
    url(
        r&amp;#39;^accounts/login/&amp;#39;,
        &amp;#39;django.contrib.auth.views.login&amp;#39;,
        name=&amp;#39;login&amp;#39;,
        kwargs={
            &amp;#39;template_name&amp;#39;: &amp;#39;login.html&amp;#39;
        }
    ),
    url(
        r&amp;#39;^accounts/logout/&amp;#39;,
        &amp;#39;django.contrib.auth.views.logout&amp;#39;,
        name=&amp;#39;logout&amp;#39;
    ),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;r&amp;#39;^accounts/login/&amp;#39;&lt;/code&gt;은 로그인 하는 URL이고, 로그인 화면을 출력하거나 로그인 인증 처리를 하는 뷰 함수는 Django에 내장된 &lt;code&gt;login&lt;/code&gt; 뷰 함수를 사용합니다. 이 함수 객체는 &lt;code&gt;django.contrib.auth.views&lt;/code&gt; 모듈에 존재합니다. 이 URL 패턴의 이름을 &lt;code&gt;name&lt;/code&gt; 키워드 인자를 이용하여 &lt;code&gt;login&lt;/code&gt;이라고 지었는데, 이 인자를 사용하지 않아도 무방합니다. &lt;code&gt;kwargs&lt;/code&gt;는 URL 패턴에 연결한 뷰 함수에 추가로 전달할 인자를 사전형(&lt;code&gt;dict&lt;/code&gt;) 객체로 전달합니다. 키가 &lt;code&gt;&amp;#39;template_name&amp;#39;&lt;/code&gt;이고 값이 &lt;code&gt;&amp;#39;login.html&amp;#39;&lt;/code&gt;인 사전형 객체인데, Django에서 제공하는 &lt;code&gt;login&lt;/code&gt; 뷰 함수에 &lt;code&gt;template_name&lt;/code&gt; 이름으로 키워드 인자를 지정하면 로그인 화면을 출력하는 데 사용할 템플릿으로 사용합니다. &lt;code&gt;&amp;#39;login.html&amp;#39;&lt;/code&gt;이라는 문자열을 지정했으니 우리가 &lt;code&gt;settings.py&lt;/code&gt;에서 &lt;code&gt;TEMPLATE_DIRS&lt;/code&gt;에 지정한 템플릿 디렉터리 중 최상위 순위에 있는 &lt;code&gt;login.html&lt;/code&gt; 파일을 찾아서 로그인 화면을 출력하는 데 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;r&amp;#39;^accounts/logout/&amp;#39;&lt;/code&gt;은 로그아웃 하는 URL이며, 로그아웃 기능 역시 로그인 기능과 마찬가지로 Django에 내장된 뷰 함수를 사용합니다.&lt;/p&gt;

&lt;h4&gt;(2) 로그인 템플릿 파일&lt;/h4&gt;

&lt;p&gt;이번엔 로그인 화면에 사용할 &lt;code&gt;login.html&lt;/code&gt; 템플릿 파일을 만듭니다. &lt;code&gt;templates&lt;/code&gt; 디렉터리에 &lt;code&gt;login.html&lt;/code&gt; 파일을 만들고 다음 내용을 담습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% extends &amp;quot;layout.html&amp;quot; %}

{% block content %}

{% if form.errors %}
&amp;lt;p&amp;gt;ID나 비밀번호가 일치하지 않습니다.&amp;lt;/p&amp;gt;
{% endif %}

{% if next %}
    {% if user.is_authenticated %}
    &amp;lt;p&amp;gt;권한이 없는 페이지에 접근하였으니, 권한이 있는 계정으로 로그인하세요.&amp;lt;/p&amp;gt;
    {% else %}
    &amp;lt;p&amp;gt;이 페이지를 보려면 로그인을 해야 합니다.&amp;lt;/p&amp;gt;
    {% endif %}
{% endif %}

&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;{% url &amp;#39;login&amp;#39; %}&amp;quot;&amp;gt;
{% csrf_token %}
&amp;lt;table&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;{{ form.username.label_tag }}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;{{ form.username }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;{{ form.password.label_tag }}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;{{ form.password }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;로그인&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;next&amp;quot; value=&amp;quot;{{ next }}&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Django에서 견본으로 제공하는 &lt;a href=&quot;https://docs.djangoproject.com/en/1.8/topics/auth/default/#django.contrib.auth.views.login&quot;&gt;login.html 템플릿 파일&lt;/a&gt;에서 따와서 약간 고쳤습니다. &lt;code&gt;form.errors&lt;/code&gt;엔 입력한 폼 양식에 문제가 있는 경우에 문제 내용이 담겨 있습니다. ID(&lt;code&gt;username&lt;/code&gt;)나 비밀번호를 입력하지 않거나 형식에 맞지 않는 등 여러 오류 종류가 있겠지만, 간결하게 ID와 비밀번호가 일치하지 않는다고만 안내합니다. 로그인에 대해서는 굳이 친절하게 뭐가 문제인지 자세히 알려줄 필요는 없습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{% if next %}&lt;/code&gt;에서 &lt;code&gt;next&lt;/code&gt;는 로그인을 한 후 이동할 URL을 뜻합니다. 예를 들어, 로그인을 하지 않은 채 사진에 달린 댓글을 삭제하려 하면 로그인하는 URL로 이동하고 로그인을 하고 나면 로그인하기 전에 접근하려는 URL으로 이동하는데, 이동할 URL이 GET이나 POST 방식으로 전달된 Query String 키인 &lt;code&gt;next&lt;/code&gt;에 담깁니다. 대개는 URL이 &lt;code&gt;https://pystagram.com/accounts/login/?next=/redirect_to_here/&lt;/code&gt;와 같이 표현됩니다.&lt;/p&gt;

&lt;p&gt;이동할 곳이 있는데(&lt;code&gt;{% if next %}&lt;/code&gt;) 로그인한 상태에서 로그인 URL에 왔다는 건 무슨 뜻일까요? 현재 로그인한 이용자 인증이나 권한 상태로는 문제가 있으니 다른 계정으로 로그인하라는 의미입니다. 로그인을 하지 않았다면, 로그인을 해야 접근 가능한 페이지이니 로그인을 하라고 안내합니다.&lt;/p&gt;

&lt;p&gt;그외엔 &lt;a href=&quot;http://blog.hannal.com/2015/05/start_with_django_webframework_07/&quot;&gt;7. 사진 게시물 제출하여 게시하기&lt;/a&gt; 편 내용과 비슷합니다. &lt;code&gt;form&lt;/code&gt;은 &lt;code&gt;django.contrib.auth.forms&lt;/code&gt; 모듈에 있는 &lt;code&gt;AuthenticationForm&lt;/code&gt; 폼 클래스로 생성한 인스턴스 객체입니다. 이 폼에 있는 &lt;code&gt;username&lt;/code&gt; 폼 필드와 &lt;code&gt;password&lt;/code&gt; 폼 필드를 사용한 것입니다. &lt;code&gt;username&lt;/code&gt;은 이용자의 실명이나 필명이 아니라 이용자 ID라고 보면 됩니다.&lt;/p&gt;

&lt;p&gt;이제 &lt;code&gt;http://localhost:8000/accounts/login/&lt;/code&gt;에 접속하면 로그인 화면이 나옵니다. 잘못된 &lt;code&gt;username&lt;/code&gt;과 &lt;code&gt;password&lt;/code&gt;을 제출하면 이에 대한 안내도 나오고요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-login_form_01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-login_form_02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;현재 구현한 로그인 기능으로 로그인을 하면 “Page not found” 오류를 만나게 됩니다. 이에 대해서는 곧 처리하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-404_after_login.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;3. 로그인 과정&lt;/h3&gt;

&lt;p&gt;Django가 제공하는 로그인 뷰 함수가 어떤 과정을 거쳐 이용자 인증을 처리하는지 좀 더 살펴 보겠습니다. 이 부분을 몰라도 로그인 기능을 이용하는 데 문제 없습니다.&lt;/p&gt;

&lt;h4&gt;(1) Form 검증&lt;/h4&gt;

&lt;p&gt;웹 페이지에서 폼 양식으로 넘어오는 값은 Form을 이용해 값을 검증합니다. Django는 로그인 절차에 &lt;code&gt;AuthenticationForm&lt;/code&gt; 폼을 사용하며, 이 폼은 &lt;code&gt;django.contrib.auth.forms&lt;/code&gt; 모듈에 있습니다. 이쯤되면 눈치 채셨을텐데, Django는 인증 관련 모델, 폼, 뷰, 미들웨어 등을 &lt;code&gt;django.contrib.auth&lt;/code&gt; 패키지 안에 담아 놨습니다. 인증과 관련된 소스 코드를 보려면 이 패키지를 살펴 보시면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AuthenticationForm&lt;/code&gt; 폼은 현재 이용자 정보와 HTTP 요청 정보를 담은 &lt;code&gt;request&lt;/code&gt; 객체도 함께 인자로 전달 받는데, 세션 처리에 필요하기 때문에 그렇습니다. 폼 양식 값이 유효하면(&lt;code&gt;is_valid()&lt;/code&gt;) 이용자가 로그인 후에 이동할 URL 문자열이 안전한 지 검사합니다. 그런 뒤 &lt;code&gt;auth_login()&lt;/code&gt; 함수를 이용해 로그인 인증 처리를 마무리하고 나서 이용자를 다음 URL로 이동(redirect) 시킵니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auth_login()&lt;/code&gt; 함수는 이름과는 달리 실제로는 인증 과정 마무리 단계를 담당합니다. 로그인 양식을 토대로 이용자 정보를 가져와서 HTTP Request(&lt;code&gt;request&lt;/code&gt;) 정보와 함께 사용해 서버 세션 정보를 만듭니다. 세션 정보를 만들지 않으면 로그인 정보는 유지되지 않아서 다른 페이지에 방문할 때마다 매번 로그인을 해야 합니다.&lt;/p&gt;

&lt;p&gt;로그인 양식, 그러니까 로그인 하려고 제출한 &lt;code&gt;username&lt;/code&gt;과 &lt;code&gt;password&lt;/code&gt;에 정확히 일치하는 이용자를 찾는 과정은 &lt;code&gt;AuthenticationForm&lt;/code&gt; 폼에서 이뤄집니다. 이 폼의 &lt;code&gt;clean()&lt;/code&gt; 메서드에서 &lt;code&gt;username&lt;/code&gt;과 &lt;code&gt;password&lt;/code&gt; 내용을 토대로 &lt;code&gt;authenticate()&lt;/code&gt; 함수를 이용해 인증을 시도합니다. 일치하는 이용자가 없으면 Form 오류를 일으키고, 우리는 “ID나 비밀번호가 일치하지 않습니다.”라는 안내를 화면에서 만납니다. 일치하는 이용자가 있으면 이 이용자 계정이 활성화 된 상태인지(&lt;code&gt;is_active&lt;/code&gt;) 검사하는 걸로 폼 안에서 처리하는 인증 과정을 마칩니다.&lt;/p&gt;

&lt;h4&gt;(2) 인증 체계 기반으로 처리&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;authenticate()&lt;/code&gt; 함수는 &lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 항목에 등록된 인증 체계 기반 클래스를 하나씩 가져와서 &lt;code&gt;authenticate()&lt;/code&gt; 메서드를 호출하여 인증을 시도합니다. 우리가 &lt;code&gt;settings.py&lt;/code&gt; 파일에 따로 이 항목을 설정하지 않아도 문제가 없는 건, Django에 기본으로 내장된 &lt;code&gt;global_settings.py&lt;/code&gt;에 이 항목이 설정되어 있기 때문입니다. 이 항목에 있는 내용은 &lt;code&gt;&amp;#39;django.contrib.auth.backends.ModelBackend&amp;#39;&lt;/code&gt; 이름영역인 클래스가 튜플 객체로 담겨 있습니다.&lt;/p&gt;

&lt;p&gt;데이터베이스에서 &lt;code&gt;username&lt;/code&gt;와 &lt;code&gt;password&lt;/code&gt;로 이용자를 찾는 과정이 비로소 이 단계에서 이뤄집니다. 이용자 모델을 가져오고, 이 모델을 이용해 &lt;code&gt;username&lt;/code&gt;으로 먼저 이용자 데이터를 가져오고, 이 이용자 데이터에 저장된 비밀번호와 이용자가 로그인하며 제출한 &lt;code&gt;password&lt;/code&gt;를 비교합니다. 비밀번호까지 일치하면 해당 이용자 데이터, 그러니까 이용자 모델로 생성한 인스턴스 객체를 반환하고, 그렇지 않으면 &lt;code&gt;None&lt;/code&gt;을 반환합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 항목에 &lt;code&gt;django.contrib.auth.backends.ModelBackend&lt;/code&gt;이 튜플에 담겨져 있다는 말은 다음 두 가지를 의미합니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Django 인증 체계 기반(backend)을 꼭 사용하지 않아도 된다.&lt;/li&gt;
&lt;li&gt;인증 체계 기반을 여러 개 이상을 사용하는 게 가능하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;인증 체계 기반의 클래스 규칙대로 인터페이스를 만들기만 한다면 우리가 직접 만든 인증 체계를 사용하거나 Facebook, Twitter처럼 인증 API를 제공하는 서비스나 플랫폼을 기반으로 인증 체계를 운용해도 됩니다.&lt;/p&gt;

&lt;h4&gt;(3) 이용자 모델 가져오기&lt;/h4&gt;

&lt;p&gt;인증 체계 기반을 Django에서 제공하는 기본 인증 &lt;code&gt;ModelBackend&lt;/code&gt;를 다른 것으로 갈아끼우거나 추가한다면, 이용자 정보를 데이터베이스에서 다루는 이용자 모델도 대체하여 쓸 수 있습니다. Django에 내장된 이용자 모델은 &lt;code&gt;django.contrib.auth.models&lt;/code&gt;에 &lt;code&gt;User&lt;/code&gt; 모델 클래스입니다. 이 이용자 모델엔 모델 필드이 간결하게 담겨 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; : 이용자 ID 역할. 다른 값과 중복되지 않는 고유한 값만 허용합니다(&lt;code&gt;unique=True&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt; : 비밀번호. &lt;code&gt;PasswordField&lt;/code&gt; 모델 필드.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first_name&lt;/code&gt; : 성씨. &lt;code&gt;CharField&lt;/code&gt; 모델 필드이며 생략 가능.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_name&lt;/code&gt; : 이름. &lt;code&gt;CharField&lt;/code&gt; 모델 필드이며 생략 가능.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;email&lt;/code&gt; : 전자우편 주소. &lt;code&gt;EmailField&lt;/code&gt; 모델 필드.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_staff&lt;/code&gt; : 관리자 여부. &lt;code&gt;BooleanField&lt;/code&gt; 모델 필드.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_active&lt;/code&gt; : 활성화 된 계정인지 여부. &lt;code&gt;BooleanField&lt;/code&gt; 모델 필드.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이외에도 &lt;code&gt;is_superuser&lt;/code&gt;나 &lt;code&gt;groups&lt;/code&gt; 같은 모델 필드 몇 가지가 더 있지만, 이 모델 필드의 값을 직접 다룰 일은 드물고, 이 강좌 내용을 이해하시면 이런 모델 필드를 직접 찾아 다루는 건 어렵지 않으므로 이 강좌에선 다루지 않겠습니다.&lt;/p&gt;

&lt;p&gt;만약, 필명이나 사용하는 언어, 거주 지역처럼 정보를 추가로 이용자로부터 입력 받아 관리하려면 이용자 모델 클래스를 &lt;strong&gt;확장&lt;/strong&gt;해야 합니다. Django에서 제공하는 이용자 모델을 변경해도 되지만, Django 소스 파일을 직접 고쳐서 쓰지 않는 게 좋습니다. Django 판을 올릴 때마다 직접 수정한 부분을 매번 챙겨야 하고, 연계되어 동작하는 다른 기능에 부작용을 일으킬 여지도 있습니다. 그래서 변경하지 않고 &lt;strong&gt;확장&lt;/strong&gt;해야 합니다.&lt;/p&gt;

&lt;p&gt;확장하는 자세한 방법은 다른 편에서 따로 다루기로 하고&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, 여기에선 확장 방법 종류만 간단히 언급하겠습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;따로 이용자 모델을 만들고, Django의 이용자 모델에 연결(Model relationship).&lt;/li&gt;
&lt;li&gt;이용자 모델과 모델 매니저, 이용자 폼 등을 모두 구현하여 이용자 모델 부분을 대체.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2번 방법에서 “모델 부분을 대체”한다는 표현을 눈 여겨 보세요. 일일이 Django 소스에서 이용자 모델 관련 부분, 가령, &lt;code&gt;django.contrib.auth.models.User&lt;/code&gt;를 &lt;code&gt;pystagram_auth.models.User&lt;/code&gt;와 같이 교체하는 건 아닙니다. &lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 항목에 지정하기만 하면 됩니다.&lt;/p&gt;

&lt;p&gt;이 항목 역시 우리가 따로 설정한 적이 없는데, Django의 &lt;code&gt;global_settings&lt;/code&gt;에 설정되어 있으며, 기본 값으로 &lt;code&gt;&amp;#39;auth.User&amp;#39;&lt;/code&gt; 문자열이 할당되어 있습니다. &lt;code&gt;auth&lt;/code&gt;는 Django 앱 이름(Python 패키지)이고, &lt;code&gt;User&lt;/code&gt;는 모델 클래스 이름입니다. Python 이름영역(name space)으로 풀어 쓰면 &lt;code&gt;auth.models.User&lt;/code&gt;인 셈입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 설정 항목을 참조하여 이용자 모델을 실제로 가져오는 역할은 &lt;code&gt;get_user_model()&lt;/code&gt; 함수가 맡으며, &lt;code&gt;django.contrib.auth&lt;/code&gt;에 있습니다. 이 함수를 이용하면 이용자 모델이 어떤 것으로 바뀌든 코드를 일관되게 유지하게 됩니다. &lt;code&gt;AUTH_USER_MODEL = &amp;#39;auth.User&amp;#39;&lt;/code&gt;라고 설정하고 &lt;code&gt;get_user_model()&lt;/code&gt; 함수를 실행하면 &lt;code&gt;auth.models.User&lt;/code&gt;를 반환하고, &lt;code&gt;AUTH_USER_MODEL = &amp;#39;pystagram_auth.MyUser&amp;#39;&lt;/code&gt;로 설정하고 실행하면 &lt;code&gt;pystagram_auth.models.MyUser&lt;/code&gt;를 이용자 모델로 반환합니다. 그러므로 &lt;code&gt;get_user_model()&lt;/code&gt; 함수로 이용자 모델을 가져오는 게 좋습니다.&lt;/p&gt;

&lt;p&gt;인증 체계 기반(backend)과는 달리 기본 이용자 모델은 하나만 가능합니다.&lt;/p&gt;

&lt;h4&gt;(4) 정리하면&lt;/h4&gt;

&lt;p&gt;로그인 과정을 정리하면 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django.contrib.auth.views.login&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django.contrib.auth.forms.AuthenticationForm&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django.contrib.auth.authenticate()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;settings.AUTHENTICATION_BACKENDS&lt;/code&gt;에서 인증 기반 하나씩 가져옴&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django.contrib.auth.backends.ModelBackend&lt;/code&gt;의 &lt;code&gt;authenticate()&lt;/code&gt; 메서드로 인증 처리&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django.contrib.auth.auth_login&lt;/code&gt; (정확히는 &lt;code&gt;django.contrib.auth.login&lt;/code&gt;를 &lt;code&gt;auth_login&lt;/code&gt;으로 import 한 것.)으로 인증 관련 세션 처리&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;로그인 이후 이동할 URL로 이동 처리(redirect)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;4. 로그인 관련 설정 항목&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt;에 설정하는 로그인 관련 항목이 몇 가지 있습니다.&lt;/p&gt;

&lt;h4&gt;(1) &lt;code&gt;LOGIN_URL&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;LOGIN_URL&lt;/code&gt;은 로그인 URL을 뜻합니다. Django에서 제공하는 장식자(decorator) 중 &lt;code&gt;login_required&lt;/code&gt;는 뷰 함수에 접근할 때 로그인 여부를 검사하고, 로그인하지 않으면 로그인 URL로 이용자를 이동시키는데, 이 로그인 URL을 &lt;code&gt;settings.LOGIN_URL&lt;/code&gt;에서 가져 옵니다. &lt;code&gt;global_settings&lt;/code&gt;에 설정된 기본값은 &lt;code&gt;/accounts/login/&lt;/code&gt;입니다.&lt;/p&gt;

&lt;h4&gt;(2) &lt;code&gt;LOGOUT_URL&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;LOGIN_URL&lt;/code&gt;과 같은 역할을 합니다. 기본값은 &lt;code&gt;/accounts/logout/&lt;/code&gt;입니다.&lt;/p&gt;

&lt;h4&gt;(3) &lt;code&gt;LOGIN_REDIRECT_URL&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;로그인을 하고 나서 이동할 URL을 설정합니다. 로그인 하고나서 이동할 URL이 지정된 경우 그 URL로 이동하지만, 이동할 URL이 지정되지 않았거나 지정한 URL이 보안상 문제가 있는 경우 &lt;code&gt;settings.LOGIN_REDIRECT_URL&lt;/code&gt;를 사용합니다.&lt;/p&gt;

&lt;p&gt;현재 구현한 기능으로는 로그인을 마치면 “Page not found” 오류를 만납니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-404_after_login.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;웹 브라우저 주소입력란을 잘 보면 &lt;code&gt;http://localhost:8000/accounts/profile/&lt;/code&gt;과 같이 전혀 본 적 없는 URL로 되어 있습니다. 이는 Django 기본 &lt;code&gt;LOGIN_REDIRECT_URL&lt;/code&gt; 설정값이 &lt;code&gt;/accounts/profile/&lt;/code&gt;이라서 그렇습니다. 아직 우리는 프로필 페이지를 만들지 않았으니 임시로 &lt;code&gt;/photo/upload/&lt;/code&gt;로 이동하도록 설정하겠습니다. 시작패키지에서 &lt;code&gt;settings.py&lt;/code&gt; 파일을 열고 다음 코드를 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LOGIN_REDIRECT_URL = &amp;#39;/photo/upload/&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 로그인을 마치면 &lt;code&gt;/photo/upload/&lt;/code&gt;로 이동하여 사진을 올리라는 압박을 줍니다.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;강좌 8편을 마칩니다. 아직은 Django 1.7판을 기준으로 강좌를 진행하고 있는데, 조만간 1.8판을 기준으로 내용을 다듬어야 겠습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/08-fullsource/pystagram&quot;&gt;8편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;다른 편에서 다루겠다는 내용이 늘어가니 불안해지네요. 까먹고 다루지 않을까봐요.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 07 Jun 2015 02:45:00 +0900</pubDate>
        <link>http://blog.hannal.com//2015/06/start_with_django_webframework_08/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/06/start_with_django_webframework_08/</guid>
        
        <category>django</category>
        
        <category>login</category>
        
        <category>logout</category>
        
        <category>authentication</category>
        
        <category>user model</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
      <item>
        <title>7. 사진 게시물 제출하여 게시하기</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막 갱신일시 : 2015년 6월 11일 4시 25분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그동안 우리는 사진 게시물을 Django Admin에서 게시했습니다. 이번엔 사진 게시물을 게시하는 기능을 구현하겠습니다. Django Form을 이용할 것인데, 이번 편에서는 왜 Django Form을 쓰면 좋고, 어떻게 동작하는 지 흐름을 이해하는 내용을 다루겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Django Form&lt;/h3&gt;

&lt;p&gt;Django Form은 Django의 주요 매력 요소 중 하나라 생각합니다. &lt;a href=&quot;http://blog.hannal.com/2014/9/start_with_django_webframework_03/&quot;&gt;Django는 MTV 패턴을 따른다&lt;/a&gt;고 하는데, Django Model과 Form을 활용하면 반복되는 처리를 Django가 대신 하고 이용자는 데이터(model)와 표현물(template)에 집중하게 됩니다.&lt;/p&gt;

&lt;p&gt;Form은 이름에서 드러나듯이 입력 양식(form)을 다루는 기능입니다. “입력 양식”이란 Django가 웹 프레임워크이니 웹 입력 양식을 뜻합니다. Django Form은 HTML로 만든 웹 화면의 form 태그에서 서버로 전달된 항목이 유효한 지 검증(validation)할 뿐만 아니라 웹 입력 항목에 필요한 HTML 태그를 생성해 출력합니다. 유효하지 않은 항목이 있으면 어떻게 유효하지 않은 지 안내말을 출력하기도 합니다.&lt;/p&gt;

&lt;p&gt;유효성은 꼼꼼하게 검사(validation)해야 합니다. 보안 측면에서 클라이언트(서비스 이용자)가 서버로 보내오는 데이터는 그다지 신뢰해서는 안 됩니다. 우리 서비스를 위태롭게 할 코드가 숨겨져 있을지도 모릅니다. 운영 측면에서도 이용자가 system이나 admin과 같이 운영자를 사칭하는 계정 이름을 짓거나 화면을 망가뜨리거나 다른 이용자의 권한을 가로채는 서비스 앞단(front-end)용 코드를 심을지도 모릅니다.&lt;/p&gt;

&lt;p&gt;보안성을 높이려면 마냥 뚫고 들어오지 못 하게 폐쇄하기만 할 게 아니라 개방할 필요도 있습니다. 개발자 또는 개발팀이 아무리 뛰어난 능력을 가졌어도 갈수록 증가하는 소프트웨어 복잡성에서 발생하는 수많은 경우와 상황에 대응하는 건 불가능합니다. 또한 서비스에 구현된 모든 기능을 완전히 직접 구현하여 제공하는 것이 아닌 이상 우리가 만드는 소프트웨어는 다른 소프트웨어나 도구와 연결되는데, &lt;a href=&quot;http://blog.dahlia.kr/post/82482810330&quot;&gt;우리가 만든 소프트웨어의 바깥 환경이 변하면서 우리가 만든 소프트웨어도 녹슬어&lt;/a&gt; 끊임없이 새로운 문제에 부딪히게 됩니다. 이 문제는 폐쇄하여 감출 게 아니라 오히려 개방하여 더 드러내서 많은 사람이 문제를 발견하는 게 낫습니다. Django는 오픈소스 프로젝트이며, 많은 개발자가 참여하고 기여하고 사용합니다. Django처럼 애용되고 활성화 된 오픈소스 프로젝트는 사람이 유발하는 보안 구멍을 주시하는 눈이 많아서 우리가 직접 구현하는 것보다 더 신뢰할 만하다고 생각합니다. 우리의 능력이 뛰어나든 그렇지 않든 말이지요.&lt;/p&gt;

&lt;p&gt;운영 측면에서 대응해야 할 대응은 반복되는 처리가 많습니다. 예를 들어, 숫자만 입력받을 항목에 숫자 외 다른 글자가 입력되었는지 검사하고 들어 있으면 예외 처리하거나 첨부한 이미지 파일이 제대로 된 파일인지 검사하는 처리는 항목 개수만큼이나 반복되는 과정입니다. 이를 일일이 코드로 검사한다면 실수할 가능성이 큽니다. 일관성과 관리 차원에서 그러한 역할을 하는 검사기(validator)를 만들어 처리하는 게 좋습니다.&lt;/p&gt;

&lt;p&gt;이렇게 클라이언트로부터 전송받은 데이터가 유효한지 검사하고 걸러내는 역할을 Django Form가 합니다. Django Form을 사용하면 상당히 다양한 입력 형식에 대해 수 년에 걸쳐 쌓인 경험으로 유효성을 검사합니다. 가령, Django Form의 &lt;code&gt;EmailField&lt;/code&gt; 폼 필드를 사용하면, 다국어나 &lt;code&gt;.wiki&lt;/code&gt;나 &lt;code&gt;.google&lt;/code&gt;과 같은 새로운 최상위 도메인(Top-level domain), 심지어 IPv4나 IPv6와 같이 IP주소로 구성된 전자우편 주소에 대응 가능합니다.&lt;/p&gt;

&lt;p&gt;물론 어디까지나 유효성을 검사하는 것이므로 제가 앞서 언급한 보안성에 대해 무결하지는 않습니다. 예를 들어, Django Form의 &lt;code&gt;ImageField&lt;/code&gt; 폼 필드는 클라이언트가 제출한 파일이 &lt;a href=&quot;https://github.com/django/django/blob/1.8.1/django/forms/fields.py#L691&quot;&gt;이미지 파일로 유효한지 확인하는 방법을 Image Library인 PIL이나 Pillow의 &lt;code&gt;verify()&lt;/code&gt;에 의존&lt;/a&gt;합니다. &lt;code&gt;verify()&lt;/code&gt; 메서드는 파일의 헤더 영역을 읽어 들여서 유효한 파일인지 검사할 뿐입니다. 그 마저도 일부 파일에 대해서만 제공하여, &lt;a href=&quot;https://github.com/python-pillow/Pillow/blob/master/PIL/GifImagePlugin.py&quot;&gt;GIF 파일&lt;/a&gt;을 처리하는 모듈엔 &lt;code&gt;verify()&lt;/code&gt;가 아예 없습니다. GIF, PNG, Jpeg과 같은 이미지 파일은 일반 문자열을 담는 Metadata 영역(chunk)을 지원하는데, 이 요소를 악용하여 보안을 위협하는 코드를 삽입하여 서버나 클라이언트(방문자)에게 해를 끼칠 가능성이 있습니다&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;하지만, 이는 Django Form이 보안에 초점을 맞춘 기능은 아니니 보안 대응용으로 Django Form에 의존하지 않아야 한다는 의미이며, 입력 항목이 유효한 지에 대한 필수 검사 요소는 갖추고 있으므로 Django Form을 가장 기본으로 사용하고 보안에 필요한 조치를 추가하는 것이 나을 것입니다.&lt;/p&gt;

&lt;h4&gt;Form과 ModelForm&lt;/h4&gt;

&lt;p&gt;Django Form은 &lt;code&gt;django.forms&lt;/code&gt; 모듈에서 &lt;code&gt;Form&lt;/code&gt;과 &lt;code&gt;ModelForm&lt;/code&gt; 클래스로 제공됩니다. &lt;code&gt;Form&lt;/code&gt;은 앞서 설명한 내용을 그대로 담고 있는 클래스입니다. &lt;code&gt;ModelForm&lt;/code&gt;은 Django Model과 연계한 Form 클래스입니다. Django Model을 사용한다면 &lt;code&gt;ModelForm&lt;/code&gt;을 이용하여 입력 양식과 입력 항목 검증, 그리고 검증된 입력 데이터를 데이터베이스에 저장하는 과정을 편하게 처리합니다.&lt;/p&gt;

&lt;p&gt;자세한 건 코드로 구현하면서 다루겠습니다.&lt;/p&gt;

&lt;h3&gt;2. 사진 게시물을 Form을 이용하여 게시하기&lt;/h3&gt;

&lt;h4&gt;Form 만들기&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;photo&lt;/code&gt; 디렉터리에 &lt;code&gt;forms.py&lt;/code&gt; 파일을 만듭니다. 앞으로 &lt;code&gt;photo&lt;/code&gt; 앱에서 사용하는 Form은 이 모듈에 만듭니다. 이제 사진 게시물을 편집하는(생성하거나 수정) 폼을 &lt;code&gt;PhotoEditForm&lt;/code&gt;이라는 이름으로 만듭니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# coding: utf-8

from __future__ import unicode_literals

from django import forms

from photo.models import Photo


class PhotoEditForm(forms.ModelForm):
    class Meta:
        model = Photo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아주 간결한 코드입니다. &lt;code&gt;forms&lt;/code&gt; 모듈에 있는 &lt;code&gt;ModelForm&lt;/code&gt; 클래스를 상속받는 &lt;code&gt;PhotoEditForm&lt;/code&gt; 클래스를 만들면 이 클래스는 Form 클래스입니다. &lt;code&gt;ModelForm&lt;/code&gt;이므로 클래스 안에 &lt;code&gt;Meta&lt;/code&gt; 클래스를 또 만들고, 그 안에 &lt;code&gt;model = Photo&lt;/code&gt;라는 코드로 이 Model form에 연계하는 Model을 &lt;code&gt;Photo&lt;/code&gt;로 지정한 것입니다. 이 &lt;code&gt;Photo&lt;/code&gt; 모델 클래스는 &lt;code&gt;photo&lt;/code&gt; 앱 디렉터리의 &lt;code&gt;models.py&lt;/code&gt; 모듈에 있으니 &lt;code&gt;from photo.models import Photo&lt;/code&gt;로 읽어 들인 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ModelForm&lt;/code&gt;은 Form에 연결한 Model의 모델 필드를 기반으로 폼 필드를 만듭니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Photo(models.Model):
    image_file = models.ImageField(upload_to=&amp;#39;%Y/%m/%d&amp;#39;)
    filtered_image_file = models.ImageField(upload_to=&amp;#39;static_files/uploaded/%Y/%m/%d&amp;#39;)
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델이 이와 같은 모델 필드로 구성되어 있으니 &lt;code&gt;PhotoEditForm&lt;/code&gt;을 일반 &lt;code&gt;Form&lt;/code&gt; 클래스를 상속받아 만든다면 다음과 같이 만드는 셈입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class PhotoEditForm(forms.Form):
    image_file = forms.ImageField()
    filtered_image_file = forms.ImageField()
    description = forms.CharField(
        max_length=500,
        required=False,
        widget=forms.Textarea
    )
    created_at = forms.DateTimeField(required=False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Model과 비슷하게 생겼습니다. 웹페이지에 사용할 HTML도 거의 비슷합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-new_photo_modelform.png&quot; alt=&quot;ModelForm으로 만든 PhotoEditForm&quot;&gt;&lt;/p&gt;

&lt;p&gt;앞 화면은 &lt;code&gt;ModelForm&lt;/code&gt;으로 만든 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼이 만든 HTML 화면이고, 다음 화면은 &lt;code&gt;Form&lt;/code&gt;으로 만든 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼이 만든 HTML 화면입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-new_photo_form.png&quot; alt=&quot;Form으로 만든 PhotoEditForm&quot;&gt;&lt;/p&gt;

&lt;p&gt;거의 동일하지요?&lt;/p&gt;

&lt;p&gt;Model은 데이터베이스와 연관되어 있어서 모델 필드형(type)이 데이터베이스의 컬럼(column)형(type)에 맞추어져 있고, Form은 웹 입력 양식인 form 관련 태그의 종류에 맞추어져 소소한 차이가 있지만, 결국 웹에서 넘겨받은 데이터를 데이터베이스에 넣는 것이라 서로 비슷한 인터페이스를 갖습니다. &lt;code&gt;ModelForm&lt;/code&gt;을 쓰면 모델 필드와 폼 필드 간 차이 마저도 별로 의식하지 않습니다. 그래서 Model을 잘 만들고 &lt;code&gt;ModelForm&lt;/code&gt;을 이용하여 Model form을 만들면 우리는 데이터 유효성을 검사하고 이를 데이터베이스에 넣거나 찾아 쓰는 데이터 관리와 처리를 날로 먹게 됩니다.&lt;/p&gt;

&lt;h4&gt;사진 게시물 작성 화면 만들기&lt;/h4&gt;

&lt;p&gt;사진 게시물을 게시하려면 사진 파일을 선택하고, 사진을 설명하는 본문 등 사진 게시물에 필요한 사항을 입력해야 합니다. 본 강좌 중 &lt;a href=&quot;http://blog.hannal.com/2014/8/start_with_django_webframework_01/&quot;&gt;Pystagram 기획&lt;/a&gt;편에서 사진 게시물을 작성하고 게시하는 URL을 &lt;code&gt;/photo/upload/&lt;/code&gt;로 하기로 했으니 &lt;code&gt;urls.py&lt;/code&gt;에 이 주소 패턴을 등록합니다. 시작 패키지(&lt;code&gt;settings.py&lt;/code&gt; 파일이 있는 디렉터리)에 있는 &lt;code&gt;urls.py&lt;/code&gt; 파일을 열고 다음 URL 패턴을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;url(r&amp;#39;^photo/upload/$&amp;#39;, &amp;#39;photo.views.new_photo&amp;#39;, name=&amp;#39;new_photo&amp;#39;),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 내용을 반영하면 다음과 같은 코드가 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;urlpatterns = patterns(
    &amp;#39;&amp;#39;,
    url(
        r&amp;#39;^photo/(?P&amp;lt;photo_id&amp;gt;\d+)/$&amp;#39;,
        &amp;#39;photo.views.single_photo&amp;#39;,
        name=&amp;#39;view_single_photo&amp;#39;
    ),
    url(r&amp;#39;^photo/upload/$&amp;#39;, &amp;#39;photo.views.new_photo&amp;#39;, name=&amp;#39;new_photo&amp;#39;),
    url(r&amp;#39;^admin/&amp;#39;, include(admin.site.urls)),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;/photo/upload/&lt;/code&gt; URL에 &lt;code&gt;photo.views.new_photo&lt;/code&gt;을 연결(mapping)한 것입니다. &lt;code&gt;photo&lt;/code&gt; 앱의 &lt;code&gt;views&lt;/code&gt; 모듈에 있는 &lt;code&gt;new_photo&lt;/code&gt;라는 객체를 가리키는 이름영역(namespace)입니다. 간단히 말해서, &lt;code&gt;photo&lt;/code&gt; 앱 디렉터리에 있는 &lt;code&gt;views.py&lt;/code&gt; 파일에 있는 &lt;code&gt;new_photo&lt;/code&gt;라는 실행 가능한(callable) 객체를 연결한 것이며, 이 &lt;code&gt;new_photo&lt;/code&gt;는 뷰 함수(View function)입니다.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code&gt;views.py&lt;/code&gt; 파일에 &lt;code&gt;new_photo&lt;/code&gt; 뷰 함수를 만듭니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from photo.forms import PhotoEditForm

def new_photo(request):
    edit_form = PhotoEditForm()

    return render(
        request,
        &amp;#39;new_photo.html&amp;#39;,
        {
            &amp;#39;form&amp;#39;: edit_form,
        }
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;new_photo.html&lt;/code&gt; 템플릿 파일에 템플릿 맥락 요소(Context)로 앞서 만든 &lt;code&gt;PhotoEditForm&lt;/code&gt; 클래스 객체를 전달하는데, 폼 클래스 자체가 아니라 폼 클래스를 인스턴스 객체로 생성하여 &lt;code&gt;edit_form&lt;/code&gt;에 할당하고, 이 &lt;code&gt;edit_form&lt;/code&gt;을 전달합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;render()&lt;/code&gt; 함수는 &lt;a href=&quot;http://blog.hannal.com/2014/11/start_with_django_webframework_05/&quot;&gt;5. url에 view 함수 연결해서 사진 출력하기&lt;/a&gt; 편에서 역할을 설명했고, 이번 편에서 처음 사용합니다. 이 함수는 대개 세 가지 인자를 필요로 합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;request&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;템플릿 파일 이름&lt;/li&gt;
&lt;li&gt;사전형 객체로 전달되는 템플릿 맥락 요소(context)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;request&lt;/code&gt; 객체는 뷰 함수에 첫 번째 인자로 전달되는 객체입니다. &lt;a href=&quot;https://docs.djangoproject.com/en/1.8/ref/request-response/#httprequest-objects&quot;&gt;HTTP Request&lt;/a&gt;를 뜻합니다. 뷰 함수는 언제나 첫 번째 인자로 &lt;code&gt;request&lt;/code&gt; 객체를 전달 받는데, 이 객체를 &lt;code&gt;render()&lt;/code&gt; 함수의 첫 번째 인자로 전달합니다. 템플릿에서 템플릿 맥락 요소로 &lt;code&gt;request&lt;/code&gt; 객체를 지정하는(mapping) 데 사용됩니다. 두 번째 인자는 템플릿 파일 경로를 문자열로 지정하며, 이 인자 역시 필수 인자입니다. 마지막으로, 세 번째 인자는 템플릿 파일 안에서 사용할 템플릿 맥락 요소를 사전형(&lt;code&gt;dict&lt;/code&gt;) 객체로 전달합니다. &lt;code&gt;{&amp;#39;form&amp;#39;: edit_form}&lt;/code&gt;에서 &lt;code&gt;Key&lt;/code&gt;인 &lt;code&gt;&amp;#39;form&amp;#39;&lt;/code&gt;은 템플릿 파일 안에서 &lt;code&gt;form&lt;/code&gt;이라는 이름으로 사용하는 템플릿 변수가 되고, &lt;code&gt;Value&lt;/code&gt;인 &lt;code&gt;edit_form&lt;/code&gt;(&lt;code&gt;PhotoEditForm()&lt;/code&gt;의 인스턴스 객체)가 이 템플릿 변수에 연결된(mapped) 객체인 셈이지요.&lt;/p&gt;

&lt;p&gt;이번엔 템플릿 파일인 &lt;code&gt;new_photo.html&lt;/code&gt;을 만듭니다. &lt;code&gt;photo&lt;/code&gt; 디렉터리에 &lt;code&gt;templates&lt;/code&gt; 디렉터리를 만들고, 그 안에 &lt;code&gt;new_photo.html&lt;/code&gt; 파일을 만들어 다음 내용을 담습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% extends &amp;#39;layout.html&amp;#39; %}

{% block content %}
&amp;lt;form
    method=&amp;quot;POST&amp;quot;

    action=&amp;quot;{% url &amp;#39;new_photo&amp;#39; %}&amp;quot;

    enctype=&amp;quot;multipart/form-data&amp;quot;
&amp;gt;
    {% csrf_token %}
    {{form.as_p}}

    &amp;lt;p&amp;gt;
        &amp;lt;input type=&amp;quot;submit&amp;quot; /&amp;gt;
    &amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Django Template은 추후 연재에서 자세히 다루겠습니다. 이 &lt;code&gt;new_photo.html&lt;/code&gt;는 뷰 함수에서 지정한 템플릿 파일이니 이후엔 &lt;strong&gt;뷰 템플릿 파일&lt;/strong&gt;이라 부르겠습니다. 템플릿 내용 중 눈여겨 볼 점은 &lt;code&gt;{{form.as_p}}&lt;/code&gt; 코드입니다. &lt;code&gt;form&lt;/code&gt;은 &lt;code&gt;new_photo&lt;/code&gt; 뷰 함수가 &lt;code&gt;edit_form&lt;/code&gt; 폼 객체를 &lt;code&gt;form&lt;/code&gt;이라는 템플릿 변수로 지정해 전달한 것입니다. 이 객체의 인스턴스 메서드인 &lt;code&gt;as_p()&lt;/code&gt;를 호출하면 각 폼 필드를 HTML 태그인 &lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;(paragraph, 문단 태그)로 감싸서 출력합니다. 실제로 출력되는 HTML 코드는 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;label for=&amp;quot;id_image_file&amp;quot;&amp;gt;Image file:&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;id_image_file&amp;quot; name=&amp;quot;image_file&amp;quot; type=&amp;quot;file&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;label for=&amp;quot;id_filtered_image_file&amp;quot;&amp;gt;Filtered image file:&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;id_filtered_image_file&amp;quot; name=&amp;quot;filtered_image_file&amp;quot; type=&amp;quot;file&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;label for=&amp;quot;id_description&amp;quot;&amp;gt;Description:&amp;lt;/label&amp;gt; &amp;lt;textarea cols=&amp;quot;40&amp;quot; id=&amp;quot;id_description&amp;quot; maxlength=&amp;quot;500&amp;quot; name=&amp;quot;description&amp;quot; rows=&amp;quot;10&amp;quot;&amp;gt;
&amp;lt;/textarea&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델에 있는 모델 필드 네 개 중 세 개가 HTML form 입력항목 태그로 표현 되었습니다. &lt;code&gt;created_at&lt;/code&gt;은 없는데, 날짜나 시간 관련 모델 필드(&lt;code&gt;DateTimeField&lt;/code&gt;, &lt;code&gt;DateField&lt;/code&gt;, &lt;code&gt;TimeField&lt;/code&gt;)에 &lt;code&gt;auto_now_add&lt;/code&gt;나 &lt;code&gt;auto_now&lt;/code&gt; 필드 옵션 중 하나라도 &lt;code&gt;True&lt;/code&gt;로 지정되면 Model form으로 폼 필드를 만들 때 기본 입력 항목으로 지정되지 않고, 그래서 HTML 태그로도 만들어 내지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{% csrf_token %}&lt;/code&gt;는 &lt;a href=&quot;https://goo.gl/Bw90sV&quot;&gt;CSRF(Cross Site Request Forgery)&lt;/a&gt; 토큰을 만드는 템플릿 태그입니다. Django로 만든 웹 페이지에 접속하면 각 세션을 기반으로 CSRF 토큰을 만들며, 이 토큰이 조작되거나 존재하지 않으면 Form 데이터를 Django로 동작하는 웹 애플리케이션 서버에 보내지 못합니다&lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. CSRF 토큰 검사를 하지 않도록 하면 되지만, 보안 상 좋지 않으니 HTML 폼 영역에 CSRF 토큰을 생성하도록 &lt;code&gt;{% csrf_token %}&lt;/code&gt;을 습관처럼 넣길 권합니다. 빠뜨리면 CSRF 검증을 실패하였다는 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-csrf_failed.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;뷰 템플릿 파일인 &lt;code&gt;new_photo.html&lt;/code&gt;는 레이아웃 구조를 잡는 역할을 하는 &lt;code&gt;layout.html&lt;/code&gt; 템플릿 파일로 확장하므로(&lt;code&gt;{% extends &amp;#39;layout.html&amp;#39; %}&lt;/code&gt;) 이 &lt;code&gt;layout.html&lt;/code&gt; 파일도 만들어야 합니다.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code&gt;manage.py&lt;/code&gt; 파일이 있는 디렉터리에 &lt;code&gt;templates&lt;/code&gt; 디렉터리를 새로 만들고, 그 안에 &lt;code&gt;layout.html&lt;/code&gt; 파일을 만들어 다음 내용을 담습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% load staticfiles %}

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ko&amp;quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;{% block page_title %}Pystagram{% endblock %}&amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;{% static &amp;#39;js/jquery-2.1.3.min.js&amp;#39; %}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
{% block content %}{% endblock %}
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지난 6회 연재 글에서 다룬 정적(static) 파일 내용이 얼핏 보이네요. 이것도 Django Template을 다루는 연재 글에서 자세히 다루겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;layout.html&lt;/code&gt;은 여러 뷰 템플릿에서 공통으로 사용하므로 앱 디렉터리가 아닌 별도 템플릿 디렉터리를 만들어 배치했습니다. 이 템플릿 디렉터리를 &lt;code&gt;settings.py&lt;/code&gt;에 설정합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;TEMPLATE_DIRS = (
    os.path.join(BASE_DIR, &amp;#39;templates&amp;#39;),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고로 이 설정은 Django 1.8에서는 유효하지 않으며, 추후 템플릿에 대해 자세히 다룰 때 이 설정을 수정하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;이제 Django의 개발용 내장 웹 서버를 구동하고(&lt;code&gt;python manage.py runserver&lt;/code&gt;) &lt;code&gt;/photo/upload/&lt;/code&gt; URL로 접속하면 사진 게시물을 작성하는 편집 화면이 나옵니다. 그런데 &lt;code&gt;filtered_image_file&lt;/code&gt;은 이미지 필터를 적용하여 가공된 이미지 파일을 담는 모델 필드입니다. 다시 말하면, 사진 게시물을 편집하는 단계에서 이용자가 접근해서는 안 되는 필드입니다. 그래서 화면에 나타나지 않게 감추겠습니다. 방법은 간단합니다. &lt;code&gt;PhotoEditForm&lt;/code&gt; 모델 폼의 메타 클래스에서 폼 필드로 사용할 모델 필드를 지정하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class PhotoEditForm(forms.ModelForm):
    class Meta:
        model = Photo
        fields = (&amp;#39;image_file&amp;#39;, &amp;#39;description&amp;#39;, )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fields&lt;/code&gt;는 폼에서 사용할 모델 필드를 지정하는 데 사용하며, 모델 필드 이름을 문자열로 리스트(&lt;code&gt;list&lt;/code&gt;)나 튜플(&lt;code&gt;tuple&lt;/code&gt;) 객체에 나열해 담으면 됩니다. 그런데 폼 필드로 사용하지 않을 모델 필드는 &lt;code&gt;filtered_image_file&lt;/code&gt; 하나이고, 사용할 모델 필드는 221개쯤 있다고 가정하겠습니다. 고작 하나를 사용하지 않으려고 221개 모델 필드 이름을 나열하면 무척 고통스럽습니다. 이런 경우는 사용하지 않을 모델 필드만 지정해야 편한데, &lt;code&gt;exclude&lt;/code&gt;에 지정하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class PhotoEditForm(forms.ModelForm):
    class Meta:
        model = Photo
        exclude = (&amp;#39;filtered_image_file&amp;#39;, )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 코드에서 유의할 점은 &lt;code&gt;exclude&lt;/code&gt; 역시 리스트나 튜플 객체를 할당해야 하므로 &lt;code&gt;&amp;#39;filtered_image_file&amp;#39;&lt;/code&gt; 뒤에 쉼표 하나 더 찍어줘야 합니다&lt;sup id=&quot;fnref3&quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-new_photo_modelform_without_some_field.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;이제 필터가 적용된 이미지 파일 모델 필드는 폼에서 다루지 않습니다.&lt;/p&gt;

&lt;h4&gt;사진 게시물 게시하기&lt;/h4&gt;

&lt;p&gt;우리는 사진 게시물 내용을 작성하는 URL과 사진 게시물을 제출하여 게시하는 URL을 같이 쓰겠습니다. 즉, &lt;code&gt;/photo/upload/&lt;/code&gt;에 HTTP Get 방식으로 접근하면 사진 게시물을 작성하는 화면이 나오고, POST 방식으로 접근하면 게시물을 제출합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def new_photo(request):
    if request.method == &amp;quot;GET&amp;quot;:
        edit_form = PhotoEditForm()
    elif request.method == &amp;quot;POST&amp;quot;:
        edit_form = PhotoEditForm(request.POST, request.FILES)

        if edit_form.is_valid():
            new_photo = edit_form.save()

            return redirect(new_photo.get_absolute_url())

    return render(
        request,
        &amp;#39;new_photo.html&amp;#39;,
        {
            &amp;#39;form&amp;#39;: edit_form,
        }
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;request.method&lt;/code&gt;가 &lt;code&gt;GET&lt;/code&gt;인 경우는 기존 코드를 그대로 사용하면 됩니다. &lt;code&gt;POST&lt;/code&gt; 방식, 즉, 게시물 내용과 파일을 제출 받는 부분을 추가했습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PhotoEditForm(request.POST, request.FILES)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;PhotoEditForm&lt;/code&gt; 폼에 첫 번째 인자로 &lt;code&gt;request.POST&lt;/code&gt;를, 두 번째 인자로 &lt;code&gt;request.FILES&lt;/code&gt;를 전달합니다. 첫 번째 인자는 폼에서 다룰 데이터를 뜻하며, 사전형(&lt;code&gt;dict&lt;/code&gt;) 객체나 사전형 객체처럼 동작하는(비슷한 인터페이스를 제공하는) 객체&lt;sup id=&quot;fnref4&quot;&gt;&lt;a href=&quot;#fn4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;여야 합니다. 파일을 제외한 HTML Form에서 &lt;code&gt;POST&lt;/code&gt; 방식으로 전송해온 모든 데이터가 &lt;code&gt;request.POST&lt;/code&gt;에 있습니다. 파일은 &lt;code&gt;request.FILES&lt;/code&gt;에 있습니다. 그래서, 이 둘을 분리하여 첫 번째 인자, 두 번째 인자로 전달한 것입니다.&lt;/p&gt;

&lt;p&gt;여기까지는 폼에서 처리할 데이터를 인자로 전달하여 설정한 것일 뿐이므로, &lt;code&gt;edit_form = PhotoEditForm()&lt;/code&gt;와 다를 바 없습니다. 그렇다고 해서 다음과 같이 코드를 작성해서는 안 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    edit_form = PhotoEditForm()
    if request.method == &amp;quot;POST&amp;quot;:
        edit_form.data = request.POST
        edit_form.files = request.FILES

        if edit_form.is_valid():
            new_photo = edit_form.save()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Django Form은 첫 번째 인자로 넘어온 데이터는 &lt;code&gt;data&lt;/code&gt; 멤버에, 파일은 &lt;code&gt;files&lt;/code&gt; 멤버에 할당하는 걸 이용한 것인데, Form 클래스로 인스턴스 객체를 생성해 할당하는 과정에서(&lt;code&gt;__init__()&lt;/code&gt;) 인자로 전달된 데이터나 파일이 있으면 &lt;code&gt;is_bound&lt;/code&gt;라는 멤버에 &lt;code&gt;True&lt;/code&gt;가 할당되고, 이 &lt;code&gt;is_bound&lt;/code&gt;가 &lt;code&gt;True&lt;/code&gt;여야만 &lt;code&gt;is_valid()&lt;/code&gt;를 비롯한 폼 검사를 수행하기 때문입니다. 물론,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    if request.method == &amp;quot;POST&amp;quot;:
        edit_form.is_bound = True
        edit_form.data = request.POST
        edit_form.files = request.FILES
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 &lt;code&gt;is_bound&lt;/code&gt;를 직접 &lt;code&gt;True&lt;/code&gt;로 할당하면 되지만, &lt;code&gt;edit_form = PhotoEditForm(request.POST, request.FILES)&lt;/code&gt;라고 코드를 짜면 그만인 것을 굳이 저렇게 짤 필요는 없습니다.&lt;/p&gt;

&lt;p&gt;폼에 검사할 데이터를 전달하여 초기화하여 인스턴스 객체(&lt;code&gt;edit_form&lt;/code&gt;)에는 전달된 데이터를 검사하는 몇 가지 인스턴스 메서드를 제공합니다. &lt;code&gt;full_clean()&lt;/code&gt;나 &lt;code&gt;clean()&lt;/code&gt; 메서드가 폼 데이터를 검사하는 데 사용하는 메서드인데, 실제로는 &lt;code&gt;is_valid()&lt;/code&gt; 메서드를 사용하면 됩니다. &lt;code&gt;is_valid()&lt;/code&gt; 메서드는 폼에 전달된 데이터를 폼 필드를 기준으로 검사하여 모든 데이터가 유효하면 &lt;code&gt;True&lt;/code&gt;를, 하나라도 유효하지 않은 항목이 있으면 &lt;code&gt;False&lt;/code&gt;를 반환합니다. 동작은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/forms.py#L163&quot;&gt;is_valid&lt;/a&gt; : 폼 검사와 관련된 오류(error)가 있는 지 검사.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/forms.py#L157&quot;&gt;errors&lt;/a&gt; 항목 검사를 수행한 적이 없어서 오류 내용 존재 자체가 아예 존재하지 않는 경우(&lt;code&gt;None&lt;/code&gt;), &lt;code&gt;full_clean()&lt;/code&gt; 메서드 실행&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/forms.py#L362&quot;&gt;full_clean()&lt;/a&gt; : &lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/forms.py#L380&quot;&gt;&lt;code&gt;_clean_fields()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/forms.py#L399&quot;&gt;&lt;code&gt;_clean_form()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/models.py#L410&quot;&gt;&lt;code&gt;_post_clean()&lt;/code&gt;&lt;/a&gt; 메서드를 차례대로 수행하여 폼 데이터 유효성을 검사.&lt;/li&gt;
&lt;li&gt;최종 : &lt;code&gt;is_valid()&lt;/code&gt;는 오류(errors)가 없으면 &lt;code&gt;True&lt;/code&gt;를 반환하고, 있으면 데이터가 유효하지 않아 &lt;code&gt;False&lt;/code&gt;를 반환하며, 어떤 항목에 문제가 유효하지 않은 지 여부는 폼 인스턴스 객체의 &lt;code&gt;errors&lt;/code&gt; 멤버(프로퍼티)에 사전형 객체처럼 생긴 &lt;code&gt;ErrorDict&lt;/code&gt;의 인스턴스 객체로 할당.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;데이터가 모두 유효하면 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼의 인스턴스 객체인 &lt;code&gt;edit_form&lt;/code&gt;의 &lt;code&gt;save()&lt;/code&gt; 메서드를 실행하고, 이 메서드는 연결된 모델을 이용하여 데이터를 저장합니다. &lt;code&gt;save()&lt;/code&gt; 메서드는 &lt;code&gt;ModelForm&lt;/code&gt; 클래스에 있는 메서드인데, 모델 폼에 연결한 모델을 이용하여 데이터를 저장하고 저장한 모델의 인스턴스 객체를 반환합니다. &lt;code&gt;PhotoEditForm&lt;/code&gt;에 &lt;code&gt;Photo&lt;/code&gt; 모델을 연결하였으므로 &lt;code&gt;Photo&lt;/code&gt; 모델로 생성한 인스턴스 객체를 반환하는 셈이지요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return redirect(new_photo.get_absolute_url())&lt;/code&gt; 에서 &lt;code&gt;redirect()&lt;/code&gt; 함수는 HTTP Response를 반환하는 Django의 &lt;code&gt;HttpResponseRedirect&lt;/code&gt; 클래스를 이용하여 클라이언트를 지정한 URL로 이동(redirect)시킵니다. &lt;code&gt;render()&lt;/code&gt; 함수처럼 몇 가지 절차를 간편하게 줄여준 함수이며, &lt;code&gt;django.shortcuts&lt;/code&gt; 모듈에 있습니다. 사용하려면 &lt;code&gt;import&lt;/code&gt;해야 겠지요?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.shortcuts import (
    render,
    redirect,
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;new_photo.get_absolute_url()&lt;/code&gt;에서 눈여겨 볼 부분은 &lt;code&gt;get_absolute_url()&lt;/code&gt; 메서드입니다. &lt;code&gt;new_photo&lt;/code&gt;는 &lt;code&gt;Photo&lt;/code&gt; 모델로 생성한 인스턴스 객체인데, 우리는 &lt;code&gt;Photo&lt;/code&gt; 모델에 &lt;code&gt;get_absolute_url()&lt;/code&gt; 인스턴스 메서드를 만든 적이 없습니다. 먼저 만들고 설명하겠습니다. &lt;code&gt;photo&lt;/code&gt; 앱 디렉터리 안에 있는 &lt;code&gt;models.py&lt;/code&gt;에서 &lt;code&gt;Photo&lt;/code&gt; 모델 클래스에 다음 코드를 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.core.urlresolvers import reverse_lazy


class Photo(models.Model):
    # 중략

    def get_absolute_url(self):
        return reverse_lazy(&amp;#39;view_single_photo&amp;#39;, kwargs={&amp;#39;photo_id&amp;#39;: self.id})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Django Model의 &lt;code&gt;get_absolute_url()&lt;/code&gt; 메서드는 모델의 개별 데이터에 접근하는 URL을 문자열로 반환합니다. 우리는 개별 사진을 보는 URL을 &lt;code&gt;/photo/사진ID/&lt;/code&gt; 패턴으로 제공하므로, 2번 사진은 &lt;code&gt;/photo/3/&lt;/code&gt;, 1023번 사진은 &lt;code&gt;/photo/1023/&lt;/code&gt; URL로 접근해 봅니다. 각 사진의 데이터는 &lt;code&gt;Photo&lt;/code&gt; 모델에 존재하며, 사진 데이터란 모델 클래스의 인스턴스 객체이므로 모델 클래스에 인스턴스 메서드로 &lt;code&gt;get_absolute_url()&lt;/code&gt;를 만드는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;get_absolute_url&lt;/code&gt;라는 이름을 반드시 따를 필요는 없으며 없어도 무방합니다. &lt;code&gt;permalink()&lt;/code&gt;라는 이름으로 메서드를 만들어도 무방합니다. 다만, &lt;code&gt;get_absolute_url&lt;/code&gt;는 Django가 개별 모델 데이터의 URL을 제공하는 메서드라고 전제해 놓은 이름이어서 Django가 알아서 처리하는 감춰진 동작&lt;sup id=&quot;fnref5&quot;&gt;&lt;a href=&quot;#fn5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;에 사용됩니다. 이런 관례(convention)를 따르면 일일이 지정하고 설정하지 않아도 되어 코드가 간결해집니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reverse_lazy()&lt;/code&gt;는 나중에 좀 더 자세히 다루기로 하고, 이번 편에서는 &lt;code&gt;urls.py&lt;/code&gt;에 &lt;code&gt;&amp;#39;view_single_photo&amp;#39;&lt;/code&gt; 이름으로 등록한 URL 패턴에 키워드 인자인 &lt;code&gt;photo_id&lt;/code&gt;의 값으로 &lt;code&gt;self.id&lt;/code&gt;를 할당하여 URL 문자열을 가져오는 데 사용했다고 이해하고 넘어가겠습니다.&lt;/p&gt;

&lt;p&gt;사진 게시물을 게시하는 기능을 구현했습니다. 실제로 올려보세요. 잘 게시됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-uploaded_photo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;유효하지 않은 폼 항목 오류 출력하기&lt;/h4&gt;

&lt;p&gt;혹시 사진으로 이미지 파일을 첨부하지 않거나 이미지 파일이 아닌 파일을 첨부하여 게시물을 첨부해 보셨나요? 강좌 소스 코드대로 잘 따라 오셨다면, 오류 내용이 안내됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-form_required_field.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-form_not_valid_image.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;우리는 템플릿 파일 어디에도 폼 오류 안내말을 출력하지 않았는데, 이게 어떻게 된 일일까요? 우리가 템플릿 파일에 폼 관련 내용을 담은 건 고작 한 줄 뿐입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    {{form.as_p}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;as_p&lt;/code&gt;로 폼 내용을 HTML로 출력하려 하면, 폼 항목에 오류가 있는 지, 즉, 폼 인스턴스 객체의 &lt;code&gt;errors&lt;/code&gt; 속성에 내용이 있는 지 확인하고, 있다면 오류 내용을 출력합니다. &lt;code&gt;{{form.as_p}}&lt;/code&gt;를 풀어쓰면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    {% for field in form %}
    &amp;lt;p&amp;gt;
        {% if field.errors %}
        {{ field.errors }}
        {% endif %}

        {{field}}
    &amp;lt;/p&amp;gt;
    {% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;form&lt;/code&gt; 템플릿 변수(&lt;code&gt;views.py&lt;/code&gt;에서는 &lt;code&gt;edit_form&lt;/code&gt; 객체)는 &lt;code&gt;for&lt;/code&gt;문으로 순환 가능합니다. 순환하면 폼에 등록된 폼 필드 순서대로 하나씩 폼 필드 객체를 꺼냅니다. 이 필드 객체를 출력하려 하면 이 필드가 생성하는 HTML 내용을 반환하는데, 이 필드 객체에 오류가 있는 경우, 오류 내용이 필드 객체의 &lt;code&gt;errors&lt;/code&gt;에 할당됩니다. 한 폼 필드에 오류 내용은 한 개 이상인 경우도 생기므로 순서열 객체(&lt;code&gt;list&lt;/code&gt;)에 오류가 하나씩 할당됩니다. &lt;code&gt;{{ field.errors }}&lt;/code&gt; 마저도 더 풀어쓰면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;        {% if field.errors %}
        &amp;lt;ul&amp;gt;
            {% for error in field.errors %}
            &amp;lt;li&amp;gt;{{error}}&amp;lt;/li&amp;gt;
            {% endfor %}
        &amp;lt;/ul&amp;gt;
        {% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;폼 필드를 직접 명시하여 오류를 확인하는 방법도 있습니다. 예를 들어, 이미지 파일 필드인 &lt;code&gt;image_file&lt;/code&gt;에 오류가 있는 지 확인하는 방법은 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% if form.errors.image_file %}
    {{form.errors.image_file}}
{% endif %}

또는

{% if form.image_file.errors %}
    {{form.image_file.errors}}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;대개는 Django Form이 자동으로 만들어주는 폼 항목 구성을 그대로 사용하진 않습니다. 각 폼 항목에 CSS나 HTML 속성을 다르게 부여하는데, Django 애플리케이션 개발자가 고치지 않고 Front-end 개발자가 수정하는 경우도 있습니다. 그래서 폼 필드를 구성하는 요소(레이블, 오류, 폼 필드 자체)를 분리해서 위와 같이 다루는 경우가 흔하고, 오히려 &lt;code&gt;{{form.as_p}}&lt;/code&gt;와 같이 Django에서 만들어내는 HTML 그대로를 사용하는 경우가 드뭅니다.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;강좌 7편을 마칩니다. 이번 편에서 다룬 Django Form이 동작하는 큰 흐름을 이해하면 앞으로 다룰 Form 세부 요소를 이해하기 쉽습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/07-fullsource/pystagram&quot;&gt;7편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/&quot;&gt;Encoding Web Shells in PNG IDAT chunks&lt;/a&gt; 글이나 &lt;a href=&quot;https://blog.sucuri.net/2013/07/malware-hidden-inside-jpg-exif-headers.html&quot;&gt;Malware Hidden Inside JPG EXIF Headers&lt;/a&gt; 글 참조.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://dobest.io/how-csrf-token-works/&quot;&gt;Django와 Rails에서 CSRF Token의 동작 방식&lt;/a&gt;이라는 글을 참조하세요.&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;쉼표를 빼서 &lt;code&gt;(&amp;#39;filtered_image_file&amp;#39;)&lt;/code&gt;로 표기하면 그냥 문자열 객체가 됩니다. 리스트 객체를 만드는 데 대괄호를(&lt;code&gt;[&lt;/code&gt;와 &lt;code&gt;]&lt;/code&gt;) 사용하고 튜플 객체를 만드는 데 소괄호(&lt;code&gt;(&lt;/code&gt;와 &lt;code&gt;)&lt;/code&gt;)를 활용해서 헷갈리기 일쑤인데, 튜플을 만드는 데에 필요한 건 괄호가 아니라 쉼표(&lt;code&gt;,&lt;/code&gt;)입니다. 왜냐하면 쉼표로 항목을 구분하여 나열하며, 괄호는 명시적으로 생략 가능하기 때문입니다. 단, 예외로 아무 항목이 없는 빈 튜플을 만드는 경우엔 그냥 소괄호로 짝지으면 됩니다. 자세한 내용은 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#tuples&quot;&gt;공식 문서의 Tuples&lt;/a&gt;를 참조하세요.&amp;nbsp;&lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;사전형 객체처럼 생긴 이런 객체를 인스턴스로 만드는 데 사용하는 클래스(&lt;code&gt;type&lt;/code&gt;)도 &lt;code&gt;dict&lt;/code&gt;를 상속받아서 만들어서 &lt;code&gt;dict&lt;/code&gt;형이 제공하는 인터페이스를 포함합니다.&amp;nbsp;&lt;a href=&quot;#fnref4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn5&quot;&gt;
&lt;p&gt;“magic”이라는 표현을 씁니다. 뭔가 알아서 수행되는데, 이용자(개발자)가 굳이 알 필요가 없는 내부에 감춰진 동작을 뜻하지요.&amp;nbsp;&lt;a href=&quot;#fnref5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 18 May 2015 02:47:49 +0900</pubDate>
        <link>http://blog.hannal.com//2015/05/start_with_django_webframework_07/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/05/start_with_django_webframework_07/</guid>
        
        <category>django</category>
        
        <category>form</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
      <item>
        <title>6. Django 정적 파일 기능 이해하기</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막 갱신일시 : 2015년 4월 26일 21시 10분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;지난 5회에서 다룬 정적 파일을 Django에서 어떻게 다루는지 자세히 알아 보겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Django와 정적 파일&lt;/h3&gt;

&lt;h4&gt;웹 서버와 웹 애플리케이션, 그리고 정적 파일&lt;/h4&gt;

&lt;p&gt;웹 게시판이나 블로그, 또는 우리가 만들 Pystagram은 웹 프로그램 또는 웹 애플리케이션입니다. 이런 웹 애플리케이션이 필요한 이유는 뭘까요?&lt;/p&gt;

&lt;p&gt;웹 서버는 웹 클라이언트가 특정 위치에(URL) 있는 서버 저장소(storage)에 있는 자원(resource)을 요청(HTTP request) 받아서 제공(serving)하는 응답(HTTP response) 처리가 기본 동작입니다. 이러한 기본 동작은 자원과 접근 가능한 주소가 정적으로 연결된 관계입니다. PC 스토리지의 &lt;code&gt;/Users/hannal/Pictures/private_photo.png&lt;/code&gt; 경로에 사진 파일이 있다고 예를 들면, 파일 경로는 웹 주소이고 사진 파일은 자원입니다. 사진 파일을 읽어 들여 보거나 수정하거나 지우는 행위는 HTTP method(GET, POST, PUT, DELETE 등)로 표현합니다. 정리하면 웹 서버는 요청받은 URL과 방식으로 서버에 존재하는 자원을 제공하며, 이 동작을 정적 자원(static resource)을 제공하는 것입니다.&lt;/p&gt;

&lt;p&gt;그런데 사진 파일 자체를 제공하는 데 그치지 않고, 사진에 설명도 달고 댓글도 단다면 자원(사진, 본문, 댓글 등)을 정적으로 제공하는 건 그다지 효율성이 좋지 않습니다. 본문을 수정하거나 댓글을 단다는 건 내용물이 고정되어 있지 않고 언제든지 변하는 상황인데, 언제든지 가변하는 내용물을 고정된 자원으로 제공하려면 내용물이 바뀔 때마다 고정된 자원도 매번 바꿔서 정적인 상태로 만들어야 합니다&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;가변하는 자원을 운용하려면 동적으로 자원을 처리하는 기능을 구현해야 하는데, 웹 서버에 이러한 기능을 추가하는 건 그리 좋은 생각은 아닙니다. 웹 서버는 대부분 C나 C++ 언어로 작성되어 있고, 동적인 웹 자원을 다루는 처리는 대부분 문자열을 가공하는 과정입니다. C나 C++ 언어로 문자열을 다루는 건 불편할 뿐더러 웹 서버에 동적 자원을 다루는 기능을 직접 탑재하는 것도 까다롭습니다. 문자열 가공을 더 쉽게 다루는 다른 언어(Python, Perl 등)로 동적 자원을 처리하는 별도 웹 서버 애플리케이션을 웹 서버와 분리해서 만들고 관리하는 게 낫습니다. 그리고 웹 애플리케이션과 웹 서버가 통신하는 인터페이스를 중간에 두어 서로를 연결합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/04/06-webserver-webapplication.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Django는 정적 파일을 제공하는 실 서비스용 기능을 제공하지 않는다&lt;/h4&gt;

&lt;p&gt;Django는 실 서비스 환경에서 사용할 정적 파일을 제공하는 기능을 제공하지 않습니다. 서버에 저장된 정적 파일을 읽어들여서 그대로 웹 클라이언트에 보내기만 하면 그만인 단순한 기능인데도 Django는 그런 기능을 제공하지 않습니다. 왜냐하면 그럴 필요가 없기 때문인데, 앞서 설명한 바와 같이 그런 작업에 대해서는 웹 서버가 전문가이기 때문입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/04/06-webserver-static_resources.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;게다가 웹 애플리케이션은 웹 서버와 연결하는 중간 인터페이스를 거치므로 효율이 더 떨어집니다.&lt;/p&gt;

&lt;p&gt;하지만, 개발 상황인 경우는 효율보다는 기능(역할)이 중요한 경우가 많습니다. 정적 파일이 제대로 제공되는지 확인하려고 항상 웹 서버를 구동할 필요는 없습니다. Django는 개발 단계에서 쓸 정적 파일 제공 기능을 제공합니다. 성능은 웹 서버가 직접 정적 파일을 제공하는 것 보다 떨어지지만 정적 파일 제공에 필요한 기능은 대부분 지원합니다.&lt;/p&gt;

&lt;h4&gt;Static file과 Media file&lt;/h4&gt;

&lt;p&gt;Django은 정적 파일을 크게 두 종류로 구분합니다.&lt;/p&gt;

&lt;p&gt;Static file은 Javascript, CSS, Image 파일처럼 웹 서비스에서 사용하려고 미리 준비해 놓은 정적 파일입니다. 파일 자체가 고정되어 있고, 서비스 중에도 수시로 추가되거나 변경되지 않고 고정되어 있습니다.&lt;/p&gt;

&lt;p&gt;Media file은 이용자가 웹에서 올리는(upload) 파일입니다. 파일 자체는 고정되어 이지만, 언제 어떤 파일이 정적 파일로 제공되고 준비되는지 예측할 수 없습니다.&lt;/p&gt;

&lt;p&gt;Static file과 Media file은 정적 파일이라는 점에서는 같지만, 정적 파일을 제공하는 상황을 예측할 수 있는지 여부는 다릅니다. Static file은 서비스에 필요한 정적 파일을 미리 준비해놓기 때문에 &lt;code&gt;manage.py&lt;/code&gt; 도구에 &lt;code&gt;findstatic&lt;/code&gt;과 &lt;code&gt;collectstatic&lt;/code&gt;이라는 기능으로 정적 파일을 모으고 찾는 관리 기능을 제공합니다. &lt;code&gt;manage.py&lt;/code&gt;은 Django 프로젝트를 관리하는 일에 필요한 기능을 명령줄 쉘(shell)에서 수행하는 도구입니다. 그에 반해 Media file은 이용자가 웹에서 올리는 파일이므로 미리 예측해서 준비할 수 없습니다. 그래서 Static file 관련된 관리 기능인 &lt;code&gt;findstatic&lt;/code&gt;과 &lt;code&gt;collectstatic&lt;/code&gt; 기능을 사용하지 못합니다.&lt;/p&gt;

&lt;h3&gt;2. Static file&lt;/h3&gt;

&lt;p&gt;Static file은 웹 서비스에 사용할 정적 파일을 미리 준비하여 제공하는 데 사용합니다. Django로 운영되는 프로젝트의 설정을 관리하는 &lt;code&gt;settings.py&lt;/code&gt;에 Static file와 관련된 항목이 다섯 가지 존재하며, 보통은 다음 세 가지를 사용합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;은 개발 단계에서 사용하는 정적 파일이 위치한 경로들을 지정하는 설정 항목입니다. 특정 Django App&lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;에만 사용하는 정적 파일이 있거나 혹은 정적 파일을 관리하기 용이하게 하기 위해 여러 경로(path)에 정적 파일을 배치하였다면, 이 경로들을 Python의 &lt;code&gt;list&lt;/code&gt;나 &lt;code&gt;tuple&lt;/code&gt;로 담으면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATICFILES_DIRS = (
    os.path.join(BASE_DIR, &amp;#39;static&amp;#39;),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;대개는 &lt;code&gt;static&lt;/code&gt;이라는 디렉터리에 정적 파일을 담습니다. 주의할 점은 정적 디렉터리 경로가 하나이더라도 반드시 &lt;code&gt;list&lt;/code&gt;나 &lt;code&gt;tuple&lt;/code&gt;로 담아야 한다는 점입니다. 흔히 하는 실수는 다음과 같이 항목 뒤에 쉼표를 빠뜨리는 것입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATICFILES_DIRS = (
    os.path.join(BASE_DIR, &amp;#39;static&amp;#39;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 경우 Django는 &lt;code&gt;ImproperlyConfigured: Your STATICFILES_DIRS setting is not a tuple or list; perhaps you forgot a trailing comma?&lt;/code&gt;라는 경고를 출력하며 정적 파일을 제대로 제공(serving)하지 못합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;manage.py&lt;/code&gt;에서 제공하는 명령어 중 &lt;code&gt;findstatic&lt;/code&gt;은 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 설정한 경로에서 지정한 정적 파일을 찾습니다. 실습해보지요. &lt;a href=&quot;http://jquery.com/download/&quot;&gt;jQuery download&lt;/a&gt;에서 “Download the compressed, production jQuery x.x.x”로 된 링크를 찾은 뒤 그 링크에 걸려있는 jQuery 파일을 내려 받습니다. 이 강좌를 쓰는 시점에서 저는 2.1.3판을 받았습니다. 이제 &lt;code&gt;manage.py&lt;/code&gt; 파일이 있는 경로에 &lt;code&gt;static&lt;/code&gt;이라는 이름으로 디렉터리를 만들고, 다시 &lt;code&gt;static&lt;/code&gt; 디렉터리 안에 &lt;code&gt;js&lt;/code&gt;라는 디렉터리를 만든 다음에 &lt;code&gt;js&lt;/code&gt; 디렉터리에 내려 받은 jQuery 파일을 넣습니다. &lt;code&gt;settings.py&lt;/code&gt;에는 앞서 나온 예시대로 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 항목을 추가합니다. 이제 &lt;code&gt;findstatic&lt;/code&gt; 명령어로 파일을 찾아 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py findstatic js/jquery-2.1.3.min.js
Found &amp;#39;jquery-2.1.3.min.js&amp;#39; here:
  /(중략)/pystagram/static/js/jquery-2.1.3.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;물론 &lt;code&gt;$&lt;/code&gt; 기호는 입력하지 않습니다. 쉘의 프롬프트 기호이니까요.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 &lt;code&gt;os.path.join(BASE_DIR, &amp;#39;static2&amp;#39;)&lt;/code&gt; 항목을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATICFILES_DIRS = (
    os.path.join(BASE_DIR, &amp;#39;static&amp;#39;),
    os.path.join(BASE_DIR, &amp;#39;static2&amp;#39;),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런 뒤 &lt;code&gt;manage.py&lt;/code&gt; 파일이 있는 경로에 &lt;code&gt;static2&lt;/code&gt; 디렉터리를 만들고 이 안에 &lt;code&gt;js&lt;/code&gt; 디렉터리를 만들어서 그곳에 jQuery 파일을 복사합니다. 마지막으로 &lt;code&gt;photo&lt;/code&gt; 디렉터리(Django &lt;code&gt;photo&lt;/code&gt; 앱)에 &lt;code&gt;static&lt;/code&gt; 디렉터리를 만들고 이 디렉터리에 jQuery 파일을 복사하고, 또 &lt;code&gt;static&lt;/code&gt; 디렉터리 안에 &lt;code&gt;js&lt;/code&gt; 디렉터리를 더 만든 뒤 그 안에 jQuery 파일을 복사합니다. 디렉터리 구조는 다음과 같으며, 강좌 연재가 너무 지연되어서 &lt;code&gt;photo&lt;/code&gt; 디렉터리가 뭔지 기억이 나지 않는다면 “&lt;a href=&quot;http://blog.hannal.com/2014/9/start_with_django_webframework_03/&quot;&gt;3. Photo 앱과 모델 만들기&lt;/a&gt;”편을 참고하시길 바랍니다. :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;static/

&lt;ul&gt;
&lt;li&gt;js/&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;static2/

&lt;ul&gt;
&lt;li&gt;js/&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;photo/

&lt;ul&gt;
&lt;li&gt;static/&lt;/li&gt;
&lt;li&gt;static/js/&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그런 뒤 다음 세 줄을 실행하여 화면에 나온 결과가 무엇을 의미하는지 고민해 보세요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py findstatic jquery-2.1.3.min.js
$ python manage.py findstatic js/jquery-2.1.3.min.js
$ python manage.py findstatic javascript/jquery-2.1.3.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;충분히 고민하셨으리라 믿습니다. &lt;code&gt;js/jquery-2.1.3.min.js&lt;/code&gt;를 찾으려 하면 &lt;code&gt;static&lt;/code&gt; 디렉터리에 있는 것과 &lt;code&gt;static2&lt;/code&gt; 디렉터리에 있는 것, 그리고 &lt;code&gt;photo/static&lt;/code&gt; 디렉터리에 있는 것이 나타납니다. 나타난 순서는 &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;static2&lt;/code&gt;, &lt;code&gt;photo/static&lt;/code&gt; 디렉터리 순인데, 이 배치된 순서는 실제로 정적 파일을 찾아다 사용할 때 우선순위로 작용합니다. 이 우선순위는 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 명기된 디렉터리가 더 상위인데, &lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;라는 &lt;code&gt;settings.py&lt;/code&gt; 설정 항목에서 기본 파일 시스템 파인더(finder)가 Django App 디렉터리보다 상위순위로 지정되어 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;이와 같이 정적 파일 경로가 일치할 경우 우선순위에 따라 실제 사용하는 정적 파일이 결정됩니다. 실제 물리 경로는 그대로 유지하지만 우선순위 문제를 겪지 않으려면 접두사(prefix)를 붙여서 구분하면 됩니다. &lt;code&gt;static2&lt;/code&gt;는 이제 곧 지울 항목이니까 &lt;code&gt;byebye&lt;/code&gt;라는 접두사를 쓰겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATICFILES_DIRS = (
    os.path.join(BASE_DIR, &amp;#39;static&amp;#39;),
    (&amp;#39;byebye&amp;#39;, os.path.join(BASE_DIR, &amp;#39;static2&amp;#39;),),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 설정을 적용하면 &lt;code&gt;static2&lt;/code&gt; 디렉터리가 마치 &lt;code&gt;byebye&lt;/code&gt;라는 디렉터리 안에 위치한 것처럼 &lt;code&gt;static2&lt;/code&gt;에 있는 정적 파일에 접근해야 합니다. 다음 두 명령을 실행해 보세요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py findstatic js/jquery-2.1.3.min.js
$ python manage.py findstatic byebye/js/jquery-2.1.3.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;은 웹 페이지에서 사용할 정적 파일의 최상위 URL 경로입니다. 이 최상위 경로 자체는 실제 파일이나 디렉터리가 아니며, URL로만 존재하는 단위입니다. 그래서 이용자 마음대로 정해도 무방하며, 저는 &lt;code&gt;assets&lt;/code&gt;라는 URL 경로를 쓰겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATIC_URL = &amp;#39;/assets/&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;문자열은 반드시 &lt;code&gt;/&lt;/code&gt;로 끝나야 합니다. &lt;code&gt;findstatic&lt;/code&gt; 명령어로 탐색되는 정적 파일 경로에 &lt;code&gt;STATIC_URL&lt;/code&gt; 경로를 합치면 실제 웹에서 접근 가능한 URL이 됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;findstatic js/jquery-2.1.3.min.js&lt;/code&gt; : http://pystagram.com&lt;strong&gt;/assets/js/jquery-2.1.3.min.js&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findstatic byebyejs/jquery-2.1.3.min.js&lt;/code&gt; : http://pystagram.com&lt;strong&gt;/assets/byebye/js/jquery-2.1.3.min.js&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;은 정적 파일이 실제 위치한 경로를 참조하며, 이 실제 경로는 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 설정 항목에 지정된 경로가 아닌 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 설정 항목에 지정된 경로입니다. 그런데 &lt;code&gt;static2&lt;/code&gt; 경로는 &lt;code&gt;byebye&lt;/code&gt; 접두사가 붙어서 실제 물리 경로와 다릅니다. 이에 대해선 &lt;code&gt;STATIC_ROOT&lt;/code&gt;에서 자세히 다루겠습니다.&lt;/p&gt;

&lt;h4&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;는 Django 프로젝트에서 사용하는 모든 정적 파일을 한 곳에 모아넣는 경로입니다. 한 곳에 모으는 기능은 &lt;code&gt;manage.py&lt;/code&gt; 파일의 &lt;code&gt;collectstatic&lt;/code&gt; 명령어로 수행합니다. Django가 모든 파일을 검사하여 정적 파일로 사용하는지 여부를 확인한 뒤 모으는 건 아니고, 각 Django 앱 디렉터리에 있는 &lt;code&gt;static&lt;/code&gt; 디렉터리와 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 지정된 경로에 있는 모든 파일을 모읍니다.&lt;/p&gt;

&lt;p&gt;개발 과정에선, 정확히는 &lt;code&gt;settings.py&lt;/code&gt;의 &lt;code&gt;DEBUG&lt;/code&gt;가 &lt;code&gt;True&lt;/code&gt;로 설정되어 있으면 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 설정은 작용하지 않으며, &lt;code&gt;STATIC_ROOT&lt;/code&gt;는 실 서비스 환경을 위한 설정 항목입니다. 그래서 개발 과정에선 &lt;code&gt;STATIC_ROOT&lt;/code&gt;에 지정한 경로가 실제로 존재하지 않거나 아예 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 설정 항목 자체가 없어도 문제없이 동작합니다.&lt;/p&gt;

&lt;p&gt;그렇다면 실 서비스 환경에서 &lt;code&gt;STATIC_ROOT&lt;/code&gt;는 왜 필요할까요? 이 경로에 있는 모든 파일을 웹 서버가 직접 제공(serving)하기 위함입니다. 실제 실습하며 확인해 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt;에 다음과 같이 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 설정 항목을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATIC_ROOT = os.path.join(BASE_DIR, &amp;#39;collected_statics&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt;나 &lt;code&gt;tuple&lt;/code&gt;형인 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;와는 달리 문자열 경로를 할당합니다. 이제 &lt;code&gt;collectstatic&lt;/code&gt; 명령어로 현 프로젝트가 사용하는 모든 정적 파일을 모읍니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지정한 경로에 있는 기존 파일을 전부 덮어 쓰는데 정말로 모을 거냐고 묻습니다. 원본 파일을 덮어 쓰는 게 아니니 &lt;code&gt;yes&lt;/code&gt;라고 입력합니다. 정적 파일을 모을 경로를 &lt;code&gt;manage.py&lt;/code&gt; 파일이 있는 경로에 &lt;code&gt;collected_statics&lt;/code&gt; 디렉터리로 지정했으므로 이 디렉터리가 만들어지고, 이 안에 사용하는 모든 정적 파일이 &lt;strong&gt;복사&lt;/strong&gt;됩니다. 이 디렉터리 안을 보면 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 넣은 경로들 중 &lt;code&gt;byebye&lt;/code&gt;라는 접두사를 붙인 디렉터리도 보입니다. 마음으로 “hi”라고 인사 보내셨다면 당신은 친절한 사람. :)&lt;/p&gt;

&lt;p&gt;이렇게 정적 파일을 모아놓은 &lt;code&gt;STATIC_ROOT&lt;/code&gt;는 Django가 직접 접근하진 않습니다. Django가 접근하여 다루는 설정은 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;이며, &lt;code&gt;STATIC_ROOT&lt;/code&gt;는 정적 파일을 직접 제공(serving)할 웹 서버가 접근합니다. &lt;code&gt;collectstatic&lt;/code&gt; 명령어를 수행하면 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;나 앱 디렉터리에 있는 &lt;code&gt;static&lt;/code&gt; 디렉터리 안에 있는 파일을 &lt;code&gt;STATIC_ROOT&lt;/code&gt;에 모으는데, &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 지정된 경로인 경우 따로 명시한 접두사으로 디렉터리를 만들어 그 안에 파일을 복사하고, 앱 디렉터리에 있는 &lt;code&gt;static&lt;/code&gt; 디렉터리인 경우는 앱 이름으로 디렉터리를 만들어 그 안에 &lt;code&gt;static&lt;/code&gt; 디렉터리 안에 있는 파일을 복사합니다. 즉, 개발 단계(&lt;code&gt;DEBUG = True&lt;/code&gt;)에서는 정적 파일 URL 경로가 논리 개념이고, 서비스 환경(&lt;code&gt;DEBUG = False&lt;/code&gt;)에서는 실제 물리 개념인 정적 파일 URL 경로가 되는 것입니다.&lt;/p&gt;

&lt;p&gt;그렇다면 경로가 동일해서 우선순위가 발생하는 경우에 &lt;code&gt;collectstatic&lt;/code&gt;을 수행하면 어떤 파일이 실제로 복사될까요? 물론 1순위 경로에 위치한 파일이 복사됩니다. &lt;code&gt;photo/js/jquery-2.1.3.min.js&lt;/code&gt; 파일을 열어서 내용을 몽땅 지워서 0 byte 파일로 만들고, &lt;code&gt;collected_static&lt;/code&gt; 디렉터리를 지운 뒤에 다시 &lt;code&gt;collectstatic&lt;/code&gt; 명령어를 실행해 보세요. &lt;code&gt;collected_static&lt;/code&gt; 디렉터리 안의 &lt;code&gt;js&lt;/code&gt; 디렉터리 안에 있는 &lt;code&gt;jquery-2.1.3.min.js&lt;/code&gt; 파일을 보면 0 byte인 &lt;code&gt;photo/js/jquery-2.1.3.min.js&lt;/code&gt;이 아닌 정상 파일인 &lt;code&gt;js/jquery-2.1.3.min.js&lt;/code&gt;이 복사되어 있습니다.&lt;/p&gt;

&lt;p&gt;주의할 점. &lt;code&gt;STATIC_ROOT&lt;/code&gt; 경로는 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 등록된 경로와 같은 경로가 있어서는 안 됩니다. 남들이 잘 안 쓸만한 이상한 이름(&lt;code&gt;collected_statics&lt;/code&gt;?)을 쓰세요.&lt;/p&gt;

&lt;h4&gt;&lt;code&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;개발 단계에서 정적 파일을 제공(serving)하는 기능은 Django에서 제공하는데, 사용 방법은 아주 간단합니다. &lt;code&gt;django.conf.urls.static&lt;/code&gt; 모듈에 있는 &lt;code&gt;static&lt;/code&gt; 함수를 이용해 URL 패턴을 만들어 &lt;code&gt;urls.py&lt;/code&gt;의 &lt;code&gt;urlpatterns&lt;/code&gt;에 추가하는 것입니다. 지난 5회 강좌분에서 이미 사용한 바로 그 방식입니다. 이 함수를 조금 더 살펴볼까요?&lt;/p&gt;

&lt;p&gt;이 함수를 &lt;code&gt;urls.py&lt;/code&gt;에서 URL 패턴을 만드는 데 사용한 걸 보면 이 함수 자체가 정적 파일을 제공한다기 보다는 정적 파일 URL에 그런 기능을 하는 무언가를 연결할 것이라 예상되지요? 실제로 그렇게 동작합니다. 정적 파일에 접근할 URL 접두사(&lt;code&gt;staticfiles&lt;/code&gt;)를 첫 번째 인자로 넣고 정적 파일이 위치한 경로를 &lt;code&gt;document_root&lt;/code&gt;라는 키워드 인자로 전달하면, 이런 내용을 &lt;code&gt;django.views.static.serve&lt;/code&gt;라는 뷰 함수가 사용합니다. 이 &lt;code&gt;serve&lt;/code&gt; 함수는 서버에 위치한 파일을 읽어서(&lt;code&gt;open(fullpath, &amp;#39;rb&amp;#39;)&lt;/code&gt;) 스트리밍 방식으로 응답(&lt;code&gt;StreamingHttpResponse&lt;/code&gt;)합니다. 실제 파일 서빙을 하는 것입니다. 물론 성능은 웹 서버가 직접 서빙하는 것보다 떨어지므로 개발 단계에서만 쓰는 게 좋을텐데, &lt;code&gt;django.conf.urls.static&lt;/code&gt;의 &lt;code&gt;static&lt;/code&gt; 함수는 &lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;DEBUG&lt;/code&gt;가 True인 경우에만 이런 정적 파일 제공에 필요한 URL 패턴을 만듭니다. 간단히 말해서 &lt;code&gt;DEBUG=True&lt;/code&gt;인 경우에만 &lt;code&gt;static&lt;/code&gt; 함수는 우리가 원하고 기대하는 동작을 합니다.&lt;/p&gt;

&lt;p&gt;그런데 &lt;strong&gt;Static file&lt;/strong&gt;은 이런 처리를 하지 않아도 개발 단계에서는 잘 제공(serving)됩니다. Media file(업로드 파일)은 &lt;code&gt;urls.py&lt;/code&gt;에 &lt;code&gt;static&lt;/code&gt; 함수를 사용해 정적 파일을 제공하도록 강제했지만, Static file은 그런 처리를 하지 않아도 저절로 제공(serving)됩니다. 이런 &lt;strong&gt;저절로&lt;/strong&gt; 동작하는 기능은 Django 프레임워크에 내장된 Django App인 &lt;code&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/code&gt;가 맡고 있습니다. &lt;code&gt;settings.py&lt;/code&gt; 파일을 열어서 &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 항목을 보면 우리가 앞서 추가한 &lt;code&gt;&amp;#39;photo&amp;#39;&lt;/code&gt; 외에도 &lt;code&gt;django.contrib&lt;/code&gt;으로 시작하는 몇 가지가 더 있는데, 그 중에 &lt;code&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/code&gt;가 있습니다. &lt;code&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/code&gt; 항목을 보니 지난 강좌에서 사용해 본 Django admin 기능도 Django App이라는 걸 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 앱에는 이 앱이 사용하는 URL 패턴을 담은 &lt;code&gt;urls.py&lt;/code&gt; 파일이 있는데, 이 파일 내용은 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def staticfiles_urlpatterns(prefix=None):
    &amp;quot;&amp;quot;&amp;quot;
    Helper function to return a URL pattern for serving static files.
    &amp;quot;&amp;quot;&amp;quot;
    if prefix is None:
        prefix = settings.STATIC_URL
    return static(prefix, view=&amp;#39;django.contrib.staticfiles.views.serve&amp;#39;)

# Only append if urlpatterns are empty
if settings.DEBUG and not urlpatterns:
    urlpatterns += staticfiles_urlpatterns()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;단순하지요? &lt;code&gt;settings.py&lt;/code&gt;의 &lt;code&gt;STATIC_URL&lt;/code&gt; 항목의 URL에 &lt;code&gt;django.contrib.staticfiles.views.serve&lt;/code&gt; 뷰 함수를 연결했는데, 이 내용은 &lt;code&gt;settings.DEBUG&lt;/code&gt;가 &lt;code&gt;True&lt;/code&gt;인 경우에 반영됩니다.&lt;/p&gt;

&lt;h4&gt;정리&lt;/h4&gt;

&lt;p&gt;정리하면, 정적 파일이 있는 경로를 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 지정하면 개발 단계에서는 더 신경쓸 게 없습니다.&lt;/p&gt;

&lt;h3&gt;3. Media file&lt;/h3&gt;

&lt;h4&gt;간단히 설명&lt;/h4&gt;

&lt;p&gt;Media file은 이용자가 웹에서 업로드한 정적 파일입니다. 미리 준비해놓고 제공하는 Static file과는 달리 언제 어떤 파일이 추가될 지 모르므로 &lt;code&gt;findstatic&lt;/code&gt;과 &lt;code&gt;collectstatic&lt;/code&gt;같은 명령어는 Media file에 대해서는 무의미합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt;에 Media file와 관련된 항목이 두 가지 존재합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;파일 업로드와 관련하여 세부 조정하는 설정이 몇 가지 더 있지만, 대개는 기본 설정(&lt;code&gt;global_settings&lt;/code&gt;)대로 써도 무방합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;는 이름이 &lt;code&gt;STATIC_ROOT&lt;/code&gt;과 비슷한데, 업로드가 끝난 파일을 배치할 최상위 경로를 지정하는 설정 항목입니다. &lt;code&gt;STATIC_ROOT&lt;/code&gt;보다는 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;이 더 비슷한 역할을 하는데, &lt;a href=&quot;https://docs.djangoproject.com/en/dev/releases/1.3/#extended-static-files-handling&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;는 Django 1.3판에 새롭게 도입&lt;/a&gt;된 설정이자 기능이다 보니 설정 항목 이름을 미처 교통정리하지 못했나 봅니다. &lt;code&gt;MEDIA_ROOT&lt;/code&gt;는 &lt;code&gt;STATIC_ROOT&lt;/code&gt;와 다른 경로를 지정해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;은 &lt;code&gt;STATIC_URL&lt;/code&gt;과 이름도 비슷하고 역할도 비슷합니다. &lt;code&gt;/&lt;/code&gt;로 끝나는 URL 경로 문자열로 설정해야 한다는 점도 같습니다. &lt;code&gt;MEDIA_URL&lt;/code&gt;도 &lt;code&gt;MEDIA_ROOT&lt;/code&gt;와 마찬가지로 &lt;code&gt;STATIC_URL&lt;/code&gt;과 URL 경로가 달라야 합니다.&lt;/p&gt;

&lt;p&gt;주요 개념을 Static file 영역에서 설명하니 Media file은 간결하게 정리 되는군요.&lt;/p&gt;

&lt;h4&gt;지난 Media file 관련 코드 수정&lt;/h4&gt;

&lt;p&gt;지난 5회에서 파일 업로드를 경험해 봤지만, 흐름을 파악하는 데 목표가 있는 코드여서 올바른(?) 코드는 아니었습니다. 이번 6회 강좌로 Django가 정적 파일을 다루는 방식을 이해했으니 지난 번 코드도 보다 적확하게 고치겠습니다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;code&gt;settings.py&lt;/code&gt;에서 &lt;code&gt;MEDIA_ROOT&lt;/code&gt; 부분을 고치겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;MEDIA_ROOT = os.path.join(BASE_DIR, &amp;#39;static_files&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기존엔 이와 같이 설정했는데, Static file과 혼돈할 여지가 있으니 업로드 파일이 저장될 디렉터리 이름을 &lt;code&gt;uploaded_files&lt;/code&gt;로 바꾸겠습니다. 그리고, 업로드 URL 경로는 &lt;code&gt;/uploads/&lt;/code&gt;로 보다 명확하게 표현하겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;MEDIA_URL = &amp;#39;/uploads/&amp;#39;
MEDIA_ROOT = os.path.join(BASE_DIR, &amp;#39;uploaded_files&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번엔 &lt;code&gt;urls.py&lt;/code&gt;에 Media file을 제공(serving)하는 URL 패턴 등록 부분을 고치겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if settings.DEBUG:
    urlpatterns += static(
        settings.MEDIA_URL, document_root=settings.MEDIA_ROOT
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;#39;static_files&amp;#39;&lt;/code&gt;을 &lt;code&gt;settings.MEDIA_URL&lt;/code&gt;로 바꾼 것입니다.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code&gt;photo&lt;/code&gt; 앱의 &lt;code&gt;models.py&lt;/code&gt; 파일을 열어서 업로드 된 이미지 파일이 저장될 경로를 지정한 &lt;code&gt;upload_to&lt;/code&gt; 필드 옵션을 고칩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Photo(models.Model):
    image_file = models.ImageField(upload_to=&amp;#39;%Y/%m/%d&amp;#39;)
    filtered_image_file = models.ImageField(upload_to=&amp;#39;static_files/uploaded/%Y/%m/%d&amp;#39;)
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;upload_to=&amp;#39;static_files/uploaded/%Y/%m/%d&amp;#39;&lt;/code&gt; 부분에서 &lt;code&gt;static_files/uploaded/&lt;/code&gt;를 떼버린 것입니다. &lt;code&gt;static_files&lt;/code&gt;는 이미 &lt;code&gt;MEDIA_ROOT&lt;/code&gt;에 지정되어 있고, &lt;code&gt;uploaded&lt;/code&gt;는 업로드 파일을 구분하기 위한 경로였는데 Static file과 Media file이 정적 파일이라는 큰 범주에 속하지만 역할은 다르다는 걸 이번 강좌에서 이해했으므로 더이상 업로드 경로에 넣을 필요가 없습니다.&lt;/p&gt;

&lt;p&gt;덤으로 &lt;code&gt;created_at&lt;/code&gt;도 조금 바뀌었는데, &lt;code&gt;auto_now&lt;/code&gt; 필드 옵션을 제거 했습니다. Django 1.8판에서는 &lt;code&gt;auto_now_add&lt;/code&gt;와 &lt;code&gt;auto_now&lt;/code&gt;를 병행하지 못하도록 정책이 바뀌었거든요.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;강좌 6편을 마칩니다. 5편과 6편 사이에 5개월이 흘렀네요. 그동안 Django는 1.8판이 나왔고, Python과 Django 입문자를 대상으로 오프라인 강의도 두 차례 했으며, 저는 딸바보가 되었습니다. 딸이 첫 돌을 맞이하기 전에 이 강좌 연재를 완주하면 좋겠습니다. :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/06-fullsource/pystagram&quot;&gt;6편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;2015년 4월 기준으로 제 블로그는 실제로 이런 방식으로 운영합니다. 그다지 자주 내용물을 고치거나 새로 만들지 않기 때문에 오히려 정적으로 자원을 제공하는 것이 더 효율성 있기 때문입니다. 주 자원은 &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;라는 기능을 이용하여 제공하고, 가변하는 내용물인 댓글은 &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt;라는 서비스를 이용하여 본문에서 분리해서 운영합니다.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Django로 생성한 프로젝트를 Django 프로젝트라 하고, Django 프로젝트는 뭔가를 수행하는 기능 단위인 Django App을 모아놓은 좀 더 큰 단위입니다.&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 27 Apr 2015 04:00:49 +0900</pubDate>
        <link>http://blog.hannal.com//2015/04/start_with_django_webframework_06/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/04/start_with_django_webframework_06/</guid>
        
        <category>django</category>
        
        <category>static file</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
      <item>
        <title>예전엔 말이야</title>
        <description>&lt;p&gt;요즘,&lt;br&gt;
대화 중에 옛날에 이런 게 있었다거나 이게 10년 전에는 이러했다거나 처음 이 일을 시작한 게 20년 전이라거나 또는 내 세대 때는 이러한 일이 있었는데 라는 표현을 자주 쓴다. 그런 표현을 무심코 내뱉다가 바로 아차!하며 표현을 바꾸려 하지만 이미 나간 말이라 거둘 방법이 없다. 꼰대스러워서 쓰지 않겠다고 매번 다짐하지만 어쩐지 갈수록 더 자주 쓰고 있다.&lt;/p&gt;

&lt;p&gt;이야기 주제에 초점을 맞추면 그만이다. &lt;strong&gt;묻지도 않은&lt;/strong&gt; 지난 경험을 말하는 건 향신료로 요리에 넣지 않은 재료의 맛과 향을 흉내내는 것과 다를 바 없다. 이야기 주제에 자신없기 때문에 나오는 방어 심리이다.&lt;/p&gt;

&lt;p&gt;겸손 여부는 문제 원인이 아니다. 난 아직 겸손하고 말고 할 수준도 못 될만큼 공부하고 경험하는 단계이다. 능력을 발휘해 돈을 벌고 누군가를 가르치기도 하지만, 내가 뛰어나서 그렇다기 보다는 현재 내 능력이 필요한 이들이 있어 기여하고, 내 경험과 지식 수준이 필요한 이들이 있어서 가르칠 수 있기 때문이라고 여긴다. 세상엔 다양성이 존재하니까.&lt;/p&gt;

&lt;p&gt;고민한 끝에 몸과 마음에 여유가, 그리고 생활에 잉여가 부족하기 때문이라는 결론을 내렸다. 각 대상에 대해 많이 생각하지 못하고 경험도 부족하니, 대상의 본질에 대해 생각을 표현하지 못하고 자꾸 과거 경험치를 꺼내는 것이다.&lt;/p&gt;

&lt;p&gt;더이상 꼰대스러운 행동이나 말투, 생각이 내 안에서 일어나는 걸 용납하지 않겠다. 건강과 여유보다 중요하지 않은 일을 줄여야겠다. 잉여를 되살려 경험과 관점을 깊고 풍부하게 만드는 데 쓰겠다. &lt;/p&gt;
</description>
        <pubDate>Sun, 05 Apr 2015 08:57:49 +0900</pubDate>
        <link>http://blog.hannal.com//2015/04/kill-once_upon_a_time/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/04/kill-once_upon_a_time/</guid>
        
        <category>잉여</category>
        
        <category>꼰대스러움</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>Python 3에서 함수의 키워드 인자 강제와 주석문</title>
        <description>&lt;p&gt;Python 3에 도입된 함수 선언 문법 중 키워드 인자를 강제하는 방법과 주석문(&lt;code&gt;annotation&lt;/code&gt;)이 있다. Python의 매력 요소 중 하나가 깔끔하고 명료한 코드라 생각하는데, 이 두 문법은 기호를 남발하는 코드처럼 보여서 좀 불만스럽지만 코드 문맥(context)을 읽는 데엔 참 유익하다. 그나마 &lt;code&gt;$&lt;/code&gt; 기호가 사용되는 건 아니라서 다행이랄까?! :)&lt;/p&gt;

&lt;h3&gt;위치 인자 개수 지정&lt;/h3&gt;

&lt;p&gt;Python은 함수 매개 인자 방식으로 위치 인자(positional argument)와 키워드 인자(keywords argument)를 지원한다. 위치 인자는 함수로 전달하는 매개 인자를 순서대로 나열하는 것이고, 키워드 인자는 인자 이름과 인자에 할당할 값을 특정하는 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def args_func(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

args_func(&amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;!&amp;#39;)
args_func(&amp;#39;!&amp;#39;, arg3=&amp;#39;hello&amp;#39;, arg2=&amp;#39;world&amp;#39;)
args_func(&amp;#39;world&amp;#39;, arg3=&amp;#39;!&amp;#39;, arg2=&amp;#39;hello&amp;#39;)
args_func(&amp;#39;hello&amp;#39;, &amp;#39;!&amp;#39;, arg3=&amp;#39;world&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드에서&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;args_func(&amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;!&amp;#39;)&lt;/code&gt;는 &lt;code&gt;hello world !&lt;/code&gt;를 출력하고,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args_func(&amp;#39;!&amp;#39;, arg3=&amp;#39;hello&amp;#39;, arg2=&amp;#39;world&amp;#39;)&lt;/code&gt;는 &lt;code&gt;! world hello&lt;/code&gt;를 출력한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args_func(&amp;#39;world&amp;#39;, arg3=&amp;#39;!&amp;#39;, arg2=&amp;#39;hello&amp;#39;)&lt;/code&gt;는 &lt;code&gt;world hello !&lt;/code&gt;를 출력하며,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args_func(&amp;#39;hello&amp;#39;, &amp;#39;!&amp;#39;, arg3=&amp;#39;world&amp;#39;)&lt;/code&gt;는 &lt;code&gt;hello ! world&lt;/code&gt;를&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;출력한다. 위치 인자, 키워드 인자 순서로 전달만 하면 어떤 인자를 위치 인자로 전달하고, 어떤 인자를 키워드 인자로 전달하는지에 별다른 제한은 없다.&lt;/p&gt;

&lt;p&gt;Python 3는 키워드 인자를 강제하는 문법을 지원한다. 바로 &lt;code&gt;*&lt;/code&gt; 문자를 쓰는 것이다&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def args2_func(arg1, *, arg2, arg3):
    print(arg1, arg2, arg3)

args2_func(&amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;!&amp;#39;)
args2_func(&amp;#39;!&amp;#39;, arg3=&amp;#39;hello&amp;#39;, arg2=&amp;#39;world&amp;#39;)
args2_func(&amp;#39;world&amp;#39;, arg3=&amp;#39;!&amp;#39;, arg2=&amp;#39;hello&amp;#39;)
args2_func(&amp;#39;hello&amp;#39;, &amp;#39;!&amp;#39;, arg3=&amp;#39;world&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; 이후에 나열된 매개 인자는 반드시 키워드 인자로 전달돼야 한다. 위 코드에서 &lt;code&gt;args2_func&lt;/code&gt; 함수를 실행하는 네 개 실행 줄 중 첫 번째와 네 번째는 &lt;code&gt;TypeError&lt;/code&gt; 예외가 일어난다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: args2_func() takes 1 positional argument but 3 were given
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉, &lt;code&gt;args2_func&lt;/code&gt; 함수는 위치 인자를 1개 취하는데, 이 개수보다 많은 인자가 위치 인자로 전달되었다는 뜻이다.&lt;/p&gt;

&lt;p&gt;그렇다면 &lt;code&gt;*&lt;/code&gt; 이전에 나열된 매개 인자를 키워드 인자로 값을 전달하면 어떻게 될까?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;args2_func(arg1=&amp;#39;hello&amp;#39;, arg2=&amp;#39;world&amp;#39;, arg3=&amp;#39;!&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아무 문제도 발생하지 않는다. 즉, &lt;code&gt;*&lt;/code&gt;는 위치 인자 개수를 특정하거나(exact) &lt;code&gt;*&lt;/code&gt; 앞에 나열된 인자를 위치 인자로 강제하는 것이 아니라 &lt;code&gt;*&lt;/code&gt; 이후에 나열되는 인자는 반드시 키워드 인자로 전달 받도록 강제하는 것이다. 만약 위치 인자를 단 한 개도 허용하지 않고자 한다면 다음과 같이 함수 매개 인자를 선언하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def kwargs_func(*, arg1, arg2, arg3):
    print(arg1, arg2, arg3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 함수는 모든 매개 인자를 키워드 인자로 전달해야 한다.&lt;/p&gt;

&lt;h3&gt;주석문 (annotation)&lt;/h3&gt;

&lt;p&gt;annotation 문법은 함수 매개 인자와 반환 값에 대한 주석(annotation)을 지정하는 것이다&lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def anno_func(arg1: str, arg2: &amp;#39;also str&amp;#39;, arg3: 1 is True) -&amp;gt; bool:
    print(arg1, arg2, arg3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;표현된 코드를 보면 마치 인자의 형(&lt;code&gt;type&lt;/code&gt;)을 지정하는 것 같지만, 실제로는 주석이기 때문에 인자의 형이 무엇이 되든 영향을 받지 않아서 다음과 같이 함수를 호출해도 아무 문제가 발생하지 않는다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;anno_func(1, True, &amp;#39;world&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;반환하는(return) 값의 형도 주석으로 설명한 것과 달라도 무방하다. &lt;code&gt;anno_func&lt;/code&gt;은 주석으로 반환 값을 &lt;code&gt;bool&lt;/code&gt;이라 명기했지만, 실제로는 &lt;code&gt;return&lt;/code&gt;문이 따로 없기 때문에 &lt;code&gt;None&lt;/code&gt; 값을 반환한다. 물론, 아무 문제도 없다.&lt;/p&gt;

&lt;p&gt;이렇게 지정한 주석은 함수 객체에 &lt;code&gt;__annotations__&lt;/code&gt; 속성에 담겨 있으며, 사전형(&lt;code&gt;dict&lt;/code&gt;) 객체이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;print(anno_func.__annotations__)
print(anno_func.__annotations__[&amp;#39;arg1&amp;#39;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;재밌는 점은 &lt;code&gt;__annotations__&lt;/code&gt;에는 주석으로 지정한 값(&lt;code&gt;value&lt;/code&gt;)이 그대로 할당되어 있다는 점이다. 이 점을 이용하면 함수 매개 인자를 특정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def static_args_func(arg1: str, arg2: str, arg3: int) -&amp;gt; bool:
    args = locals()
    for _k, _v in args.items():
        arg_type = static_args_func.__annotations__[_k]

        if isinstance(_v, arg_type):
            continue

        raise TypeError(
            &amp;quot;The type of &amp;#39;{}&amp;#39; does not match &amp;#39;{}&amp;#39; type&amp;quot;.format(
                _k, arg_type.__name__
            )
        )
    print(arg1, arg2, arg3)

static_args_func(1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;static_args_func&lt;/code&gt; 함수의 &lt;code&gt;arg1&lt;/code&gt;, &lt;code&gt;arg2&lt;/code&gt; 인자는 주석으로 &lt;code&gt;str&lt;/code&gt;형을 명기했다. 그래서 사전형 속성인 &lt;code&gt;__annotations__&lt;/code&gt;의 &lt;code&gt;arg1&lt;/code&gt;키에는 명기한 값인 &lt;code&gt;str&lt;/code&gt;이 할당되어 있다. &lt;code&gt;__annotations__&lt;/code&gt;에 할당되어 있는 주석 값을 이용해 &lt;code&gt;arg1&lt;/code&gt;과 같은 함수 매개 인자의 형을(&lt;code&gt;type&lt;/code&gt;) 검사한 것이 &lt;code&gt;if not isinstance(_v, arg_type):&lt;/code&gt; 부분이다.&lt;/p&gt;

&lt;p&gt;이 함수를 &lt;code&gt;static_args_func(1, 2, 3)&lt;/code&gt;와 같이 호출하면 &lt;code&gt;arg1&lt;/code&gt;과 &lt;code&gt;arg2&lt;/code&gt;에 대해 코드에서 지정한 &lt;code&gt;TypeError&lt;/code&gt; 예외가 일어난다.&lt;/p&gt;

&lt;p&gt;다음 코드는 가변 매개 인자도 형 검사를 한다. 더이상 형 검사를 하지 않는 위치부터 나머지 인자까지는 &lt;code&gt;Ellipsis&lt;/code&gt; 형(&lt;code&gt;...&lt;/code&gt;)을 썼다. 즉, 두 번째 인자까지는 형 검사를 하고, 이후 인자는 형 검사를 생략한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def type_checking_func(*args: (int, int, ...)):
    annotations = type_checking_func.__annotations__

    if (
        not isinstance(annotations, dict) or
        len(annotations) == 0
    ):
        return type_checking_func(*args)

    try:
        _check_index = annotations[&amp;#39;args&amp;#39;].index(Ellipsis)
    except ValueError:
        _check_index = len(annotations) - 1

    for i, _v in enumerate(args[:_check_index]):
        arg_type = annotations[&amp;#39;args&amp;#39;][i]

        if isinstance(_v, arg_type):
            continue

        raise TypeError(
            &amp;quot;The type of &amp;#39;{}&amp;#39; does not match &amp;#39;{}&amp;#39; type&amp;quot;.format(
                _v, arg_type.__name__
            )
        )
    print(*args)

type_checking_func(1, 2, &amp;#39;3&amp;#39;, &amp;#39;a&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인자의 형을 검사하는 기능을 장식자(&lt;code&gt;decorator&lt;/code&gt;)로 만들어서 여러 함수에 간편하게 사용하면 더 낫다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def check_argument_type(func):
    def wrapper(*args):
        annotations = func.__annotations__
        if (
            not isinstance(annotations, dict) or
            len(annotations) == 0
        ):
            return func(*args)

        try:
            check_index = annotations[&amp;#39;args&amp;#39;].index(Ellipsis)
        except ValueError:
            check_index = len(annotations[&amp;#39;args&amp;#39;]) - 1

        for _i, _v in enumerate(args[:check_index]):
            _arg_type = annotations[&amp;#39;args&amp;#39;][_i]

            if isinstance(_v, _arg_type):
                continue

            raise TypeError(
                &amp;quot;The type of &amp;#39;{}&amp;#39; does not match &amp;#39;{}&amp;#39; type&amp;quot;.format(
                    _v, _arg_type.__name__
                )
            )
        return func(*args)
    return wrapper

@check_argument_type
def hello_func(*args: (int, int, ...)):
    print(*args)

hello_func(1, 2, &amp;#39;3&amp;#39;, &amp;#39;a&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python스러운 구현인 지 아닌 지 모르겠지만, 함수 매개 인자가 어떤 자료형으로 넘어올 지 몰라서 받는 스트레스는 줄어들 것 같다. :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/hannal/12597a1466307f4290a4&quot;&gt;Python 3에서 함수의 키워드 인자 강제와 주석문 예제 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3102/&quot;&gt;PEP-3102 : Keyword-Only Arguments&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3107/&quot;&gt;PEP-3107 : Function Annotations&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 22 Mar 2015 01:50:49 +0900</pubDate>
        <link>http://blog.hannal.com//2015/03/keyword-only-arguments_and_annotations_for_python3/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/03/keyword-only-arguments_and_annotations_for_python3/</guid>
        
        <category>Python 3</category>
        
        <category>위치 인자</category>
        
        <category>positional arguments</category>
        
        <category>키워드 인자</category>
        
        <category>keyword-only arguments</category>
        
        <category>annotation</category>
        
        
        <category>devlife</category>
        
      </item>
    
  </channel>
</rss>
