<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kay on the rails</title>
    <description>Kay as known as Hannal walks on the rails
</description>
    <link>http://blog.hannal.com//</link>
    <atom:link href="http://blog.hannal.com//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 22 Feb 2015 21:59:52 +0900</pubDate>
    <lastBuildDate>Sun, 22 Feb 2015 21:59:52 +0900</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>개발 생활 - 2</title>
        <description>&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-01/&quot;&gt;개발 생활 - 1&lt;/a&gt; : PDF 문서 생성 서버&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-02/&quot;&gt;&lt;code&gt;개발 생활 - 2&lt;/code&gt;&lt;/a&gt; : 연산된 데이터 수집 작업자&lt;/li&gt;
&lt;li&gt;개발 생활 - 3 : 전자우편 알림 서버&lt;/li&gt;
&lt;li&gt;개발 생활 - 4 : Python과 Django 강의&lt;/li&gt;
&lt;li&gt;개발 생활 - 5 : 공부 자료&lt;/li&gt;
&lt;li&gt;개발 생활 - 6 : 앞으로 계획&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;2. 개발 프로젝트&lt;/h3&gt;

&lt;h4&gt;2-2. 연산된 데이터 수집 작업자&lt;/h4&gt;

&lt;h5&gt;개요&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://www.rsquare.co.kr&quot;&gt;부동산 다이렉트&lt;/a&gt;의 데이터베이스엔 사무실이나 건물 정보가 많이 등록되어 있다. 각 사무실과 건물을 구성하는 속성도 세세하게 등록되고 관리되어, 많은 검색 조건을 조합해 고객이 원할만한 매물을 검색한다.&lt;/p&gt;

&lt;p&gt;그런데 검색 조건 중에는 별도 연산이 필요한 조건이 있다. 예를 들어, 300평짜리 사무실을 찾는다고 했을 때, 면적만 놓고 보면 다음과 같은 경우가 가능하다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;단일층 : 단일층이 300평인 경우.&lt;/li&gt;
&lt;li&gt;연층 또는 연속층 : 층이 분할되어도 되지만 층은 연속되어야 하는 경우.&lt;/li&gt;
&lt;li&gt;복수층 : 여러 층이어도 되고 층이 꼭 연속되지 않아도 되는 경우.&lt;/li&gt;
&lt;li&gt;분할층 : 한 층을 여러 사무실로 분할하였고, 이 중 1개 이상 사무실이 다른 층과 연속되는 경우.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;복수층이나 연층, 분할층인 경우, 몇 개 층까지 분할이어도 되는지, 즉 2~3개인데 연속층으로 총 300평인 사무실을 찾는 검색 조합도 가능하다.&lt;/p&gt;

&lt;p&gt;내가 두 번째로 맡은 프로젝트는 바로 연층이나 복수층을 빠르고 정확하게 검색하는 기능을 구현하는 것이었다. 이런 검색 기능은 SQL Query만으로 처리하기에는 연산 비용이 크다. 나는 SQL Query만으로 이런 검색을 아주 빠르게 처리하는 방법을 모른다.&lt;/p&gt;

&lt;h5&gt;개발 환경&lt;/h5&gt;

&lt;p&gt;내가 이 프로젝트를 맡겠다고 한 이유는 특정 검색을 위해 미리 계산된 데이터를 구축하고 이 구축한 데이터 안에서 검색하면 쉽고 빠르겠다는 생각이 떠올랐고, 이를 직접 실현하고 싶었기 때문이다. 결자해지.&lt;/p&gt;

&lt;p&gt;사무실이나 빌딩은 분야 특성상 데이터가 생성되거나 수정되는 빈도가 높진 않다. 더구나 부동산 다이렉트는 사람이 일일이 사무실이나 건물을 확인하여 허위 매물을 걸러내기 때문에 데이터 변화 빈도가 아주 높진 않다. 빈도가 높지 않다라는 말은 초 단위로 데이터가 수 백 수 천 개가 쌓이거나 변경되진 않는다는 뜻이다.&lt;/p&gt;

&lt;p&gt;이런 이유로 애초에 개발 언어는 Python으로 결정했다. DBMS 외 부분에서 연산을 Python이 하더라도 충분히 빠르고, 개발 생산성이 좋고, 무엇보다 내게 익숙한 언어이기 때문이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;언어 : Python 2.7&lt;/li&gt;
&lt;li&gt;사용 라이브러리, 프레임워크

&lt;ul&gt;
&lt;li&gt;ORM : &lt;a href=&quot;http://www.sqlalchemy.org/&quot;&gt;SQLAlchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;반복 예약 처리 : &lt;a href=&quot;https://pypi.python.org/pypi/schedule&quot;&gt;schedule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;schedule&lt;/code&gt;은 Linux나 Unix의 &lt;code&gt;crontab&lt;/code&gt; 역할을 하는 라이브러리이다. &lt;a href=&quot;http://www.celeryproject.org/&quot;&gt;Celery&lt;/a&gt;의 &lt;a href=&quot;http://celery.readthedocs.org/en/latest/userguide/periodic-tasks.html&quot;&gt;Periodic Tasks&lt;/a&gt; 기능을 채택할 지 고민하기도 했지만 일정 주기로 작업자를(worker) 호출해 정해진 작업(task)을 수행하는 정도에 쓰기엔 거창하다 생각했다. 직접 구현하기에도 간단한 기능이지만, 많은 사람이 이미 사용하여 검증된 &lt;code&gt;schedule&lt;/code&gt; 라이브러리를 도입했다.&lt;/p&gt;

&lt;h5&gt;개발 과정&lt;/h5&gt;

&lt;p&gt;이 프로젝트는 시작부터 확장성과 이전성(migration)을 고려했다. 이전 가능성은 Python 3로 이전하는 걸 염두에 두는 것이고, 확장성은 연층 검색 뿐만 아니라 다른 검색 조건에 대응하는 작업(task) 처리 구조로 만드는 것이다.&lt;/p&gt;

&lt;p&gt;프로젝트는 검색 편의를 돕는 역할이어서 편의점(convenient store)이라고 이름지었다. 그리고 각 구성물도 편의점과 연관된 용어를 썼다. 로직을 상상할 때 실제 사람이 매장에서 일하는 모습이 떠올라 재밌어서 지루하지도 않고 개념을 다루기에도 좋았다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;매장 : 검색 조건과 관련된 작업을 정의한 모듈(module).

&lt;ul&gt;
&lt;li&gt;점원 : 검색 데이터를 수집하고 연산하는 작업자(controller).&lt;/li&gt;
&lt;li&gt;창고 : DB 관련 작업을 처리하는 모델(model).&lt;/li&gt;
&lt;li&gt;본사 직원 : 검색용 데이터를 쌓은 테이블에서 데이터를 검색하는 SQL Query 인터페이스. API Server용이며 Go 언어로 작성.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;매장 관리자 : 신규 매장이 등록되면 가동하고, 기존 매장이 변동되면 그 내용을 반영하여 재가동하는 프로세스 관리자.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;난 연층 검색을 위한 데이터를 다루는 첫 번째 매장을 만드는 셈인데, 구조도 정해놓은 규칙으로 클래스와 설정 파일 등을 만들어 창고, 본사 직원으로 구성하고, 이 Python 패키지를 매장(&lt;code&gt;store&lt;/code&gt;) 디렉터리에 넣는다. 매장 관리자는 곧 이를 감지하여 메모리에 적재하여 매장을 개장하고 영업을 개시한다. 그래서 코드가 변경되더라도 편의점 프로세서는 중단되지 않고 계속 작업을 처리한다. 즉, 검색봇을 쉽게 추가하고 변경하면서도 무중단 서비스가 가능한 설계를 구상했다.&lt;/p&gt;

&lt;p&gt;이는 반만 구현해냈는데, 병렬 처리를 위한 구조로 만들지 않았기 때문이다. 게다가 신규 매장을 만드는 일 자체가 그 이후 없었기 때문에 결국 필요없는 작업을 하느라 일주일을 써버린 셈이 되었다. 소득이라면 연결과 분리(pluggable) 가능한 모듈을 어떻게 작성하고 구조를 잡아야 하는 지 고민하고 경험하여 다음 프로젝트에 도움이 됐다는 점이다.&lt;/p&gt;

&lt;p&gt;여러 층을 조합하여 면적을 산출하여 DB 테이블에 데이터를 넣는다면, 어떤 조합까지 연산하여 DB에 넣을 것인지 고민해야 한다. 연층은 기본이다. A건물에 3, 4, 6, 8, 9, 10층 사무실이 공실인 경우,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3,4층&lt;/li&gt;
&lt;li&gt;8, 9층&lt;/li&gt;
&lt;li&gt;9, 10층&lt;/li&gt;
&lt;li&gt;8, 9, 10층&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 조합을 뽑아내어 면적 등을 합해야 한다. 하지만, 연속되지 않은 복수층은 난감했다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3, 6층, 3, 8층, 3, 9층, 3, 10층&lt;/li&gt;
&lt;li&gt;3, 4, 6층, 3, 4, 8층, 3, 4, 9층, 3, 4, 10층, ...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;연속되지 않은 복수층은 이와 같이 조합 가능한 경우의 수가 무척 많다. 건물에 사무실이 많은 큰 건물인 경우 수 억 가지 조합이 발생했다. 회사에 등록된 전체 건물을 대상으로 계산해보니 수십 억 건이 넘는 조합이 나왔다. 각 조합이 DB의 항목(&lt;code&gt;row&lt;/code&gt;)이므로 “오, 나도 좀 큰 데이터 좀 다루는 건가!?”하는 시덥잖은 생각이 들기도 했다.&lt;/p&gt;

&lt;p&gt;실제로 갓 완공되어 20여 개 층이 임대 가능한 건물이 있었는데, 이 건물의 20개 사무실에 대해 조합 가능한 경우의 수는 263,644,104가지이다. 그리고, 공실이 30개 이상인 건물도 몇 개 있었다. 이런 경우(case)는 양이 너무 많아 시간이 오래 걸렸다. 느려서 Go언어나 C언어로 짜서 시간을 몇 십배 줄여봤지만, 수에는 어쩔 도리가 없었다. 결국, 연속되지 않은 복수층은 사전에 연산하여(pre-operated) 데이터 테이블에 넣는 방법 대신 매 질의(query) 때마다 연산하기로 했다.&lt;/p&gt;

&lt;p&gt;건물이나 사무실에 변동이 생기면 이를 감지하는 건 &lt;a href=&quot;http://www.mysqltutorial.org/mysql-triggers.aspx&quot;&gt;DBMS의 Trigger&lt;/a&gt; 기능으로 구현하려 했다. 지정한 이벤트가 일어나면 관련 내용을 트럭에 쌓아두고, 점원이 트럭에 쌓인 작업물을 꺼내어 연산하는 식이다. 여기서 트럭이란 Task queue를 의미한다. 하지만, &lt;a href=&quot;http://aws.amazon.com/ko/rds/&quot;&gt;AWS RDS&lt;/a&gt;에서 운영 중인 DB에서는 Trigger가 동작하지 않았다. &lt;a href=&quot;https://techtavern.wordpress.com/2013/06/17/mysql-triggers-and-amazon-rds/&quot;&gt;MySQL, Triggers and Amazon RDS&lt;/a&gt; 글에 따르면 가능하긴 한데, 내키진 않았다. 마침 그 시기에 데이터베이스와 관련된 문제, 다분히 사람의 실수로 큰 문제가 생길 뻔한 상황을 겪어서 운영 중인 데이터베이스에 안전한 설정이라도 변화를 주기 부담스러웠다.&lt;/p&gt;

&lt;p&gt;그래서 일정 시간마다 정보가 변경된 사무실을 검색하고, 있으면 그 사무실이 속한 건물의 검색 대상인 사무실들을 모두 가져와 연층을 연산하는 방식으로 구현 방법을 바꿨다. 건물에 속한 검색 대상 사무실을 모두 가져오는 이유는, 기존엔 연층 조합인 사무실인데 이 사무실이 계약되어 더이상 공실이 아닌 경우, 이 사무실과 연층으로 연결된 조합을 끊어야 하기 때문이다. 만약, 3, 4, 5층, 4, 5층 조합이 있는데 4층이 빠지면, 이 두 조합은 더이상 유효하지 않다.&lt;/p&gt;

&lt;p&gt;조합을 찾는 알고리즘은 Python에 이미 내장되어 있다. &lt;code&gt;itertools&lt;/code&gt; 모듈에 여러 함수가 있는데, 그 중에서 &lt;a href=&quot;https://docs.python.org/2/library/itertools.html#itertools.combinations&quot;&gt;combinations&lt;/a&gt;를 사용하면 건물에 속한 사무실을 조합 가능한 모든 경우를 한 줄로 산출해낸다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from itertools import combinations

_combinated = combinations((&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;,), 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 코드를 수행하면 &lt;code&gt;_combinated&lt;/code&gt;엔 &lt;code&gt;[(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;), (&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;), (&amp;#39;a&amp;#39;, &amp;#39;d&amp;#39;), (&amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;), (&amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;), (&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;)]&lt;/code&gt;이 이터레이션 객체로 할당된다. 편하긴 했는데, 같은 기능을 하는 코드를 Go언어와 C언어로 짤 때엔 알고리즘을 직접 구현해야 했다. 재밌긴 했지만, 알고리즘 문제(issue)는 어딘가 알고리즘스러운(?) 코드로 짜고 싶은 욕심이 생겨서 스트레스를 받게 된다. 왜냐하면 알고리즘 자체가 모든 걸 해결해주는 은총알이 아니기 때문이다.&lt;/p&gt;

&lt;p&gt;이 조합(&lt;code&gt;combinations&lt;/code&gt;)은 연속 여부와는 관계없이 조합하는 경우이다. 즉, 연층과 연속하지 않은 복수층 모두를 포함한다. 여기에서 연속층 조합은 따로 연산해야 한다. 그리고, 사무실이 언제나 한 층에 하나만 있진 않아서 다음과 같은 조합도 염두에 둬야 한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3층 전체&lt;/li&gt;
&lt;li&gt;401호, 402호, 403호, 405호&lt;/li&gt;
&lt;li&gt;501호&lt;/li&gt;
&lt;li&gt;6층 전체&lt;/li&gt;
&lt;li&gt;8층 전체&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 경우, 단순히 4, 5, 6층이 아니라 401호, 5, 6층이나 401, 402호, 5층과 같은 조합도 연층으로 연산해야 한다. 그리고, 지하는 층 숫자가 -1, -2와 같이 음수로 입력이 되어 있어서, 지하 1층, 1층, 2층과 같은 연속층은 층 숫자만으로는 연속되지 않는다. -1, 1, 2가 되기 때문이다.&lt;/p&gt;

&lt;p&gt;이런 저런 예외 상황을 고려하니 기존에 알려진 &lt;a href=&quot;http://ghebook.blogspot.kr/2010/10/permutation-combination.html&quot;&gt;순열(順列, permutation)과 조합(組合, combination)&lt;/a&gt; 알고리즘으로는 내게 필요한 조합을 도출할 수 없었다. 촌철살인 같은 알고리즘으로 멋지게 문제를 해결하고 싶었지만 결국 2중 for문으로 일일이 조합을 연산하여 해결했다.&lt;/p&gt;

&lt;p&gt;Python으로 검색용 사전 연산된 데이터를 탐색하고 구축하는 기능을 구현한 후, Go 언어로 작성된 API Server가 해당 DB 테이블에서 데이터를 질의(query)하는, 실제 검색하는 코드를 작성하는 단계로 넘어갔다. 수행은 다음 단계로 진행한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;연층 데이터 테이블에서 요청받은 연층 조건에 해당하는 건물을 찾는다.&lt;/li&gt;
&lt;li&gt;이 건물 목록을 대상으로 다른 검색 조건으로 검색한다. (예 : 보증금, 임대료, 24시간 개방 여부 등)&lt;/li&gt;
&lt;li&gt;클라이언트에게 반환할 건물 항목마다 해당 건물의 연층 데이터를 추가한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSON&lt;/code&gt;으로 반환한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;연층, 즉 사무실 연속 연결 관계를 미리 연산하여 각 조합을 DB 테이블에 넣어두었으니 당연히 1번 과정은 빠르게 처리돼서(평균 0.01 이하) 기존 검색 수행 속도에 별 영향을 주지 않았다. 만족스러웠다.&lt;/p&gt;

&lt;p&gt;약 한 달 동안 개발했다. 1주일은 분석하고 조사하는 데, 1주일은 Python으로 개발하는 데, 10여일은 테이블 구조를 변경하고 재구축하는 삽질하는 데, 나머지 며칠은 Go 코드 작성하는 데 썼다. 이후 한 차례 정도 고생하고, 자잘하게 손 보는 일은 있었지만, 대체로 사고없이 동작하고 있다.&lt;/p&gt;

&lt;h5&gt;우여곡절&lt;/h5&gt;

&lt;p&gt;미리 연산한 데이터를 구축하는 기능을 만들다보니 데이터 집합을 재구성하는 데 시간이 많이 소요되는 문제가 몇 번 있었다. 조합 하나를 처리하는 데 0.5초가 소요되는데, 순수 연산 시간 자체는 얼마 안 걸리고 대부분 DB I/O에 시간이 소요된다. 사무실이나 건물에 변동이 생겨서 해당 건에 대해서만 연층 정보를 DB에 반영하는 건 양이 많지 않아서 몇 초에서 몇 분 안에 처리가 끝나지만, 전체 연층 조합을 처음 구성하는 초기화 또는 전체 재구성을 하는 경우엔 시간이 너무 오래 걸렸다. 실제로 사소한 산술 오류가 생기거나 테이블 구조가 변경되어 전체 데이터를 재구성하는 경우가 몇 번 있었는데, 그때마다 몇 시간씩 재구성이 끝날 때까지 기다려야 했다.&lt;/p&gt;

&lt;p&gt;DB Commit 시기를 조정해보며 어떡해서든 DB I/O 시간을 줄이려 했지만, 병렬 처리를 하지 않는 이상 어쩔 수 없었다. 더도 말고 CPU Core 수만큼만 병렬 처리해도 시간은 크게 단축됐다. 하지만, 이번에도 나는 코드를 병렬 수행을 염두에 두지 않고 작성했다. 정확한 계산을 하려고 각 연산 과정을 잠가서(locked) 수행했고, SQLAlchemy도 처음 사용하다보니 세션이 꼬여서 DB 연결에 문제가 발생하기도 했다. 이 일을 계기로 동시성과 병렬성 문제를 직접 체험하였고, 이론으로 접하던 상황이나 해결책을 좀 더 이해하게 되었다. 역시 게임 규칙에 걸려서 얻어 맞으면 곧바로 게임 규칙을, 적어도 내게 고통을 야기하는 게임 규칙만큼은 빠르게 이해하는 법이다.&lt;/p&gt;

&lt;p&gt;연속되지 않은 복수층을 검색하는 기능은 예상보다 힘들고 어려웠다. DB에 모든 조합을 넣기엔 양이 너무 많아서 그때 그때 연산을 하려 했는데,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;산술 연산이 생각보다 까다롭고&lt;/li&gt;
&lt;li&gt;이 산술 연산을 SQL Query문으로 표현하는 것이 어려웠다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;예를 들어, 두 개에서 여덟 개 층으로 250~400평에 해당하는 건물을 찾는다고 가정해보자. 32평씩 여덟 개 층 조합도 조건을 만족하고, 200평 두 개 층도 조건을 만족한다. 즉, 최소, 최대 층 개수와 최소, 최대 면적을 이용하면 된다.&lt;/p&gt;

&lt;p&gt;문제는 여기에 다른 조건이 추가되는 것이다. 이 조건에서 월 고정비가 2,000~3,500만원을 추가하면 연산이 복잡해진다. 실제로는 여기에 그치지 않고 보증금 조건도 추가된다. 조합이 다(many) 대 다(many) 대 다(many)로 연결되는데, 각 요소가 교집합(AND)이 아니라 차집합 연산도 필요하다. 교집합으로만 연산하면 검색 결과가 아주 적어지는데, 최대면적/최소층개수, 최소면적/최대층개수 등 그룹 중 어느 하나라도 조건을 만족하지 않으면 연관된 조건 전체가 성립되지 않기 때문이다. 즉, A건물이 32평씩 여덟 개 층이 있고 200평 두 개는 없으면 이 건물은 검색 대상이 돼야 하는데, 모든 조건을 교집합으로 연산하면 A건물은 검색 대상에서 빠지는 것이다. 그렇다고 이 둘을 합집합(OR)으로 연산해서도 안 된다. 보증금이나 월 고정비와 같은 다른 조건식과 조합할 때 조합 경우의 수가 너무 많아져서 연산하는 데 시간이 오래(몇 배에서 몇 십 배) 걸린다.&lt;/p&gt;

&lt;p&gt;이를 의사(pseudo) 코드로 작성했을 땐 비교적 간단하게 답을 찾았다. 문제는 SQL Query로 표현하는 것이었다. 몇 시간을 끙끙댔지만 결국 제대로 동작하는 Query문을 작성하지 못했다. 다행히 동료 개발자가 한 시간도 안 되어 문제를 해결해 주었다. &lt;code&gt;Union&lt;/code&gt;을 사용했는데, 생각보다 빠르게 수행되었다.&lt;/p&gt;

&lt;p&gt;여러 검색 조건이 조합된 복수층 검색을 구현할 때 겪은 어려움 중 하나는 검색 결과가 유효한 것인지를 판단하기 어렵다는 점이었다. SQL Query문을 조금 고치자 검색된 데이터가 달라졌는데, 매번 일일이 제대로 검색된 것인지 데이터를 확인할 수는 없었다. 하지만, 제대로 된 테스트 케이스를 만들지 않아서 “할 수는 없는” 그 일을 실제로 해야만 했다. 면적 조건은 만족하고 보증금 조건도 만족하고 월 고정비도 만족하는 것 같은데, 자세히 살펴보니 월 고정비에서 몇 만원 차이로 조건을 만족시키지 않는 경우가 있다. 이는 암산으로 유효한 결과인지 검증해서는 안 된다는 걸 뜻한다. 그렇다고 하나 하나 계산기를 두드리기엔 사람은 너무 느리다.&lt;/p&gt;

&lt;p&gt;검색된 결과에서 조건에 해당하지 않는 데이터를 찾는 건 그래도 낫다. 검색 결과에 포함되지 않는 수많은 데이터는 막막하다. 검색 결과에 포함돼야 하는데, 포함되지 않은 경우 대체 어떻게 이 사실을 알아내야 할까? 테스트 시나리오를 만들어서 검색될 수 밖에 없는 데이터를 대상으로 검색 조건을 돌리는 것이다.&lt;/p&gt;

&lt;p&gt;테스트 케이스를 작성하지 않아 고통이 증폭되고, 도저히 견딜 수 없겠다 싶은 시점 직전에 모든 문제를 해결했다. 아마 느리디 느리고 부정확한 사람의 연산 능력으로 검색 결과 데이터를 검증하는 일을 몇 번 더 했더라면 진행하던 일을 중단하고 테스트 케이스부터 작성했을 것이다.&lt;/p&gt;

&lt;h5&gt;정리&lt;/h5&gt;

&lt;p&gt;목표치는 모두 달성했다. 이 프로젝트 이후 나는 Python 3에 정착하였고, Python 2.7용으로 작성한 소스도 비교적 간단히 Python 3용 코드로 전환된다. 불필요한 사양이 좀 있긴 하지만, 어쨌든 확장성과 유연성이 있는 설계와 구조로 동작한다.&lt;/p&gt;

&lt;p&gt;이번 프로젝트를 진행하면서 전업 프로그래머가 된 이래 비로소 내가 하고 싶은 일과 만들고 싶은 일을 어떻게 해야할 지 방향을 잡았다. 이 프로젝트를 마치고 나는 곧바로 수학 공부를 중등 과정부터 다시 시작했으며, 알고리즘과 데이터 구조, 프로그램 구조 공부를 시작했다. 비동기와 병렬성, 그리고 데이터 처리도 물론 내가 공부할 분야이지만, 일단은 좀 더 여유를 두고 파기로 했다.&lt;/p&gt;

&lt;p&gt;기능에 대한 유닛 테스트가 필요하다는 건 생각만 했지 실제로는 잘 실천하지 않았는데, 데이터를 다루면서 유닛 테스트가 반드시 필요하다는 걸 절실히 느꼈다. 데이터 연산에 사소한 연산 변화를 주더라도 예측을 크게 벗어나는 경우가 많았고, 이를 사람이 직관으로 검증하는 건 효율이 대단히 떨어진다.&lt;/p&gt;

&lt;p&gt;기계가 할 일을 사람이 해서는 안 된다. 기계가 할 일은 기계가 잘 하도록 맡겨 두고, 사람은 사람이 잘하는 일에 집중해야 한다.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Feb 2015 21:00:00 +0900</pubDate>
        <link>http://blog.hannal.com//2015/02/devlife-s1-02/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/02/devlife-s1-02/</guid>
        
        <category>Python</category>
        
        <category>데이터 처리</category>
        
        <category>SQLAlchemy</category>
        
        <category>AWS RDS</category>
        
        <category>병렬 처리</category>
        
        <category>유닛 테스트</category>
        
        <category>검색</category>
        
        <category>선처리 데이터</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>개발 생활 - 1</title>
        <description>&lt;p&gt;지난 8월 중순부터 취미로 하던 프로그래밍을 전업으로 하고 있다. 그동안 세 개 제품을 투입(release)했고, 하나는 비공개 시험 운영 중이며, 약 두 달 동안 강의를 하기도 했다. 지난 6개월을 돌이켜 본다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-01/&quot;&gt;&lt;code&gt;개발 생활 - 1&lt;/code&gt;&lt;/a&gt; : PDF 문서 생성 서버&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-02/&quot;&gt;개발 생활 - 2&lt;/a&gt; : 연산된 데이터 수집 작업자&lt;/li&gt;
&lt;li&gt;개발 생활 - 3 : 전자우편 알림 서버&lt;/li&gt;
&lt;li&gt;개발 생활 - 4 : Python과 Django 강의&lt;/li&gt;
&lt;li&gt;개발 생활 - 5 : 공부 자료&lt;/li&gt;
&lt;li&gt;개발 생활 - 6 : 앞으로 계획&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;1. 전업 결심&lt;/h3&gt;

&lt;p&gt;2014년 7월에 프로그래머로 전직을 결심했지만 막막하기만 했다. 여러 언어와 도구, 분야를 검토한 끝에 Python을 주 프로그래밍 언어로, 관심을 두고 꾸준히 다룰 언어로는 Go 언어를 정했다. 기준은 내가 하고 싶고 만들고 싶은 것에 필요하고 내 취향이나 성향에 맞는 지 여부이며, 급여 등은 판단 기준에 넣지 않았다.&lt;/p&gt;

&lt;p&gt;그러다 8월 중순에 &lt;a href=&quot;http://www.rsquare.co.kr&quot;&gt;부동산 다이렉트&lt;/a&gt;라는 회사에 서버 프로그래머로 합류했다.&lt;/p&gt;

&lt;h3&gt;2. 개발 프로젝트&lt;/h3&gt;

&lt;h4&gt;2-1. PDF 문서 생성 서버&lt;/h4&gt;

&lt;h5&gt;개요&lt;/h5&gt;

&lt;p&gt;이 프로젝트는 서버에 저장된 데이터를 제안서로 만들고, 이 제안서를 PDF 문서로 생성하는 기능을 만드는 것이었다. 기존에 Go 언어로 만들어 사용하는 서버가 있었는데 다음 요구사항을 구현해야 했고, 이 기능 구현을 내가 맡은 것이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;요구사항

&lt;ul&gt;
&lt;li&gt;여러 제안서를(PDF 파일) 하나로 묶어서 PDF 파일 하나로 만든다.&lt;/li&gt;
&lt;li&gt;DB에서 직접 데이터를 가져오던 기존 방식 대신 API Server에서 REST API로 데이터를 가져온다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;내가 정한 추가 목표치

&lt;ul&gt;
&lt;li&gt;웹 페이지에서 PDF 생성 버튼을 누르면 응답 화면을 먼저 보여주고, PDF 생성이 완료되면 따로 알려주어 사용성을 높인다.&lt;/li&gt;
&lt;li&gt;유연하고 빠르게 제안서 양식에 변화를 주어 생산성을 높인다.&lt;/li&gt;
&lt;li&gt;3주 안에 개발을 끝낸다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;개발 환경&lt;/h5&gt;

&lt;p&gt;제안서는 꽤 복잡한 구조(layout)였고 Google Map API도 사용해서 Javascript를 처리해야 했다. &lt;a href=&quot;http://wkhtmltopdf.org/&quot;&gt;wkhtmltopdf&lt;/a&gt;는 이런 복잡한 HTML를 PDF로 변환하는 데 가장 적합한 도구이다. Webkit 렌더러를 이용하여 웹브라우저가 HTML를 렌더링하는 방식으로 HTML 문서를 출력하고 이 문서를 PDF로 변환하기 때문에 우리에게 필요한 기능을 모두 제공했고, 이미 개발팀에서 사용하고 있기도 했다.&lt;/p&gt;

&lt;p&gt;하지만, wkhtmltopdf엔 PDF 파일들을 하나로 합치는 기능이 없다. 여러 도구를 살펴봤는데 &lt;a href=&quot;http://www.python.org&quot;&gt;Python&lt;/a&gt;용 라이브러리인 PyPDF 2가 적합했다. 그리고 내가 정한 추가 목표치를 달성하는 데에도 Python이 가장 적합했다. 그래서 PDF 문서 생성 서버는 Python을 이용해 새로 만들기로 결정했다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;언어 : Python 2.7&lt;/li&gt;
&lt;li&gt;사용 라이브러리, 프레임워크

&lt;ul&gt;
&lt;li&gt;웹 프레임워크 : &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PDF 병합 : &lt;a href=&quot;http://mstamy2.github.io/PyPDF2/&quot;&gt;PyPDF 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;백그라운드 처리 : &lt;a href=&quot;http://www.celeryproject.org/&quot;&gt;Celery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;웹 소켓 : &lt;a href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;개발 과정&lt;/h5&gt;

&lt;p&gt;막상 개발에 착수하자 시작부터 문제에 봉착했다. PyPDF 2는 wkhtmltopdf로 만든 PDF를 두 개 이상 병합하려 하면 &lt;code&gt;__WKANCHOR__&lt;/code&gt; 관련 오류가 발생하였다. wkhtmltopdf로 만든 PDF에 형성한 앵커의 ID가 PDF 마다 동일하게 만들어져서 이를 합칠 때 중복되어서(고유하지 않아서) 발생하는 문제 같다. wkhtmltopdf나 PyPDF 2 소스를 고쳐서 문제를 해결하려 했으나 시간이 여의치 않았다. 나는 여러 제안서를 HTML 문서 하나로 합치고, 이 합친 HTML 문서를 PDF로 변환하기로 했다. wkhtmltopdf에 여러 HTML 문서를 PDF 문서 하나로 병합해 생성하는 기능이 있긴 했으나, 결과물인 PDF 외양(layout)이 깨지는 문제가 발생하였다. 그리고, 백 개가 넘는 제안서를 하나로 합치는 상황을 터미널 콘솔에서 테스트하기 번거로웠다. 그래서 아예 하나로 합쳐진 HTML을 만드는 방법을 골랐다.&lt;/p&gt;

&lt;p&gt;API Server에서 제공하는 REST API로 데이터를 가져오는 건 &lt;a href=&quot;https://github.com/jcgregorio/httplib2&quot;&gt;httplib2&lt;/a&gt;를 이용했다. 대세인 HTTP 라이브러리인 &lt;a href=&quot;http://docs.python-requests.org/&quot;&gt;Requests&lt;/a&gt;를 사용하려 했으나 &lt;code&gt;HTTPS&lt;/code&gt; 통신이 잘 되질 않았다. 구현을 마친 나중에 안 사실이지만 이 문제는 HTTPS 인증서를 내가 잘못 사용해서 발생한 문제였다.&lt;/p&gt;

&lt;p&gt;API Server에서 가져온 데이터를 어떻게 구조화 할까 고민하다 &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;의 ORM을 흉내 내기로 했다. Django의 Model은 다음과 같이 데이터를 데이터베이스에서 가져온다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;building = Building.objects.get(id=3, status=&amp;#39;open&amp;#39;)

print building.name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;내가 만든 건 이런 모양이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;building = Building.filter(id=3, {&amp;#39;status&amp;#39;: &amp;#39;open&amp;#39;})

print building.name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;데이터베이스를 사용하지 않고 오직 REST API로 데이터를 가져오기 때문에 굳이 ORM처럼 만들 필요는 없었다. 데이터 모델 스키마는 API Server의 문서에 잘 나와 있기 때문에 문서 서버에서 모델을 정의하지 않아도 무방했다. Django ORM을 분석하면서 많이 배우긴 했지만 프로젝트 관리 관점에서 보면 초과 사양으로 보였다. 하지만, 자잘한 수정 사항이 매우 빈번하게 발생하자 그 나름대로 기준과 일관성이 있는 인터페이스 덕에 유연하게 대응할 수 있었다.&lt;/p&gt;

&lt;p&gt;1차 요구사항을 구현하고 나서 사용성을 높이는 단계로 넘어갔다. PDF 생성은 적지 않은 시간이 소요되기 때문에 이용자가 웹 페이지에서 PDF 생성 버튼을 누르면 한참 기다려야 했다. 만약 100장짜리 제안서를 PDF로 생성하는 경우 30~40분을 기다려야 하며, HTTP/1.x 특성상 연결이 끊기거나(Timeout) 연결에 문제가 생길 가능성이 높아진다. 그래서 PDF 생성은 백그라운드에서 별도 작업자가 처리하고, 생성이 완료되면 푸시로 이용자에게 알려주는 기능을 구현하기로 했다.&lt;/p&gt;

&lt;p&gt;Celery를 이용해 백그라운드로 처리하는 기능은 구현하긴 쉬웠다. 하지만, PyPDF 2의 PDF 병합 문제로 병합할 개별 PDF 문서를 분산해서 처리하지 않았기 때문에 비동기로 백그라운드에서 PDF 를 생성하는 역할로만 활용했다.&lt;/p&gt;

&lt;p&gt;웹 브라우저가 웹 소켓을 열어 웹 소켓 서버와 연결을 유지하고, PDF 생성이 완료되면 서버가 클라이언트인 웹 브라우저로 푸시 알림으 보내는 기능도 간단히 구현했다. gevent 라이브러리를 사용하는 &lt;a href=&quot;https://pypi.python.org/pypi/gevent-websocket/&quot;&gt;gevent-websocket&lt;/a&gt; 라이브러리를 이용하여 웹 소켓 서버를 만들었다. 처음엔 직접 구현하고 있었는데 때마침 열린 &lt;a href=&quot;http://www.pycon.kr/2014&quot;&gt;PYCON Korea 2014&lt;/a&gt;에서 정민영님이 발표한 &lt;a href=&quot;http://www.pycon.kr/2014/program/3&quot;&gt;제약을 넘어 : Gevent&lt;/a&gt;를 듣고 gevent와 gevent-websocket을 도입했다. 무척 간단했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from gevent import monkey
monkey.patch_all()

from geventwebsocket import (
    WebSocketServer,
    WebSocketApplication,
    Resource,
)

class TaskChecker(WebSocketApplication):
    # 작업 class
    pass

notifier_host = &amp;#39;localhost&amp;#39;
notifier_port = 9999

WebSocketServer(
    (notifier_host, notifier_port),
    Resource({&amp;#39;/&amp;#39;: TaskChecker})
).serve_forever()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;서버가 백그라운드에서 PDF를 생성하는 긴긴 시간 동안 이용자는 자신이 받을 제안서 PDF를 웹 화면으로 먼저 접하게 된다. 미리보기(preview) 역할을 하는 셈이다. 이용자에겐 별다른 기능이 없지만, 실제로는 제안서 HTML을 만드는 중요 역할을 한다. 이 웹 서버는 Flask를 이용해 만들었다. 내겐 Django가 더 익숙했지만, 경량 프레임워크이면서도 문서 서버의 웹 서버에 필요한 기능은 충분히 포함하고 있었고, Flask에 기본 탑재된 템플릿 엔진인 &lt;code&gt;jinja2&lt;/code&gt;의 문법이 Django의 템플릿 문법과 거의 동일해서 금방 적응했다.&lt;/p&gt;

&lt;p&gt;Flask는 참 좋은 프레임워크이다. PDF 생성과 병합하는 기능을 분석하고 구현하는 데 예상보다 많은 시간을 써서 시간에 쫓기는 상황이다보니 Flask 문서를 거의 읽지 않고 &lt;a href=&quot;http://www.stackoverflow.com&quot;&gt;Stackoverflow&lt;/a&gt;를 전전하며 개발했는데, 대부분 코드에서 기대하는 바가 의도하는 대로, 그리고 예상하는 대로 동작하였다. 구조도 명료해서 Flask 내부를 들여다 보기에도 좋았다.&lt;/p&gt;

&lt;h5&gt;우여곡절&lt;/h5&gt;

&lt;p&gt;이용자가 웹 브라우저에서 웹 소켓으로 푸시 알림 서버에 연결하면 이 알림 서버는 Redis 서버에 접속하여 Celery가 진행하고 있는 작업 상태를 추적한다. 작업이 끝나면(&lt;code&gt;celery.AsyncResult(id=task_id).status == &amp;#39;SUCCESS&amp;#39;&lt;/code&gt;) 푸시 알림 서버는 해당 작업(PDF 생성)에 대한 알림을 요청한 클라이언트들에게 생성된 PDF 파일을 내려 받는 URL을 반환한다. 웹 브라우저는 이 URL을 받으면 화면에 PDF 다운로드 버튼을 출력하고, 이용자는 이 버튼을 눌러 제안서 PDF를 받는 것이다.&lt;/p&gt;

&lt;p&gt;그래서 백그라운드 작업 처리 부분과 푸시 알림 서버를 연계해야 했는데, 테스트가 까다로웠다. 동시성이나 병렬성에 익숙하지 않다보니 지극히 직렬성 사고를 하여 코드나 로직을 직렬성을 전제로 작성했는데, 동기식 직렬성을 전제로 작성한 코드로 비동기 상황을 테스트 하려다 보니 상황을 재현하고 발생한 문제를 추적하기 용이하지 않았다. 작은 코드 변화만으로 작동 순서가 달라져 문제가 발생하기도 했다.&lt;/p&gt;

&lt;p&gt;wkhtmltopdf가 만든 PDF가 HTML 문서와 다르게 만들어지는 문제도 해결하기 참 까다로웠다. wkhtmltopdf이 Webkit을 사용하긴 하지만, Webkit을 사용하는 구글 크롬이나 애플 사파리과는 다르게 작동하는 부분이 꽤 많았다. 렌더러 버전 차이도 있고, 웹 브라우저 벤더마다 따로 맞춘 설정(customized)이 문제였다.&lt;/p&gt;

&lt;p&gt;글자 간격이나 틀(layout)이 틀어지는 건 그나마 간단했다. &lt;a href=&quot;http://blog.hannal.com/2014/9/letter_overlap_problem_on_wkhtmltopdf/&quot;&gt;HTML DOM 요소들이 미쳐 날뛰듯이 뒤엉키는 문제&lt;/a&gt;는 해결하기 무척 힘들고 어려웠다. 이 문제가 오직 wkhtmltopdf로 생성한 PDF에서만 발생했고, HTML 문서와는 달리 PDF 문서는 요소를 검사(inspect)할 마땅한 방법이 없었기 때문이다. HTML과 CSS의 여러 속성과 항목을 하나하나 고치고 wkhtmltopdf로 PDF를 생성해 결과 화면을 보며 문제 원인을 추적해야 했다. 디버깅 할 때 중단점(breaking point)을 찍고선 진행 과정을 한 단계씩 추적하듯이, wkhtmltopdf가 PDF 문서를 생성하는 과정을 하나 하나 추적할 수 있었다면 얼마나 좋았을까. 또 다른 어려운 점은 이런 문제는 구글링을 해도 딱히 자료가 없다는 점이다.&lt;/p&gt;

&lt;p&gt;몇 몇 문제는 도저히 재현되지도 파악되지도 않아서 wkhtmltopdf 컴파일 설정을 바꿔서 wkhtmltopdf를 다르게 빌드해보기도 했다. 몇 가지 문제는 &lt;a href=&quot;http://natepinchot.com/2014/01/31/building-static-wkhtmltopdf/&quot;&gt;wkhtmltopdf에 QT 패치&lt;/a&gt;를 해서 해결하기도 했다. wkhtmltopdf는 상당히 덩치가 큰 소프트웨어여서 컴파일하고 빌드하는 데 시간이 많이 든다. 인텔 i5 (2.2GHz quad core), 램 8기가, SSD 사양인 맥북 프로에서도 Clean build를 마치는 데 40여 분이 소요됐고, 이보다 훨씬 사양이 낮은 실 서비스 서버에서는 네 시간에서 다섯 시간이 소요됐다. 개발 중이어서 서비스 서버 사양을 &lt;a href=&quot;http://aws.amazon.com/ko/ec2/instance-types/#t2&quot;&gt;AWS t2.micro&lt;/a&gt;로 낮게 설정했기 때문이다. 힘들게 개발 환경인 Mac OS X에서 wkhtmltopdf 컴파일 설정을 맞췄는데, Redhat 계열 Linux인 AMI에서는 다르게 동작해서 다시 컴파일을 하기도 했다.&lt;/p&gt;

&lt;p&gt;마지막으로 고생했던 점은 Go로 작성된 기존 문서 서버 코드를 분석하며 새 버전을 만든 점이다. 당시 개발팀은 중요 일정을 맞추려고 밤낮으로 고생하고 있었다. 그에 비해 나는 비교적 일정과 구현에 대해 배려받고 있었고, 기능만 놓고 보면 내가 맡은 부분은 중요도가 높진 않았다. 그래서, 가능한 한 다른 개발자를 방해하지 않고 기존 코드를 보며 알아서 해결하려 노력했다. 이미 운영 중인 문서 서버의 Go 소스 코드를 몇 번이고 읽으며 의도를 이해하려 했지만, 기존 문서 서버는 DB에 직접 연결하여 데이터를 다루는 등 동작 방식이 전혀 다른데다 객체 지향 언어가 아닌 Go로 작성된 코드여서 Python으로 코드를 작성하는 데 혼란을 야기했다. 즉, 맥락 전환(context switching)에 비용이 많이 든 것인데, 당시엔 전혀 염두에 두지 않았던 상황이다.&lt;/p&gt;

&lt;p&gt;코드로는 의도나 목적을 이해하여 초기 구현은 빨리 마쳤다. 기존 것과 동일하게 동작하면 됐기 때문이다. 하지만, 나는 새로 만드는 버전을 맡은 것이고, 새 버전의 제안서는 기존 제안서와 꽤 달랐다. 이런 문제들은 출시(release)하고나서 운영할 때 유지보수에 혼란을 일으키는 요소가 된다. 정확한 기능의 의도와 목적을 이해하지 않은 상태에서 구조와 설계를 잡고 구현했기 때문이다. 다행히 초과 사양으로 구현하느라 일정 초기에 고생스러웠던 추상화 부분들, 그리고 기획자의 꼼꼼한 지원 덕에 서비스 적용(release) 후 유지보수에 큰 난관이 일어나진 않았다.&lt;/p&gt;

&lt;h5&gt;정리&lt;/h5&gt;

&lt;p&gt;목표로 했던 것보다 2주 더 걸린 5주 만에 개발을 마쳤다. Python 2.7을 사용한 걸 제외하면, 사용한 라이브러리나 프레임워크 등 대부분을 처음 사용하는 경우였다. 도구 뿐만 아니라 개발 메카니즘이나 구성도 생소했다. 이용자가 실제로 접하는 기능과 동작은 단순하기 그지 없는데, 실제 구현은 까다로운 부분도 많았다.&lt;/p&gt;

&lt;p&gt;당시엔 밤엔 공부하고 실험하고 출근하면 밤에 쌓은 자산을 적용하여 구현하는, 말 그대로 주경야독 시기를 혹독하게 보냈다. 과의욕 상태에서 불필요한 설계를 하거나 구현하여 고생을 자초하기도 했다.&lt;/p&gt;

&lt;p&gt;많이 학습하고 부족한 부분을 찾은 과정이었다.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Feb 2015 16:50:49 +0900</pubDate>
        <link>http://blog.hannal.com//2015/02/devlife-s1-01/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/02/devlife-s1-01/</guid>
        
        <category>전직</category>
        
        <category>프로그래밍</category>
        
        <category>서버 개발</category>
        
        <category>Python</category>
        
        <category>Go</category>
        
        <category>Django</category>
        
        <category>Flask</category>
        
        <category>Celery</category>
        
        <category>Redis</category>
        
        <category>AWS</category>
        
        <category>Restful API</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>원격근무를 시작하다. 일주일 중간 소감.</title>
        <description>&lt;p&gt;출산을 앞두고 지난 월요일부터 집에서 원격으로 일하고 있다. 팀이나 아내는 어떤지 모르겠지만, 난 무척 만족스럽다. 가능하다면 앞으로도 원격으로 집에서 일하고 싶다.&lt;/p&gt;

&lt;h3&gt;1. 환경&lt;/h3&gt;

&lt;p&gt;몇 몇 환경 요소는 집보다 사무실에 있는 것이 더 좋다. 하지만, 대부분은 내 작업방이나 서재가 훨씬 좋은 환경으로 꾸려져 있다. 천 여 권 정도 되는 책과 넓은 책상, 넉넉한 모니터, 쾌적한 네트워크, 휴식에 좋은 널부러질 공간과 여러 장난감, 애교 넘치는 강아지와 만삭인데도 날 챙겨주는 아내가 있다. 몸에 뭔가를 걸치는 걸 싫어하는데, 집에서는 아무래도 간편하게 입어도 되어서 좋다.&lt;/p&gt;

&lt;p&gt;사무실 근처엔 괜찮은 커피를 파는 곳이 없다. 내가 단골로 다니는 까페는 왕복 1km 거리에 있다. 집에서는 Nuova Simonelli Oscar라는 괜찮은 가정용 에스프레소 기기와 좋은 원두로 커피를 내리거나 제법 솜씨 좋은 아내가 핸드드립으로 내려주는데, 어지간한 까페보다 낫다. 양 조절하느라 하루에 한 잔만 마시려 애쓰는데, 맛없는 커피를 마시는 데 내 &lt;a href=&quot;http://blog.hannal.com/2014/10/the_time_that_remains/&quot;&gt;유한한 기회&lt;/a&gt;를 낭비하고 싶지 않다.&lt;/p&gt;

&lt;h3&gt;2. 집중&lt;/h3&gt;

&lt;p&gt;신경쓰지 않으면 집에서 일에 집중하기 안좋다는 조언(?)을 여러 번 들었다. 맞다. 집에서 집중하기 안좋은 상황이 종종 벌어진다. 소파에 파묻혀 한창 일하는데 강아지가 품으로 파고 들어와 허벅지를 차지하기도 하고, 아내의 (정당한) 일상 생활 활동이 방해가 되기도 한다.&lt;/p&gt;

&lt;p&gt;그러나 집중을 방해하는 상황은 사무실에서도 매우 빈번하게 일어난다. 여러 사람과 한 공간에 있어서 발생하는 상황이기 때문에 어찌할 도리가 마땅찮다.&lt;/p&gt;

&lt;p&gt;집에서 일하면 대처 가능한 방법이 있다. 밤에 일하는 것이다. 그래서 낮이나 저녁엔 손으로 해치우는 일을 주로 치르고, 밤, 대략 23시 경부터 3~4시 경까지는 머리로 해치우는 일을 주로 치른다. 사무실에 있으면 사람들이 퇴근하면서 슬슬 집중하기 좋은 여건이 만들어질 때쯤엔 나도 퇴근해야 한다. 버스나 지하철이 끊기기 때문이다.&lt;/p&gt;

&lt;h3&gt;3. 소통&lt;/h3&gt;

&lt;p&gt;소통은 &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;과 전자우편으로 나눈다. 작업물은 git과 redmine 같은 도구로 관리한다. 현재 진행하고 있는 업무가 긴밀하게 동기식 소통을 나눠야 하지 않아도 되는 단계여서 협업하기 불편하지는 않다. 적어도 나는.&lt;/p&gt;

&lt;p&gt;제대로 원격근무를 한 지는 아직 일주일 밖에 되지 않아서 소통에 대해서는 우려하는 일은 생기지 않았다.&lt;/p&gt;

&lt;h3&gt;4. 안좋은 점&lt;/h3&gt;

&lt;p&gt;생활과 일이 섞여서 좋은 경우도 있지만 안좋을 때도 있다. 자동차 공유 서비스를 이용해 몇 시간 차를 빌려 만삭인 아내와 장을 보는 건 좋다. 장보는 것 자체는 지루하고 재미없고 피곤한 일이지만, 아내를 돕는 몇 가지 안 되는 일이어서 좋다. 다만, 이런 생활 활동이 누적되면 정작 저녁이나 밤에 일에 집중하지 못하는 경우가 생긴다.&lt;/p&gt;

&lt;p&gt;일을 하지 않고 자꾸 딴짓하거나 노는 경우는 별로 없다. 어차피 원격근무를 하지 않을 때에도 집에서 일하는 경우가 많았어서 그 정도 자기 관리는 해왔다. 오히려 일을 끊어내지 않고 계속 이어가는 경우가 더 잦아서 다음 날 생활에 지장을 주는 경우가 문제이다. 출근하면 대중교통 시간에 맞추어 일을 끊어내기라도 하지만, 집에서 내복만 입고 소파에 앉아 일하다 문득 오줌보가 터질듯이 가득 차서 화장실 가며 시계를 보면 새벽 4~6시인 경우가 잦다. 잦은 정도가 아니라 일주일 중 6일은 그랬다.&lt;/p&gt;

&lt;p&gt;아직 우리 집이 내가 원격근무하는 데 준비가 되어 있지 않아서 원격근무에 안좋은 일이 생기곤 한다. 그래서 차라리 팀이 활동하는 시간대와 내가 활동하는 시간대가 달라서 시차가 발생하면 낫겠다는 생각도 든다.&lt;/p&gt;

&lt;h3&gt;5. 직업&lt;/h3&gt;

&lt;p&gt;내가 원격근무를 할 수 있는 요인은 크게 다음과 같이 분류된다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;환경의 배려와 지원

&lt;ul&gt;
&lt;li&gt;회사의 배려와 지원&lt;/li&gt;
&lt;li&gt;가정의 배려와 지원&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;직업 소양과 환경

&lt;ul&gt;
&lt;li&gt;서버 프로그래머&lt;/li&gt;
&lt;li&gt;혼자 진행하는 업무 진행&lt;/li&gt;
&lt;li&gt;원격으로 작업 가능한 작업 인프라와 경험&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여러 여건이 어우러져 원격근무가 가능한 것이며, 이 중 하나라도 빠져도 원격근무가 어렵거나 힘들 것 같다. 가령, 기획자로 일할 때엔 업무 특성상 사무실에서 동기화 된 소통과 업무를 진행해야 했다. 프로그래밍을 한다고 해서 원격근무가 항상 가능한 것은 아니지만, 기획 업무에 비해서는 더 융퉁성 있게 대응 가능하다.&lt;/p&gt;

&lt;h3&gt;6. 중간 평가&lt;/h3&gt;

&lt;p&gt;아주 만족한다. 가정에서 식구와 오랜 시간을 보내서 좋다. 같이 있다고 해서 특별한 경험이 있는 것도 아니다. 그냥 언제든 아내와 강아지 존재를 느끼는 것 뿐이다. 아기가 태어나서 낮과 밤 모두가 사라지는 상황이 오면 어떨지 모르겠지만, 어쨌든 지금은 가정에 머무르는 시간이 좋다.&lt;/p&gt;

&lt;p&gt;일이 더 잘되는 것도 좋다. 긴밀한 소통이 필요한 경우도 분명 오겠지만, 그런 상황 대부분은 내 역량이 부족해서 일어난다고 예상하고 있다. 그동안 해온 동기화 된 소통은 최소화 할 여지가 많아 보인다.&lt;/p&gt;

&lt;p&gt;급여를 열 배 정도 더 받는 게 아닌 이상, 집에서 원격으로 일하는 게 좋을 것 같다. 앞으로 약 한 달 동안 원격근무를 해보고나서 진지하게 그 이후를 고민해봐야 겠다.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Feb 2015 13:50:49 +0900</pubDate>
        <link>http://blog.hannal.com//2015/02/working_remotely/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/02/working_remotely/</guid>
        
        <category>원격근무</category>
        
        <category>재택근무</category>
        
        <category>리모트</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>2015년을 맞이하며</title>
        <description>&lt;p&gt;삶에 방향이 있다면, 위가 아래로 아래가 위로 자리를 옮기기도 하고 흐르는 방향이 바뀌기도 하고 겉과 속이 뒤집히기도 한 2014년을 보냈습니다. &lt;/p&gt;

&lt;p&gt;2009년 창업한 이래 기고, 걷고, 달리고, 넘어지고, 다시 일어나며 사업을 해오다 배가 뒤집힌 사고를, 그리고 그 사고가 사건으로 변하는 모습을 지켜보며 여정을 중단하였습니다. 그때쯤 5번 디스크가 척추에서 탈출하려는 시도를 벌여 몇 달 고생하였고, 여전히 치료를 받고 있긴 하지만 그래도 건강한 몸이 참 소중하다며 지난 시간을 돌이킬 여유가 생겼습니다. 그리고, 또 그때쯤 우아를 잉태하였는데, 잘 안 움직이는 저와 아내와는 달리 아주 활달하게 태동하여 한 달여 남은 출산을 기대하고 있습니다.&lt;/p&gt;

&lt;p&gt;앞으로 뭘 할 지 고민하는데 자꾸 도피성, 회피성 계획만 잡길래 다 집어치우고, 한두 달 정도 쉬면서 게임도 하고, 멍 때리기도 하고, 이런 저런 장난감을 갖고 놀기도 하고, 공부도 했습니다. 큰 방향으로 가닥을 잡을 때쯤, 주변에서 많이 챙겨주시고 도와주셔서 여름부터는 조직에 합류하여 프로그래머로 일하고 있습니다. 주로 Python을 쓰며 Go도 다루고 있는데, 데이터를 다루는 일과 하드웨어를 다루는 일에 관심을 두고 공부하고 일하며 앞으로 뭘 할 지에 대해 조금 더 세세하게 가닥을 다듬어가고 있습니다.&lt;/p&gt;

&lt;p&gt;그동안 도와주셔서 고맙습니다. 저는 그동안 살아온 삶과 다른 삶을 열어 새로이 여정을 나아가고 있습니다. 정말 힘들고 어려운 전환기에 도와주신 분들이 계셔서 전환할 수 있었습니다. 고맙습니다. 이 인연에 감사하며 소중히 이어가겠습니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 00:30:49 +0900</pubDate>
        <link>http://blog.hannal.com//2015/01/hello_2015/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/01/hello_2015/</guid>
        
        <category>2015년</category>
        
        <category>결산</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>5. url에 view 함수 연결해서 사진 출력하기</title>
        <description>&lt;ul&gt;
&lt;li&gt;마지막 갱신일시 : 2014년 11월 10일 4시 31분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 편에서는 인터넷 주소에 접속하여 Photo 모델로 올린 사진 데이터를 가져와서 View 기능을 이용하여 웹 브라우저에 관련 내용을 출력해보겠습니다.&lt;/p&gt;

&lt;h3&gt;1. URL에 Photo View 연결&lt;/h3&gt;

&lt;h4&gt;(1) URL Resolver&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2014/11/05-urls_and_views.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;이용자가(client) 인터넷 주소(URL : Uniform resource locator, 이하 URL)로 접속하면 웹 서버는 접속한 주소에 해당하는 내용물을 보여줍니다. Django로 운용되는 서비스도 마찬가지여서, 이용자가 URL로 접근하여 뭔가를 요청하면 그 URL에 대한 정보를 &lt;code&gt;urls.py&lt;/code&gt;로 대표되는 URL dispatch에서 찾아서 연결된 구현부를 실행합니다. 구현부는 데이터를(Model) 가져와 출력물을 바로(?) 출력하기도 하고 Template을 거쳐서 출력물을 만들어낸 후 출력하기도 합니다. 이렇게 URL과 구현부을 연결해주는 역할을 Django의 View 영역인 &lt;code&gt;views.py&lt;/code&gt;가 합니다. 지난 &lt;a href=&quot;http://blog.hannal.net/start_with_django_webframework_03/&quot;&gt;3회 강좌&lt;/a&gt;에서 설명한 MTV 개념인데, View에서 URL로 요청받은 걸 이런저런 방법으로 처리하여 결과(출력물)를 내보낸다고 보면 됩니다.&lt;/p&gt;

&lt;p&gt;Django에서는 URL Resolver(&lt;code&gt;urlresolver&lt;/code&gt;)라는 모듈이 URL Dispatch 역할을 하며, &lt;code&gt;django/core/urlresolvers.py&lt;/code&gt;에 있습니다. 이 &lt;code&gt;urlresolvers&lt;/code&gt; 모듈에 있는 &lt;code&gt;RegexURLResolver&lt;/code&gt; 클래스가 요청받은 URL을 되부를 함수(callback function) 덩어리로 바꿔줍니다. 이 덩어리는 View 함수와 함수 인자로 된 tuple 자료형이며, HTTP Handler가 받아서 View 함수를 실행하고 그 결과를 응답(response)합니다. HTTP Handler는 &lt;code&gt;django/core/handlers/base.py&lt;/code&gt; 모듈에 있는 &lt;code&gt;BaseHandler&lt;/code&gt; 클래스를 뜻합니다. 정리하면 다음과 같이 진행됩니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;BaseHandler&lt;/code&gt; 클래스가 URL로 요청(request) 받음&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RegexURLResolver&lt;/code&gt;로 URL을 보냄&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RegexURLResolver&lt;/code&gt;가 URL에 연결된 View를 찾아서 callback 함수와 인자 등을 &lt;code&gt;BaseHandler&lt;/code&gt;로 반환&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BaseHandler&lt;/code&gt;에서 이 함수를 실행하여 결과값인 출력물을 받음.&lt;/li&gt;
&lt;li&gt;출력&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;중간 중간에 middleware 등과 같은 과정이 있지만 큰 흐름은 이러합니다.&lt;/p&gt;

&lt;p&gt;위 내용은 몰라도 Django를 다루는 데 아무 지장 없습니다. 저는 다음 두 문장을 쓰기 위해 위 설명을 쓴 겁니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Model이나 View에 기능을 구현&lt;/li&gt;
&lt;li&gt;이용자가 서버에 있는 자원에 접근하는 경로인 URL을 URL Dispatch 처리 모듈인 &lt;code&gt;urls.py&lt;/code&gt;에 등록하고 그 URL에 구현부를 연결&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;우리는 앞으로 이런 흐름으로 기능을 구현합니다.&lt;/p&gt;

&lt;h4&gt;(2) 개별 사진 보기 View - 1&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;photo&lt;/code&gt; 앱, 그러니까 &lt;code&gt;photo&lt;/code&gt; 디렉터리 안에 있는 views.py 파일을 엽니다. 별 내용은 없습니다. 세상에 인사하는 View부터 구현해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# coding: utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;3번...3번 사진을 보여 드릴게요.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번엔 &lt;code&gt;urls.py&lt;/code&gt; 파일이 있는 &lt;code&gt;pystagram&lt;/code&gt; 디렉터리에서 &lt;code&gt;urls.py&lt;/code&gt; 파일을 열어서 &lt;code&gt;url(r&amp;#39;^photo/$&amp;#39;, &amp;#39;photo.views.single_photo&amp;#39;, name=&amp;#39;view_single_photo&amp;#39;),&lt;/code&gt; 이 줄을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;view_single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;끝났습니다. 웹브라우저에서 &lt;code&gt;http://127.0.0.1:8000/photo/&lt;/code&gt;로 접속하면 &lt;code&gt;HttpResponse&lt;/code&gt;로 넘긴 문장이 출력되는 걸 보실 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2014/11/05-hello_world_by_views.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;(3) urls.py&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt;에는 Django의 &lt;code&gt;urls&lt;/code&gt; 모듈에 있는 &lt;code&gt;url&lt;/code&gt; 함수를 이용하여 URL 연결자를 만들어서 &lt;code&gt;urlpatterns&lt;/code&gt;에 넣습니다. &lt;code&gt;urlpatterns&lt;/code&gt;는 url 함수로 만든 객체를 담은 객체이며 그냥 &lt;code&gt;list&lt;/code&gt; 자료형입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;patterns&lt;/code&gt; 함수는 두 종류 인자를 받습니다. 하나는 &lt;code&gt;prefix&lt;/code&gt;인데, 맨 앞에 있는 아무 내용이 없는 문자형 자료(객체)인 &lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt;가 &lt;code&gt;prefix&lt;/code&gt;입니다. &lt;code&gt;prefix&lt;/code&gt;는 따로 설명하겠습니다. &lt;code&gt;prefix&lt;/code&gt; 뒤에 나오는 부분은 &lt;code&gt;url&lt;/code&gt; 함수로 만든 URL 연결자들입니다. 그냥 쭈욱 나열한 것 뿐입니다.&lt;/p&gt;

&lt;p&gt;그럼 주소 연결자를 만드는 &lt;code&gt;url&lt;/code&gt; 함수 부분을 보겠습니다. 이 함수는 총 다섯 개 인자를 받습니다. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;regex : 주소 패턴 (정규표현식)&lt;/li&gt;
&lt;li&gt;view : 연결할 View&lt;/li&gt;
&lt;li&gt;prefix : 연결할 View 이름에 대한 접두사&lt;/li&gt;
&lt;li&gt;name : 주소 연결자 이름&lt;/li&gt;
&lt;li&gt;kwargs : &lt;code&gt;urls&lt;/code&gt;에서 View로 전달할 &lt;code&gt;dict&lt;/code&gt;형(사전형) 인자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;regex&lt;/code&gt;와 &lt;code&gt;view&lt;/code&gt;는 필수 인자이고, 나머지는 생략해도 됩니다. 우리가 &lt;code&gt;urls.py&lt;/code&gt;에 추가한 &lt;code&gt;url(r&amp;#39;^photo/$&amp;#39;, &amp;#39;photo.views.single_photo&amp;#39;, name=&amp;#39;view_single_photo&amp;#39;),&lt;/code&gt;를 기준으로 놓고 보면 이러합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;regex : &lt;code&gt;r&amp;#39;^photo/$&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;view : &lt;code&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;name : &lt;code&gt;name=&amp;#39;view_single_photo&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;name&lt;/code&gt; 인자는 생략해도 된다고 했으니, 한 번 생략해서 &lt;code&gt;urls.py&lt;/code&gt;를 저장한 후 웹브라우저에서 &lt;code&gt;/photo/&lt;/code&gt;로 접속해보세요. 아무 이상 없을 겁니다. 이 &lt;code&gt;name&lt;/code&gt; 인자는 템플릿에서 URL 연결자 이름으로 주소를 출력하는 등 몇 가지 편의에 쓰이며 유용합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;view&lt;/code&gt; 인자엔 실행할 함수의 이름경로를 문자열을 지정합니다. &lt;code&gt;photo.views.single_photo&lt;/code&gt;란 &lt;code&gt;photo&lt;/code&gt; 앱(패키지, 디렉터리) 안에 있는 &lt;code&gt;views&lt;/code&gt; 모듈(&lt;code&gt;views.py&lt;/code&gt;)의 &lt;code&gt;single_photo&lt;/code&gt; 함수를 뜻합니다. &lt;code&gt;single_photo&lt;/code&gt; 함수는 &lt;code&gt;views.py&lt;/code&gt;에서 “3번...3번 사진을 보여 드릴게요”라는 문자열을 반환하는 함수지요. 앞서 “4. &lt;code&gt;BaseHandler&lt;/code&gt;에서 이 함수를 실행하여 결과값인 출력물을 받음.”라고 설명한 부분이 바로 이 부분입니다. View 함수는 “3번...” 문자열을 반환하는데(&lt;code&gt;return&lt;/code&gt;) 그 반환받는 주체가 바로 &lt;code&gt;BaseHandler&lt;/code&gt;입니다. 물론 이 View 함수를 실행하는 주체이기도 하고요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;prefix&lt;/code&gt;는 &lt;code&gt;view&lt;/code&gt; 인자에 문자열로 지정하는 View 경로를 간결하게 줄여주는 편의 요소입니다. &lt;code&gt;photo&lt;/code&gt; 앱의 &lt;code&gt;views&lt;/code&gt; 모듈에 있는 여러 함수를 URL에 연결한다면 &lt;code&gt;urls.py&lt;/code&gt;가 이런 모양이 될 겁니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/2$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/3$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/4$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/5$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/6$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo6&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/7$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo7&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/8$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;어우, 기계가 할 일을 사람이 하고 있는 광경이네요. &lt;code&gt;prefix&lt;/code&gt;를 이용해서 View 명기되는 이름경로를 줄여보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/2$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/3$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/4$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/5$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/6$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo6&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/7$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo7&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/8$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;매번 &lt;code&gt;photo.views&lt;/code&gt;를 &lt;code&gt;prefix&lt;/code&gt;에 명기하고 이후에 붙는 URL 연결자의 View 지정 부분에선 생략했습니다. Django 내부에서도 이 &lt;code&gt;prefix&lt;/code&gt;는 되게 단순하게 처리합니다. (&lt;code&gt;django/conf/urls/__init__.py&lt;/code&gt; 참조)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉, &lt;code&gt;prefix&lt;/code&gt;가(가령, &lt;code&gt;&amp;#39;photo.view&amp;#39;&lt;/code&gt;) 있으면 &lt;code&gt;view&lt;/code&gt; 이름(가령, &lt;code&gt;&amp;#39;single_photo&amp;#39;&lt;/code&gt;) 앞에 덧붙이는 거지요. 그냥 덧붙이면 &lt;code&gt;&amp;#39;photo.viewsingle_photo&amp;#39;&lt;/code&gt;처럼 돼버리니 접두사와 이름 사이에 &lt;code&gt;.&lt;/code&gt;을 추가한 것이고요.&lt;/p&gt;

&lt;p&gt;그런데 &lt;code&gt;url&lt;/code&gt; 함수의 인자로 들어가는 &lt;code&gt;prefix&lt;/code&gt; 인자인데 &lt;code&gt;patterns&lt;/code&gt; 함수의 &lt;code&gt;prefix&lt;/code&gt; 인자에 접두사를 넣었네요? 실제로 우리에게 의미있게 쓰이는 &lt;code&gt;prefix&lt;/code&gt;는 &lt;code&gt;patterns&lt;/code&gt; 함수의 &lt;code&gt;prefix&lt;/code&gt;입니다. &lt;code&gt;patterns&lt;/code&gt; 함수로 &lt;code&gt;prefix&lt;/code&gt;를 지정하면, 이후에 지정된 URL 연결자인 &lt;code&gt;url&lt;/code&gt; 함수로 &lt;code&gt;prefix&lt;/code&gt;를 넘겨줍니다. 다시말해, &lt;code&gt;url&lt;/code&gt; 함수의 &lt;code&gt;prefix&lt;/code&gt;는 우리가 직접 쓰기 보다는 Django가 쓰는 데 필요한 겁니다.&lt;/p&gt;

&lt;p&gt;주의할 점은 &lt;code&gt;patterns&lt;/code&gt; 함수의 &lt;code&gt;prefix&lt;/code&gt;는 이 함수가 실행되면서 넘겨받는 URL연결자들 모두에 적용이 된다는 점입니다. 예를 들어, &lt;code&gt;single_photo5&lt;/code&gt;부터 &lt;code&gt;single_photo8&lt;/code&gt;은 &lt;code&gt;image&lt;/code&gt; 앱의 &lt;code&gt;views&lt;/code&gt;에 있는 함수라고 가정하지요. 이럴 경우 &lt;code&gt;prefix&lt;/code&gt;를 다시 지정해야 합니다. 어떻게 해야 할까요? 힌트는 &lt;code&gt;patterns&lt;/code&gt; 함수의 결과값을 담는 &lt;code&gt;urlpatterns&lt;/code&gt;가 그냥 &lt;code&gt;list&lt;/code&gt; 자료형이라는 점입니다. 힌트가 아니라 답이군요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/2$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/3$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/4$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;image.views&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/5$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/6$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo6&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/7$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo7&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/8$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다른 &lt;code&gt;prefix&lt;/code&gt;를 지정한 &lt;code&gt;patterns&lt;/code&gt; 함수를 실행하고, 그 결과값을 &lt;code&gt;urlpatterns&lt;/code&gt;에 덧이으면 됩니다. &lt;code&gt;urlpatterns&lt;/code&gt;가 &lt;code&gt;list&lt;/code&gt; 자료형이니 &lt;code&gt;urlpatterns.extend( ... )&lt;/code&gt; 이렇게 추가해도 됩니다.&lt;/p&gt;

&lt;p&gt;기왕 기계가 할 일을 사람이 하지 않고 기계가 하도록 한 김에 좀 더 간결히 줄여보겠습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/(?P&amp;lt;photo_id&amp;gt;\d+)$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;/photo/&lt;/code&gt; URL 뒤에 붙는 숫자를 정규표현식으로 패턴화하여 지정한 겁니다. &lt;code&gt;\d+&lt;/code&gt; 부분이 바로 숫자(Decimal)가 하나 이상 있다는 걸 뜻하며, URL이 이 패턴에 해당되면 &lt;code&gt;single_photo&lt;/code&gt; 함수로 연결됩니다. Pystagram 기획 내용에 따르면 개별 사진을 보는 URL은 &lt;code&gt;/photo/&amp;lt;사진 ID&amp;gt;/&lt;/code&gt;이니 &lt;code&gt;urls.py&lt;/code&gt;도 위 내용으로 정하겠습니다. 아참, &lt;code&gt;name&lt;/code&gt; 인자까지 덧붙이겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/(?P&amp;lt;photo_id&amp;gt;\d+)$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;view_single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 정도로 Django의 URL Dispatch 기능의 작동법과 사용법 설명을 마치고, 추가 기능은 필요하면 그때 그때 설명하겠습니다. 아참, &lt;code&gt;url&lt;/code&gt; 함수가 받는 마지막 인자인 &lt;code&gt;kwargs&lt;/code&gt;는 부록에서 설명하겠습니다. &lt;/p&gt;

&lt;h4&gt;(4) 개별 사진 보기 View - 2&lt;/h4&gt;

&lt;p&gt;웹브라우저에서 &lt;code&gt;/photo/&amp;lt;사진 ID&amp;gt;/&lt;/code&gt;, 예를 들어 &lt;code&gt;/photo/3&lt;/code&gt;으로 접근하면 “TypeError at /photo/3”이라는 오류가 뜹니다. 내용은 
“single&lt;em&gt;photo() got an unexpected keyword argument &amp;#39;photo&lt;/em&gt;id&amp;#39;”이고요. &lt;code&gt;single_photo&lt;/code&gt; 함수로 &lt;code&gt;photo_id&lt;/code&gt;라는 인자를 넘길려는데 &lt;code&gt;single_photo&lt;/code&gt; 함수가 받지 않아서 그렇습니다. &lt;code&gt;photo_id&lt;/code&gt;는 &lt;code&gt;urls.py&lt;/code&gt;에서 &lt;code&gt;(?P&amp;lt;photo_id&amp;gt;\d+)&lt;/code&gt; 바로 이 부분입니다. 정규표현식 패턴에 해당되는 문자열이 &lt;code&gt;?P&amp;lt;이름&amp;gt;&lt;/code&gt;에 지정된 &lt;code&gt;이름&lt;/code&gt;에 저장되어 View 함수의 인자로 넘겨집니다. &lt;code&gt;/photo/숫자&lt;/code&gt; URL에서 숫자가 &lt;code&gt;photo_id&lt;/code&gt;라는 이름을 갖는 인자에 저장되어 &lt;code&gt;single_photo&lt;/code&gt; 함수로 전달됩니다. 그래서 &lt;code&gt;single_photo&lt;/code&gt; 함수가 이 인자를 받도록 해야 합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;{0}번...{0}번 사진을 보여 드릴게요.&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫 번째로 받는 인자인 &lt;code&gt;request&lt;/code&gt;는 View 함수가 받는 기본 인자입니다. 요청(request)과 관련된 여러 정보와 기능을 수행합니다. 많은 일을 수행하는 객체이니 앞으로 그때 그때 설명하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt;에서 View 함수로 넘길 인자 이름을 지정하지 않아도 별 문제는 없습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;url(r&amp;#39;^photo/(\d+)$&amp;#39;, &amp;#39;photo.views.single_photo&amp;#39;, name=&amp;#39;view_single_photo&amp;#39;),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt;에서 위와 같이 &lt;code&gt;?P&amp;lt;photo_id&amp;gt;&lt;/code&gt;을 빼서 인자 이름을 없애면, 인자는 이름없이 배열 형태로 View 함수로 넘겨집니다. 인자를 받는 View 함수에서는 &lt;code&gt;*args&lt;/code&gt; 인자로 받으면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;{0}번...{0}번 사진을 보여 드릴게요.&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인자가 여러 개라면 넘겨받은 순서대로 &lt;code&gt;args&lt;/code&gt;에 인자들이 &lt;code&gt;args[0]&lt;/code&gt;, &lt;code&gt;args[1]&lt;/code&gt;, &lt;code&gt;args[2]&lt;/code&gt;, ... 이런 식으로 담깁니다. 하지만 코드를 알아보기 안 좋으니 어지간히 변수 이름 짓는 게 고통스러운 게 아니라면 인자 이름을 지정하길 권합니다.&lt;/p&gt;

&lt;p&gt;자, 넘겨받은 &lt;code&gt;photo_id&lt;/code&gt; 인자를 Python의 문자형 객체의 포맷 메서드를 이용해 출력하고 있으니, 웹브라우저에서 &lt;code&gt;/photo/&lt;/code&gt; 뒤에 여러가지 &lt;strong&gt;숫자&lt;/strong&gt;를 넣어서 접근해보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2014/11/05-view_with_photo_id.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;숫자없이 &lt;code&gt;/photo/&lt;/code&gt;로 또는 숫자가 아닌 문자가 포함된 주소(가령 &lt;code&gt;/photo/3-1023&lt;/code&gt;이나 &lt;code&gt;/photo/3번/&lt;/code&gt;)로도 접근해보세요. “Page not found (404)” 오류가 출력됩니다. &lt;code&gt;urls.py&lt;/code&gt;에 지정한 URL 패턴에 해당되는 게 없으면 &lt;code&gt;404&lt;/code&gt; 오류가 발생합니다. &lt;code&gt;urlresolver&lt;/code&gt;에서 일으키지요.&lt;/p&gt;

&lt;h3&gt;2. Photo 모델에서 사진 정보를 가져와 출력하기&lt;/h3&gt;

&lt;h4&gt;(1) Photo 모델로 객체 찾기(lookup)&lt;/h4&gt;

&lt;p&gt;코드부터 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;{photo_id}번...{photo_id}번 사진을 보여 드릴게요.&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;{photo_url}&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;photo_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 &lt;code&gt;from .models import Photo&lt;/code&gt;문으로 &lt;code&gt;photo&lt;/code&gt; 앱에 있는 &lt;code&gt;models&lt;/code&gt; 모듈에서 &lt;code&gt;Photo&lt;/code&gt; 모델을 가져옵니다. &lt;code&gt;.models&lt;/code&gt;는 &lt;code&gt;photo.models&lt;/code&gt;와 같은 내용인데, &lt;code&gt;views.py&lt;/code&gt; 파일과 같은 디렉터리(경로)에 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;그 다음에 &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;objects&lt;/code&gt; 객체의 &lt;code&gt;get&lt;/code&gt; 메서드를 이용해 &lt;code&gt;photo_id&lt;/code&gt;에 해당하는 사진 데이터(Photo 모델의 객체(instance)) 가져와서 &lt;code&gt;photo&lt;/code&gt;라는 변수에 담습니다. &lt;code&gt;Photo&lt;/code&gt; 모델에 있는 &lt;code&gt;image_file&lt;/code&gt;이라는 필드에 접근해서 &lt;code&gt;url&lt;/code&gt; 속성(property)를 이용해 지정한 사진의 URL을 출력합니다.&lt;/p&gt;

&lt;p&gt;모델을 다루는 건 나중에 자세히 다루니, 이번 편에서는 모델을 이용해 데이터를 가져오는 것만 다뤘습니다.&lt;/p&gt;

&lt;h4&gt;(2) 찾는 객체가 없으면 404 오류 출력&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;/photo/숫자&lt;/code&gt; URL 중 숫자를 되게 큰 값, 예를 들어 1023을 넣어보세요. “DoesNotExist at /photo/1023”라는 오류가 출력됩니다. 사진 ID 중 1023번인 자료가 없어서 모델 영역에서 발생한 오류입니다. 이 오류 대신 “사진이 없다”는 안내를 하려면 이 오류에 대한 예외(exception) 처리를 해야 합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;사진이 없습니다.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;라는 &lt;code&gt;Exception&lt;/code&gt;이 발생하면 이를 try/except 문으로 잡아내서 예외처리를 한 겁니다. 그런데 &lt;code&gt;Photo&lt;/code&gt; 모델로 사진 데이터를 가져오려는데 데이터가 없는 상황은 “없는 페이지”라고 봐도 됩니다. 그래서 이런 상황에선 &lt;code&gt;404&lt;/code&gt; 오류를 일으키고 &lt;code&gt;404&lt;/code&gt; 오류 안내 페이지를 따로 만들어 제공하는 게 낫습니다. 이걸 간편하게 해주는 것이 &lt;code&gt;get_object_or_404&lt;/code&gt; 함수입니다. 이 함수는 &lt;code&gt;django.shortcuts&lt;/code&gt; 모듈에 있습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_object_or_404&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_object_or_404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 식으로 사용하면 됩니다. 첫 번째 인자로 모델을 넣고, 그 뒤로는 탐색 키워드 인자를 넣습니다. 탐색 키워드 인자란 &lt;code&gt;pk=photo_id&lt;/code&gt;와 같이 모델에서 객체를 찾는 데 쓰이는 내용을 뜻합니다.&lt;/p&gt;

&lt;p&gt;내용을 변경한 전체 코드를 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# coding: utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_object_or_404&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_object_or_404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;{photo_id}번...{photo_id}번 사진을 보여 드릴게요.&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;{photo_url}&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;photo_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/uploads/2014/11/05-view_data_from_model.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;photo&lt;/code&gt; 모델을 이용해 사진 데이터를 가져와 관련 정보를 웹 브라우저에 출력까지 했습니다. 관련 정보를 출력한다고 했지 사진을 출력한다고는 안 했습니다. ^^ 하지만, 이대로 끝마치기엔 서운하니 사진 출력까지만 하고 설명은 다른 편에서 다루겠습니다.&lt;/p&gt;

&lt;h4&gt;(3) 업로드한 파일을 URL로 접근하기&lt;/h4&gt;

&lt;p&gt;먼저 화면에 출력된 사진 파일 URL로 이미지를 출력하도록 HTML 태그를 출력할 내용에 추가하겠습니다. &lt;code&gt;img&lt;/code&gt; 태그를 쓰는 것이지요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;{photo_url}&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 줄을 기존 &lt;code&gt;response_text&lt;/code&gt; 변수가 있는 줄 아래에 추가합니다. 그런 뒤 웹브라우저에서 접속해보세요. 이미지가 출력되지 않습니다. 화면에 출력된 이미지 파일 URL을 서버 호스트 내용과 합쳐서, 그러니까 &lt;code&gt;http://localhost:8000/static_files/...&lt;/code&gt; 이렇게 만들어서 웹브라우저로 접근해보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2014/11/05-404_without_media_url.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;404&lt;/code&gt; 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;Django는 이용자가 업로드한 파일은 &lt;code&gt;MEDIA_URL&lt;/code&gt;과 &lt;code&gt;MEDIA_ROOT&lt;/code&gt;라는 설정값을 참조하여 제공(serve)합니다. 모델의 &lt;code&gt;FileField&lt;/code&gt; 필드 클래스나 &lt;code&gt;ImageField&lt;/code&gt; 필드 클래스로 지정하는 &lt;code&gt;upload_to&lt;/code&gt; 인자는 &lt;code&gt;MEDIA_URL&lt;/code&gt;과 &lt;code&gt;MEDIA_ROOT&lt;/code&gt; 경로 아래에 위치합니다. 이 두 설정값을 무시하는 것도 가능하지만 운영하는 데 번거롭고 보안에도 좋진 않습니다.&lt;/p&gt;

&lt;p&gt;자, 그럼 &lt;code&gt;MEDIA_URL&lt;/code&gt;과 &lt;code&gt;MEDIA_ROOT&lt;/code&gt;를 설정하겠습니다. &lt;code&gt;pystagram&lt;/code&gt; 패키지(디렉터리) 안에 있는 &lt;code&gt;settings.py&lt;/code&gt; 파일을 열고 맨 아래에 다음 두 줄을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;MEDIA_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;static_files&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;업로드된 파일은 &lt;code&gt;static_files&lt;/code&gt; 라는 URL을 따르므로 &lt;code&gt;urls.py&lt;/code&gt;에도 이와 관련된 내용을 등록해야 합니다. 원리는 이렇습니다. &lt;code&gt;static_files&lt;/code&gt; 뒤에 나오는 경로를 받은 뒤 지정된 경로에 있는 이미지 파일을 읽어온 후 웹브라우저에 보내는 겁니다. 경로에 없으면 &lt;code&gt;404&lt;/code&gt; 오류를 일으키고요. 아, 생각만 해도 귀찮습니다. 다행히 Django엔 이런 걸 처리해주는 기능이 이미 있습니다. &lt;code&gt;django.conf.urls.static&lt;/code&gt; 모듈에 있는 &lt;code&gt;static&lt;/code&gt; 함수지요. &lt;code&gt;urls.py&lt;/code&gt; 맨 아래에 다음 줄을 추가해보세요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;static_files&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document_root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MEDIA_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자, 끝났습니다. 이제 다시 웹브라우저에서 개별 사진 URL로 접근해보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2014/11/05-view_photo_successfully.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;실은 업로드한 파일의 URL에 들어가는 &lt;code&gt;static_files&lt;/code&gt;은 모델에서 지정하지 않고 &lt;code&gt;settings.py&lt;/code&gt;에서 지정해야 합니다. 강좌 진행을 위해 &lt;code&gt;photo&lt;/code&gt; 모델의 &lt;code&gt;image_file&lt;/code&gt;과 &lt;code&gt;filtered_image_file&lt;/code&gt; 필드에 &lt;code&gt;static_files&lt;/code&gt; 경로를 넣은 것이지요. 나중에 이와 관련된 내용을 자세히 다루면서 손보도록 하겠습니다. :)&lt;/p&gt;

&lt;h3&gt;3. 부록&lt;/h3&gt;

&lt;h4&gt;(1) url 함수의 kwargs 역할&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;url&lt;/code&gt; 함수에 사용되는 인자인 &lt;code&gt;kwargs&lt;/code&gt;는 View 함수로 임의 인자를 건내는 데 사용됩니다. View 함수는 URL 패턴에서 지정된 값을 인자로 건내받는데, URL에는 어떤 상태나 정보를 나타내지 않으면서 상황에 따라 View 함수에 넘기는 값을 따로 지정하려면 &lt;code&gt;kwargs&lt;/code&gt; 인자를 활용해야 합니다. 예를 들어, 개별 사진을 &lt;code&gt;/photo/&amp;lt;숫자ID&amp;gt;/&lt;/code&gt;이나 &lt;code&gt;/hidden_photo/&amp;lt;숫자ID&amp;gt;/&lt;/code&gt; URL로 접근할 수 있고, 두 URL 모두 &lt;code&gt;single_photo&lt;/code&gt; 함수가 대응한다고 가정하겠습니다. 어떤 URL로 접근했는지 &lt;code&gt;single_photo&lt;/code&gt; 함수에서 알려면 접근한 URL을 분석해도 되지만, URL엔 보이지 않는 정보를 &lt;code&gt;single_photo&lt;/code&gt; 함수에 인자로 보내면 좀 더 편할 겁니다. 이 인자를 &lt;code&gt;hidden&lt;/code&gt;이라고 하겠습니다. 먼저 &lt;code&gt;urls.py&lt;/code&gt;에 &lt;code&gt;kwargs&lt;/code&gt; 인자를 정의합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/(?P&amp;lt;photo_id&amp;gt;\d+)$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;view_single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^hidden_photo/(?P&amp;lt;photo_id&amp;gt;\d+)$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;view_hidden_single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;hidden&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번엔 &lt;code&gt;single_photo&lt;/code&gt; View 함수가 &lt;code&gt;hidden&lt;/code&gt; 인자를 받을 차례입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# todo: 뭔가 은밀한 작업을 합시다&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;single_photo&lt;/code&gt; 함수는 따로 &lt;code&gt;hidden&lt;/code&gt; 인자를 넘기지 않으면 &lt;code&gt;False&lt;/code&gt; 값으로 &lt;code&gt;hidden&lt;/code&gt; 인자를 받습니다. 즉, &lt;code&gt;/photo/&amp;lt;숫자ID&amp;gt;/&lt;/code&gt;로 접근하는 경우입니다. 하지만, &lt;code&gt;/hidden_photo/&amp;lt;숫자ID&amp;gt;/&lt;/code&gt;로 접근하면 &lt;code&gt;hidden&lt;/code&gt; 인자는 &lt;code&gt;True&lt;/code&gt;로 &lt;code&gt;single_photo&lt;/code&gt; 함수에 넘겨집니다. &lt;code&gt;/hidden_photo/&amp;lt;숫자ID&amp;gt;/&lt;/code&gt; URL을 아는 사람만 &lt;code&gt;hidden&lt;/code&gt;이 &lt;code&gt;True&lt;/code&gt;인 상황을 만끽하게 되겠지요.&lt;/p&gt;

&lt;h4&gt;(2) render와 HttpResponse&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;views.py&lt;/code&gt;를 처음 열면 맨 위에 &lt;code&gt;from django.shortcuts import render&lt;/code&gt;라는 부분이 있습니다. 그런데 우리는 이 &lt;code&gt;render&lt;/code&gt; 함수를 한 번도 쓰지 않고, &lt;code&gt;HttpResponse&lt;/code&gt;를 따로 불러들여서 이를 이용해 화면에 뭔가를 출력했습니다. 이 둘의 차이는 뭘까요?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HttpResponse&lt;/code&gt;는 Django의 View가 HTTP handler로 보내는 출력물의 가장 기본 형태인 객체를 만드는 클래스입니다. HTTP handler가 건내받는 출력물의 가장 기본형이지요. 그래서 &lt;code&gt;HttpResponse&lt;/code&gt; 자체는 템플릿을 같은 걸 처리하는 기능을 담고 있지 않습니다. 그래서 템플릿을 따로 처리하여 그려낸(rendered) 출력물을 문자열 그 자체(plain text)로 받아서 출력해야 합니다. 이런 처리에 필요한 코드는 꽤 반복되므로 반복되는 부분을 별도 함수로 만들어서 편하게 템플릿으로 그려낸 출력물을 &lt;code&gt;HttpResponse&lt;/code&gt;로 보내는 함수가 바로 &lt;code&gt;render&lt;/code&gt;입니다. &lt;code&gt;render&lt;/code&gt; 함수를 보면 반환하는 최종 값도 결국은 &lt;code&gt;HttpResponse&lt;/code&gt; 클래스로 만든 객체입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpresponse_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;(3) 소스 파일에 한글을 입력하니 오류가 떠요!&lt;/h4&gt;

&lt;p&gt;혹시 &lt;code&gt;views.py&lt;/code&gt; 파일 맨 위에 &lt;code&gt;# coding: utf-8&lt;/code&gt; 내용을 넣지 않은 채 &lt;code&gt;views.py&lt;/code&gt; 파일 안에 한글을 직접 입력했다면 &lt;code&gt;SyntaxError&lt;/code&gt; 오류가 발생합니다. 오류 내용은 &lt;code&gt;Non-ASCII character &amp;#39;무엇&amp;#39; in file&lt;/code&gt;인데, 파일에 ascii 문자가 아닌 문자가 있다는 뜻입니다. Python 버전 2대를 쓰는 입문자라면 영원히(?) 고통 받는 상황입니다.&lt;/p&gt;

&lt;p&gt;이 문제는 Python 모듈(파일)에 ascii 문자의 표현 범위를 벗어나는 한글이나 한자 같은 문자가 포함되면 Python 인터프리터가 “어?! 이 문자 뭐임? 몰라, 무서워. 뱉어”라며 Syntax 예외를 일으켜서 발생합니다. 이 문제를 예방하려면 소스 파일에 ascii 문자만 입력하거나 &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0263/&quot;&gt;소스 파일이 어떤 문자형(charset)으로 작성됐는지 Python 인터프리터에게 알려줘야 합니다&lt;/a&gt;. 그 알려주는 방법이 소스 파일 상단에 &lt;code&gt;# coding: utf-8&lt;/code&gt;를 명기한 것이지요. Emacs 같은 편집기를 위해 &lt;code&gt;# -*- coding: utf-8 -*-&lt;/code&gt; 라고 명기하기도 합니다. &lt;/p&gt;

&lt;p&gt;Python 2의 기본 문자형(charset)이 ascii이기 때문에 Python 2를 쓰는 이상 유니코드와 관련된 고통은 감수해야 합니다. :) 아, 이런 문제는 Python 3에선 발생하지 않습니다.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;이것으로 강좌 5편을 마칩니다. 이번에도 늦어서 죄송합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/05-fullsource/pystagram&quot;&gt;5편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 11 Nov 2014 12:00:49 +0900</pubDate>
        <link>http://blog.hannal.com//2014/11/start_with_django_webframework_05/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/11/start_with_django_webframework_05/</guid>
        
        <category>django</category>
        
        <category>view</category>
        
        <category>url dispatch</category>
        
        
        <category>start_with_django_webframework</category>
        
      </item>
    
      <item>
        <title>유한한 기회</title>
        <description>&lt;p&gt;시간은 금이라고 하는데, 시간이 소중하다고 생각하지만 꽤 막연하게 느껴진다. 지구와 태양 간 평균 거리는 149,597,870,700 m인데 이를 1천문단위(au)라고 줄이듯이 나도 시간을 다른 단위로 바꿔 보기로 했다. 단위는 기회.&lt;/p&gt;

&lt;p&gt;내가 80세에 죽는다고 가정하면, 현재 내 생활 방식을 토대로 산정한 내게 남은 기회들과 횟수는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;아내랑 데이트 : 1,800회 (1년 40회)&lt;/li&gt;
&lt;li&gt;아내와 여행 : 45회 (1년 1회)&lt;/li&gt;
&lt;li&gt;식사 : 32,850회 (1일 2회)
&lt;ul&gt;
&lt;li&gt;아내가 해준 식사 : 9,385회 (일주일 중 2일)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/li&gt;
&lt;li&gt;게임
&lt;ul&gt;
&lt;li&gt;개발과 출시 : 15회 (3년에 한 개 개발, 출시, 운영)&lt;/li&gt;
&lt;li&gt;즐기기 : 7,020시간 (1주일 세 시간)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;독서 : 21,060시간, 1,642권 (1주일 아홉 시간, 10일에 한 권)&lt;/li&gt;
&lt;li&gt;운동 : 4,680회 (1주일 2회)&lt;/li&gt;
&lt;li&gt;아내랑 부비부비
&lt;ul&gt;
&lt;li&gt;뽀뽀 : 1,170회 (2주일 1회)&lt;/li&gt;
&lt;li&gt;포옹 : 4,680회 (1주일 2회)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커피 : 16,425회 (하루 한 잔)&lt;/li&gt;
&lt;li&gt;친구와 수다 : 585회 (한 달에 1회)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;생각보다 훨씬 적은 숫자가 나왔다. 오롯이 내 기대수명으로 기회를 계산할 수 없는 부모님과 갖는 기회 횟수는 대부분 두 자리 수이다.&lt;/p&gt;
&lt;p&gt;내가 내린 결론은, 횟수를 늘리는 데까지 늘리지만 한계가 명확하니 각 기회의 질을 높여야겠다는 점이다. 그리고 나이를 먹을수록 각 기회를 누리기 더 힘이 들테니 몸과 마음이 건강하도록 노력해야겠다는 점이다.&lt;/p&gt;
&lt;p&gt;개똥같은 커피를 마시는 데 16,500회도 안 남은 기회를, 15회도 안 남은 게임 개발 기회를 개똥같은 게임을 만드는 데 쓰지 않겠다. 유한한 기회를 낭비하지 않아야겠다.&lt;/p&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Oct 2014 01:47:21 +0900</pubDate>
        <link>http://blog.hannal.com//2014/10/the_time_that_remains/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/10/the_time_that_remains/</guid>
        
        <category>시간</category>
        
        <category>기회</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>4. Photo 모델로 Admin 영역에서 데이터 다루기</title>
        <description>&lt;ul&gt;
&lt;li&gt;마지막 갱신일시 : 2014년 10월 5일 3시 15분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 편에서는 Django framework이 제공하는 Admin 기능을 이용하여 Photo 모델로 데이터를 추가하거나 내용을 고치거나 삭제해 보겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Photo 모델로 데이터 넣기&lt;/h3&gt;

&lt;h4&gt;(1) Admin에서 Photo 모델에 데이터 넣기&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델을 이용하여 데이터베이스를 넣겠습니다. View에 관련 기능을 구현해도 되지만, Django의 장점 중 하나인 Admin 기능을 이용해서 자료를 관리해 보겠습니다. &lt;code&gt;photo&lt;/code&gt; 앱에 있는 &lt;code&gt;admin.py&lt;/code&gt; 파일에 관련 코드를 작성해 넣으면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;# coding: utf-8

from django.contrib import admin

from photo.models import Photo

admin.site.register(Photo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Django framework에는 Admin 기능이 admin이라는 &lt;strong&gt;앱&lt;/strong&gt; 형태로 제공되는데, &lt;code&gt;contrib&lt;/code&gt; 패키지 안에 &lt;code&gt;admin&lt;/code&gt; 패키지로 존재합니다. &lt;code&gt;admin.site.register&lt;/code&gt;는 &lt;code&gt;admin&lt;/code&gt; 패키지에 있는 &lt;code&gt;sites&lt;/code&gt; 모듈에서 &lt;code&gt;AdminSite&lt;/code&gt; 클래스를 &lt;code&gt;site&lt;/code&gt;라는 이름을 갖는 인스턴스로 만들고, 이 &lt;code&gt;site&lt;/code&gt; 객체의 인스턴스 메서드인 &lt;code&gt;register&lt;/code&gt;로 지정한 모델을 Admin 영역에서 관리하도록 등록합니다. 즉, &lt;code&gt;sites.py&lt;/code&gt;에 이렇게 되어 있는 겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;class AdminSite(object):
    # code들
    pass

site = AdminSite()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;복잡하게 느껴지신다면 그냥 &lt;code&gt;admin.site.register&lt;/code&gt;라고 외우시면 됩니다. 따로 건드릴 일이 없거든요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;photo&lt;/code&gt;앱의 &lt;code&gt;admin.py&lt;/code&gt;를 저장하고 나면 Django의 개발용 내장 웹서버(이하 내장 웹서버)가 자동으로 재실행 됩니다. 재실행이 되고 나면 웹 브라우저에서 &lt;code&gt;http://127.0.0.1:8000/admin/&lt;/code&gt;로 접속해 보세요. 로그인에 필요한 ID와 비밀번호를 묻는데, 지난 3편에서 &lt;code&gt;manage.py&lt;/code&gt;로 만든 계정 정보로 접속하면 됩니다. 비밀번호가 기억이 나질 않는다면 &lt;code&gt;manage.py&lt;/code&gt;에 &lt;code&gt;changepassword&lt;/code&gt; 명령어로 비밀번호를 새로 생성하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/10/04-login_to_admin.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그인을 했다면 &lt;code&gt;Photo&lt;/code&gt;라는 영역이 있고 그 아래에 &lt;code&gt;Photos&lt;/code&gt;라는 항목이 보입니다. 그 항목이 바로 &lt;code&gt;Photo&lt;/code&gt; 모델입니다. &lt;code&gt;Photo&lt;/code&gt; 항목 오른쪽에 &lt;code&gt;Add&lt;/code&gt;를 눌러보세요. &lt;code&gt;Photo&lt;/code&gt; 모델에 데이터를 넣는 &lt;strong&gt;Form&lt;/strong&gt;이 나타납니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/10/04-add_photo_form_in_admin.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어차피 싹 지우고 다시 데이터는 채워 넣을 거니까 아무 자료나 넣어보세요. 사진이 아닌 파일도 지정해보고 본문(description) 입력란에 아무 내용도 넣지 말고 저장도 해보세요. 또 본문 입력란에 500글자가 넘는 글자를 넣어 보세요. 우리가 뭔가 따로 조치를 취한 게 없는데도 파일이 이미지 파일인지 아닌지, 본문이 채워져 있는지를 검사하고 본문에 500자 이상 입력이 안 되게 제한됩니다.&lt;/p&gt;

&lt;p&gt;Django의 &lt;code&gt;forms&lt;/code&gt; 기능(패키지)이 이런 처리를 하며, 이미지 파일이어야 하고 본문은 반드시 내용이 있어야 한다거나 본문 길이와 같은 검사 항목과 정보를 우리가 만든 &lt;code&gt;Photo&lt;/code&gt; 모델에서 참조합니다. &lt;code&gt;image_file&lt;/code&gt; 모델 속성을 &lt;code&gt;ImageField&lt;/code&gt;라는 필드 타입으로 지정해서 업로드 되는 파일이 이미지 파일인지 검사하는 것이며, &lt;code&gt;description&lt;/code&gt; 모델 속성을 최대 길이 500자로 지정한 &lt;code&gt;TextField&lt;/code&gt; 필드 타입으로 지정해서 문자열 길이가 500자 이하인지 검사합니다. 생성일시인 &lt;code&gt;created_at&lt;/code&gt;은 자동으로 값이 저장되는 옵션을 주어서 입력란으로 등장하지 않았습니다.&lt;/p&gt;

&lt;p&gt;몇 가지 실험해보죠. &lt;code&gt;photo&lt;/code&gt; 앱의 &lt;code&gt;Photo&lt;/code&gt; 모델에서 &lt;code&gt;created_at&lt;/code&gt;을 고치겠습니다. &lt;code&gt;auto_now_add&lt;/code&gt;와 &lt;code&gt;auto_now&lt;/code&gt; 필드 옵션을 모두 제거하겠습니다. 그리고 &lt;code&gt;description&lt;/code&gt;의 필드 타입에 &lt;code&gt;blank&lt;/code&gt;라는 필드 옵션을 &lt;code&gt;True&lt;/code&gt;로 추가 지정하겠습니다. 코드로 보면 이렇습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;class Photo(models.Model):
    image_file = models.ImageField()
    filtered_image_file = models.ImageField()
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;모델 모듈(파일)을 저장하여 내장 웹서버가 재실행되게 한 후, &lt;code&gt;Photo&lt;/code&gt; 모델에 데이터를 추가하는 입력란 영역으로 다시 가보거나 열어보세요. &lt;code&gt;Created at&lt;/code&gt;이라는 입력란이 추가 됐습니다. 이제 Save 버튼을 눌러보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/10/04-modified_description_created_in_admin.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;뭔가 달라졌지요? 본문란에 아무 내용을 넣지 않았는데도 무섭게 시뻘건 경고 안내가 나타나지 않습니다. 그리고, 생성일시 정보를 넣지 않았다고 경고합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;blank&lt;/code&gt; 필드 옵션은 이름 그대로 빈칸을 뜻합니다. 즉 &lt;code&gt;blank=True&lt;/code&gt;는 빈칸을 허용하겠다는 뜻입니다. 이와 비슷한 옵션으로 &lt;code&gt;null&lt;/code&gt;이 있는데, &lt;code&gt;null&lt;/code&gt;은 Python의 &lt;code&gt;None&lt;/code&gt; 자료형 객체를 뜻합니다. &lt;code&gt;null=True&lt;/code&gt;는 &lt;code&gt;None&lt;/code&gt; 자료형을 허용하겠다는 뜻입니다. 빈칸과 &lt;code&gt;None&lt;/code&gt;(null)은 의미가 완전히 다른데, 빈칸은 내용이 비어있는 &lt;strong&gt;문자형&lt;/strong&gt; 객체입니다. 데이터베이스의 테이블 구성(schema)도 전혀 달라서, &lt;code&gt;null=True&lt;/code&gt;이라고 하면 해당 컬럼(column)은 &lt;code&gt;NULL&lt;/code&gt;을 허용하도록 지정되고, &lt;code&gt;blank=True&lt;/code&gt;만 있으면 &lt;code&gt;null=True&lt;/code&gt;가 없어서 기본값인 &lt;code&gt;null=False&lt;/code&gt;로 지정되어 데이터베이스 테이블의 컬럼도 &lt;code&gt;NULL&lt;/code&gt;이 허용되지 않는 &lt;code&gt;NOT NULL&lt;/code&gt;로 지정됩니다. 그래서 &lt;code&gt;description&lt;/code&gt;에 &lt;code&gt;blank=True&lt;/code&gt; 옵션만 설정한 상태에서 빈칸인 문자형 객체 조차 넣지 않으면 데이터베이스에 자료를 넣는 중에 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;대개는 Django framework이 알아서 처리해 줍니다. 우리가 &lt;code&gt;description&lt;/code&gt;에 &lt;code&gt;None&lt;/code&gt; 객체를 직접 지정해 넣지 않는 한 보통은 별 문제 없이 작동합니다. 또 정밀하게 자료형을 검사할 게 아니라면 굳이 &lt;code&gt;null&lt;/code&gt;과 &lt;code&gt;blank&lt;/code&gt; 모두를 &lt;code&gt;True&lt;/code&gt;라고 옵션을 설정할 필요는 없습니다. 만약 두 옵션을 &lt;code&gt;True&lt;/code&gt;라고 지정한다면 우리는 다음과 같이 자료형을 검사해야 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;if not isinstance(photo.description, type(None)):
  _description = photo.description.lower()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;description&lt;/code&gt;이 &lt;code&gt;None&lt;/code&gt; 자료형이 아닌 경우(즉 문자형인 경우), 모든 영문자를 소문자로 바꾸어서 &lt;code&gt;_description&lt;/code&gt;이라는 변수에 담는 코드입니다. &lt;code&gt;lower&lt;/code&gt;라는 함수는 Python의 문자형 객체에 존재하는 인스턴스 메서드이므로 &lt;code&gt;description&lt;/code&gt;이 &lt;code&gt;None&lt;/code&gt; 자료형이라면 &lt;code&gt;lower&lt;/code&gt;라는 속성이 &lt;code&gt;None&lt;/code&gt; 자료형에 없다는 &lt;code&gt;AttributeError: &#39;NoneType&#39; object has no attribute &#39;lower&#39;&lt;/code&gt; 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;자, 이제 다음과 같이 변경한 모델 내용을 데이터베이스에도 반영해 보겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;class Photo(models.Model):
    image_file = models.ImageField()
    filtered_image_file = models.ImageField()
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;데이터베이스에 반영하는 방법은 &lt;code&gt;manage.py&lt;/code&gt;의 &lt;code&gt;makemigrations&lt;/code&gt;과 &lt;code&gt;migrate&lt;/code&gt; 명령어를 이용하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py makemigrations
Migrations for &#39;photo&#39;:
  0002_auto_20141004_1518.py:
    - Alter field description on photo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0001은 &lt;code&gt;Photo&lt;/code&gt; 모델을 처음 데이터베이스에 반영할 때 만들었으니 0002라는 일련번호가 붙은 마이그레이션 파일이 생성됩니다. &lt;code&gt;photo&lt;/code&gt;에 &lt;code&gt;description&lt;/code&gt; 필드를 변경(alter)하는 내용이라고 나오네요. &lt;code&gt;./manage.py migrate&lt;/code&gt;를 실행하면 &lt;code&gt;makemigrations&lt;/code&gt;으로 만들어진 마이그레이션 파일을 실제로 반영합니다. 번거롭게 데이터베이스 테이블을 우리가 변경하지 않아도 되니 참 편합니다.&lt;/p&gt;

&lt;p&gt;자, Admin 영역에서 이제 실제로 이미지 파일을 지정하여 Photo 모델에 데이터를 실제로 넣어 보세요.&lt;/p&gt;

&lt;h4&gt;(2) 파일 업로드 경로 지정&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델에 데이터를 추가하면 업로드한 이미지 파일은 &lt;code&gt;manage.py&lt;/code&gt; 파일이 있는 곳에 저장됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/10/04-uploaded_files_location.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;관리하기 편하게 업로드 되는 파일을 &lt;code&gt;static_files/uploaded/&lt;/code&gt;에 저장하겠습니다. &lt;code&gt;Photo&lt;/code&gt; 모델에서 &lt;code&gt;ImageField&lt;/code&gt; 필드 타입에 필드 옵션인 &lt;code&gt;upload_to&lt;/code&gt;를 이용하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;image_file = models.ImageField(upload_to=&#39;static_files/uploaded&#39;)
filtered_image_file = models.ImageField(upload_to=&#39;static_files/uploaded&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위와 같이 &lt;code&gt;Photo&lt;/code&gt; 모델을 고쳐서 저장한 후 Admin 영역에서 &lt;code&gt;Photo&lt;/code&gt; 모델에 데이터를 추가해 보세요. 업로드한 이미지 파일이 &lt;code&gt;static_files/uploaded&lt;/code&gt;에 저장되어 있습니다.&lt;/p&gt;

&lt;p&gt;파일이 저장되는 경로에 자동으로 내용이 채워지는 몇 가지 규칙이 있습니다. 예를 들어, 2014년도에 올라오는 파일은 &lt;code&gt;static_files/uploaded/2014&lt;/code&gt;에 넣고, 2015년도에 올라오는 파일은 &lt;code&gt;static_files/uploaded/2015&lt;/code&gt;에 넣고자 한다면, 따로 그런 기능을 구현하지 않아도 됩니다. 우리는 네 자리 년도, 두 자리 월, 두 자리 일로 디렉터리를 구분해서 업로드 되는 파일을 저장하겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;image_file = models.ImageField(upload_to=&#39;static_files/uploaded/%Y/%m/%d&#39;)
filtered_image_file = models.ImageField(upload_to=&#39;static_files/uploaded/%Y/%m/%d&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;%Y&lt;/code&gt;, &lt;code&gt;%m&lt;/code&gt;, &lt;code&gt;%d&lt;/code&gt;가 그런 역할을 하는데, 이 문자열은 &lt;a href=&quot;https://docs.python.org/2.7/library/time.html#time.strftime&quot;&gt;Python의 strftime&lt;/a&gt;의 포맷팅(formatting)에 사용되는 형태잡기 문자열(format string) 중에서 날짜와 시간과 같은 규칙을 따릅니다.&lt;/p&gt;

&lt;p&gt;자, 이제 마지막으로 원본 이미지 파일과 필터가 적용된 이미지 파일을 다른 디렉터리에 분리해 저장하도록 하겠습니다. 원본 이미지 파일은 &lt;code&gt;static_files/uploaded/original/...&lt;/code&gt;에, 필터가 적용된 이미지 파일은 &lt;code&gt;static_files/uploaded/filtered/...&lt;/code&gt;에 저장하겠습니다. 간단하겠죠?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;image_file = models.ImageField(upload_to=&#39;static_files/uploaded/original/%Y/%m/%d&#39;)
filtered_image_file = models.ImageField(upload_to=&#39;static_files/uploaded/filtered/%Y/%m/%d&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 코드를 반영하여 내장 웹서버가 재실행되면 Admin 영역에서 사진을 올려보세요. 새 경로로 파일이 저장됩니다.&lt;/p&gt;

&lt;h5&gt;업로드 경로를 중간에 변경해도 괜찮을까?&lt;/h5&gt;

&lt;p&gt;여기서 잠깐. 우리는 중간 중간 업로드 경로를 바꾸면서 이미지 파일을 업로드 했습니다. 이러면 혹시 이전 업로드 경로로 올린 이미지 파일에 접근하지 못하는 문제가 발생하지 않을까요? 발생하지 않습니다. &lt;code&gt;upload_to&lt;/code&gt;는 업로드 된 파일을 지정한 경로에 저장할 때 참조합니다. 그래서 해당 데이터 객체의 경로는 이전 업로드 경로를 포함하여 지정됩니다.&lt;/p&gt;

&lt;h4&gt;(3) 첨부 파일 삭제하기&lt;/h4&gt;

&lt;p&gt;혹시 Admin 영역에서 추가한 &lt;code&gt;Photo&lt;/code&gt; 모델의 객체를 지워보셨나요? Admin 영역에서는 모델 객체를 추가하는 것 뿐만 아니라 기존 모델 객체를 수정하거나 지우는 기능을 기본 제공합니다. 한 번 모델 객체를 지워 보세요.&lt;/p&gt;

&lt;p&gt;이상한 점 발견하셨나요? 모델 객체를 지우면 객체 자체는 지워지는데 그 객체에 연결된 파일들, 그러니까 업로드한 두 개 파일은 지워지지 않고 여전히 남아 있습니다. Django의 모델 기능은 모델 객체가 삭제되어도 그 모델 객체의 파일 필드에 연결된 파일을 지우지 않습니다. 그래서 삭제할 모델 객체를 먼져 가져와서 연결된 파일을 일일이 지워준 후에 모델 객체를 지워야 합니다.&lt;/p&gt;

&lt;p&gt;모델 객체가 삭제될 때 그 모델 객체에 연결된 파일도 자동으로 함께 지우는 기능은 따로 구현해야 합니다. 몇 가지 방법이 있습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;모델을 삭제하는 기능이 호출되면 파일 삭제 기능도 실행&lt;/li&gt;
&lt;li&gt;모델이 삭제되는 신호가 감지되면 파일 삭제 기능도 실행 &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2번은 나중에 알아보기로 하고, 이번 편에서는 1번 방법을 구현해 보겠습니다.&lt;/p&gt;

&lt;p&gt;Django framework은 &lt;code&gt;delete&lt;/code&gt;라는 인스턴스 메서드를 호출하여 모델 객체를 지웁니다. Admin 영역에 있는 삭제 기능도 이 메서드를 호출하는 겁니다. 이 메서드는 &lt;code&gt;Model&lt;/code&gt; 클래스에 정의되어 있습니다. 우리가 Django 모델을 만들 때 클래스에 &lt;code&gt;models.Model&lt;/code&gt;을 상속받도록 지정했기 때문에 우리가 만든 모델에 &lt;code&gt;delete&lt;/code&gt; 메서드를 따로 만들지 않아도 됐던 것이지요. 그렇다면 우리가 만든 모델에 &lt;code&gt;delete&lt;/code&gt; 인스턴스 메서드를 만들고 이 메서드가 호출되면 업로드 파일을 지우고 나서 모델 객체를 지우는 원래 &lt;code&gt;delete&lt;/code&gt; 메서드 기능을 수행하면 되겠군요. 그런 기능을 구현한 코드부터 보겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;class Photo(models.Model):
    # 중략

    def delete(self, *args, **kwargs):
        self.image_file.delete()
        self.filtered_image_file.delete()
        super(Photo, self).delete(*args, **kwargs)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;먼저 &lt;code&gt;def delete(self, *args, **kwargs):&lt;/code&gt;는 특별한 내용은 없습니다. &lt;code&gt;delete&lt;/code&gt; 함수는 인스턴스 메서드이므로 첫 번째 인자로 객체 자신을 &lt;code&gt;self&lt;/code&gt;라는 이름으로 넘겨 받습니다. &lt;a href=&quot;http://stackoverflow.com/questions/3394835/args-and-kwargs&quot;&gt;&lt;code&gt;*args&lt;/code&gt;와 &lt;code&gt;**kwargs&lt;/code&gt;는 함수가 넘겨받는 인자를 미리 알지 못하는 경우에 함수가 넘겨받는 인자를 담는 객체&lt;/a&gt;입니다. &lt;code&gt;delete&lt;/code&gt; 메서드로 뭘 인자로 넘길 지는 모르겠지만 어쨌든 넘겨받은 그대로 &lt;code&gt;Model&lt;/code&gt;클래스의 &lt;code&gt;delete&lt;/code&gt; 메서드로 넘겨줘야 해서 저렇게 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;self.image_file.delete()&lt;/code&gt;에서 &lt;code&gt;self.image_file&lt;/code&gt;는 &lt;code&gt;image_file&lt;/code&gt; 모델 필드를 뜻합니다. Python 클래스의 인스턴스 메서드 안에서 속성(attribute)에 접근하려면 &lt;code&gt;self.속성이름&lt;/code&gt;으로 접근하지요. &lt;code&gt;self&lt;/code&gt;는 &lt;code&gt;delete&lt;/code&gt; 인스턴스 메서드에서 첫 번째 인자로 넘겨 받았고요. 인스턴스 밖에서 접근하려면 &lt;code&gt;photo.image_file&lt;/code&gt; 이렇게 접근하겠고요. 이 &lt;code&gt;image_file&lt;/code&gt; 모델 필드는 Django의 모델 필드인 &lt;code&gt;ImageField&lt;/code&gt; 클래스의 인스턴스입니다. &lt;code&gt;ImageField&lt;/code&gt; 클래스로 만든 인스턴스는 &lt;code&gt;delete&lt;/code&gt;라는 인스턴스 메서드를 제공하며, 이름에서 알 수 있듯이 해당 모델 필드에 연결된 파일을 삭제합니다. &lt;code&gt;self.filtered_image_file.delete()&lt;/code&gt;는 무슨 코드인지 예측되지요? 필터가 적용된 이미지 파일을 지우는 겁니다.&lt;/p&gt;

&lt;p&gt;맨 마지막 줄인 &lt;code&gt;super(Photo, self).delete(*args, **kwargs)&lt;/code&gt;는 &lt;code&gt;Photo&lt;/code&gt; 모델이 상속받은 부모 클래스의 &lt;code&gt;delete&lt;/code&gt; 인스턴스 메서드를 호출합니다. 넘겨받은 인자를 그대로 전달하려고 &lt;code&gt;*args, **kwargs&lt;/code&gt;로 인자를 보내지요. 이 코드가 없으면 첨부된 업로드 파일만 삭제되고 모델 객체는 삭제되지 않습니다. 모델 객체를 지우는 건 &lt;code&gt;Model&lt;/code&gt; 클래스에 있는 &lt;code&gt;delete&lt;/code&gt; 메서드거든요. 만약 &lt;code&gt;Model&lt;/code&gt; 클래스의 &lt;code&gt;delete&lt;/code&gt; 메서드를 사용해서 모델 객체를 삭제하지 않고 여러분이 독자 구현한 코드로 모델 객체를 지우고자 한다면 &lt;code&gt;super(...)&lt;/code&gt; 이 부분을 지우고 직접 구현하면 됩니다.&lt;/p&gt;

&lt;p&gt;자, 여기까지 구현한 기능을 한 번 Admin 영역에서 시험 작동해 보세요. 모델 내용이 바뀌어서 마이그레이션 하라는 안내가 나올텐데, 해주죠, 뭐. :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;from django.db import models

class Photo(models.Model):
    image_file = models.ImageField(upload_to=&#39;static_files/uploaded/%Y/%m/%d&#39;)
    filtered_image_file = models.ImageField(upload_to=&#39;static_files/uploaded/%Y/%m/%d&#39;)
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)

    def delete(self, *args, **kwargs):
        self.image_file.delete()
        self.filtered_image_file.delete()
        super(Photo, self).delete(*args, **kwargs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아직 &lt;code&gt;Photo&lt;/code&gt; 모델에 추가할 내용이 많습니다. 누가 사진을 올렸는지 회원 정보도 담아야 하고, 사진을 올리는 경로도 손볼 것입니다. 차근 차근 구현해 나가겠습니다.&lt;/p&gt;

&lt;h3&gt;2. 부록&lt;/h3&gt;

&lt;h4&gt;(1) Django Admin 주소&lt;/h4&gt;

&lt;p&gt;Django에서 제공하는 Admin 기능은 &lt;code&gt;settings.py&lt;/code&gt;에 설정되어 있습니다. &lt;code&gt;INSTALLED_APPS&lt;/code&gt;라는 변수를 찾아 보시면 &lt;code&gt;django.contrib.admin&lt;/code&gt;이라는 줄이 보입니다. 우리가 만든 &lt;code&gt;photo&lt;/code&gt; 앱도 이곳에 추가했지요.&lt;/p&gt;

&lt;p&gt;그럼 &lt;code&gt;http://127.0.0.1:8000/admin&lt;/code&gt; 주소(URL)에서 &lt;code&gt;admin&lt;/code&gt; 부분도 어딘가에 미리 설정되어 있는 걸까요? 맞습니다. &lt;code&gt;urls.py&lt;/code&gt;에 기본으로 설정되어 있습니다. &lt;code&gt;pystagram&lt;/code&gt; 패키지(디렉터리)에 있는 &lt;code&gt;urls.py&lt;/code&gt;을 열어 보시면 &lt;code&gt;url(r&#39;^admin/&#39;, include(admin.site.urls)),&lt;/code&gt;이라는 내용이 보일 겁니다. 경로 맨 앞에 &lt;code&gt;admin&lt;/code&gt;이 있는 모든 경로를 &lt;code&gt;admin.site.urls&lt;/code&gt;에 설정되어 있는 경로에 연결(matching)하겠다는 내용입니다. 이건 &lt;code&gt;django.contrib.admin&lt;/code&gt; 패키지에서 &lt;code&gt;sites.py&lt;/code&gt; 파일에 보면 &lt;code&gt;AdminSite&lt;/code&gt; 클래스가 있는데, 그 클래스의 &lt;code&gt;get_urls&lt;/code&gt;라는 인스턴스 메서드를 호출하는 겁니다. 메서드를 프로퍼티화 하는 &lt;code&gt;@property&lt;/code&gt; 장식자(decorator)를 이용하여 &lt;code&gt;urls&lt;/code&gt;를 호출하면 &lt;code&gt;get_urls&lt;/code&gt; 인스턴스 메서드가 반환하는 정보를 던져주는 것이지요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://127.0.0.1:8000/admin&lt;/code&gt; 이 주소 대신 &lt;code&gt;/_admin&lt;/code&gt;으로 접근하고 싶다면 &lt;code&gt;^admin/&lt;/code&gt; 부분을 &lt;code&gt;^_admin/&lt;/code&gt;으로 고치면 됩니다.&lt;/p&gt;

&lt;h4&gt;(2) Django Admin 필요성&lt;/h4&gt;

&lt;p&gt;Django Admin은 이용자가 꽤 유연하게 변경하도록 만들어져 있습니다. 서비스는 고객이 사용하는 제품부 뿐만 아니라 운영에 필요한 관리 영역을 만드는 데에도 상당한 노고가 필요한데, Django Admin을 쓰면 그런 노고가 줄어 듭니다. Django Admin은 그 자체만으로도 확장성 있게 잘 만들어져 있고, Django의 모델이나 미들웨어 체계와 강하게 연계되어 있어서 직접 구현하려면 번거로운 기능을 쉽고 편하게 구현하도록 합니다.&lt;/p&gt;

&lt;p&gt;저는 이 강좌에서 Django Admin 부분만 따로 할당하지 않고, 그때 그때 필요한 내용을 설명하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;hr /&gt;
&lt;p&gt;이것으로 강좌 4편을 마칩니다. 늦어서 죄송합니다. 요즘 많이 바빠서 연재하기 힘드네요. ㅜㅜ 한 편에 너무 많은 내용을 담느라 연재 주기가 늘어지지 않도록 해보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/04-fullsource/pystagram&quot;&gt;4편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Oct 2014 19:00:49 +0900</pubDate>
        <link>http://blog.hannal.com//2014/10/start_with_django_webframework_04/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/10/start_with_django_webframework_04/</guid>
        
        <category>django</category>
        
        <category>migration</category>
        
        <category>django admin</category>
        
        <category>django model</category>
        
        
        <category>start_with_django_webframework</category>
        
      </item>
    
      <item>
        <title>3. Photo 앱과 모델 만들기</title>
        <description>&lt;p&gt;이 강좌를 연재하는 중에 Django 1.7이 정식 출시됐습니다. 다행히(?) Django를 본격 다루기 전이니 이번 편부터 Django 1.7판을 기준으로 작성하겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Django Project와 App&lt;/h3&gt;

&lt;h4&gt;(1) 개념&lt;/h4&gt;

&lt;p&gt;Python 코드가 담긴 파일을 &lt;a href=&quot;https://docs.python.org/2/tutorial/modules.html&quot;&gt;Python 모듈&lt;/a&gt;이라고 하며, &lt;a href=&quot;(https://docs.python.org/2/tutorial/modules.html#packages)&quot;&gt;Python package&lt;/a&gt;는 Python module을 묶어놓은 단위입니다. 파일 체계로 보면 디렉터리지요. Python 패키지는 반드시 초기화 모듈인 &lt;code&gt;__init__.py&lt;/code&gt;이 필요합니다.&lt;/p&gt;

&lt;p&gt;Django는 &lt;a href=&quot;https://docs.djangoproject.com/en/1.6/glossary/#term-project&quot;&gt;Django project&lt;/a&gt; 단위로 만드는데, Python 체계로 보면 Python 패키지를 뜻합니다. Django로 만드는 프로젝트에 사용되는 코드와 Django 설정값이 Python 모듈로 존재하고 모두를 포함하는 Python 패키지로 묶은 것이지요.&lt;/p&gt;

&lt;p&gt;우리가 Pystagram 프로젝트를 Django로 만든다는 건 Pystagram이라는 Python 패키지를 만들고, Pystagram에 들어가는 기능은 Python 모듈로 만든다는 뜻입니다. 그럼 Django를 써서 Pystagram을 만들려면 먼저 Pystagram 디렉터리를 만들어야 겠지요. 이 디렉터리는 Python 패키지니까 초기화 파일인 &lt;code&gt;__init__.py&lt;/code&gt;이 필요합니다. 그리고 Django framework이 참조할 프로젝트 설정 항목은 settings라는 모듈이므로 &lt;code&gt;settings.py&lt;/code&gt;라는 파일로 필요합니다. 웹 주소(URL)로 서비스에 접근하므로 각 접근 주소에 연결될 기능을 설정하는 &lt;code&gt;urls.py&lt;/code&gt;라는 파일도 필요합니다. 이 중에서 &lt;code&gt;settings.py&lt;/code&gt;는 필수 모듈입니다.&lt;/p&gt;

&lt;h4&gt;(2) Django project 만들기&lt;/h4&gt;

&lt;h5&gt;django-admin.py&lt;/h5&gt;

&lt;p&gt;Python 패키지인 Pystagram 디렉터리를 만들고, 여기에 필수 모듈인 &lt;code&gt;settings.py&lt;/code&gt;와 &lt;code&gt;__init__.py&lt;/code&gt;를 만드는 과정을 간편하게 처리하는 프로그램이 &lt;code&gt;django-admin.py&lt;/code&gt;입니다. 이 파일로 Pystagram 프로젝트를 개설하겠습니다. 그 전에 지난 편에서 꾸려놓은 개발 환경을 먼저 써볼까요?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ workon pystagram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;virtualenv로 만든 pystagram 가상 환경에 들어가는 겁니다. 지난 편에서 우리는 이 가상 영역에 Django를 설치했지요.&lt;/p&gt;

&lt;p&gt;이번엔 Pystagram 프로젝트를 개설합니다. 여러분이 원하는 아무 곳(디렉터리)에 만들어도 됩니다. 저는 &lt;code&gt;~/Workspace&lt;/code&gt; 안에다 프로그래밍 프로젝트를 넣어두니 이 안에 만들겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ django-admin.py startproject pystagram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;django-admin.py&lt;/code&gt; 프로그램(script file)에 첫 번째 인자로 &lt;code&gt;startproject&lt;/code&gt;라는 명령어를 넣고 두 번째 인자에 만들 프로젝트 이름을 넣습니다. 그러면 두 번째 인자로 넣은 프로젝트 이름으로 디렉터리가 하나 만들어 집니다.&lt;/p&gt;

&lt;h5&gt;Django Project와 Python 패키지&lt;/h5&gt;

&lt;p&gt;앞으로 만들 Pystagram 소스 파일이나 각종 매체(media) 파일은 이곳에 담는데, 이 디렉터리 자체는 Python 패키지는 아닙니다. Python 패키지가 아니므로 Python으로 불러들일 수 없고(import), 그러므로 이 디렉터리 이름은 Pystagram으로 하든 HelloWorld로 하든 아무 상관 없습니다. 만약 Pystagram이라는 이름이나 기본 기능은 그대로 쓰지만, 몇 가지 실험성 기능을 넣어서 PystagramStory라는 걸 운영하고 싶다면 이 디렉터리를 복사하면 그만입니다. Django계에서 이 디렉터리를 뜻하는 별도 용어가 있진 않고 그냥 Django project를 포함하는 뿌리 디렉터리(root directory)라고 부릅니다.&lt;/p&gt;

&lt;p&gt;실제로 Django project는 pystagram 디렉터리 안에 있는 pystagram이라는 디렉터리입니다. 그러니까 &lt;code&gt;django-admin.py&lt;/code&gt;가 만든 디렉터리는 이렇게 구성되어 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pystagram/
    manage.py
    pystagram/
        __init__.py
        settings.py
        urls.py
        wsgi.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pystagram 디렉터리 안에 있는 pystagram 디렉터리가 실제로 사용되는 Python 패키지입니다. 이 디렉터리는 Pystagram 프로젝트에서 사용할 시작 패키지라고 보면 됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/startproject/pystagram&quot;&gt;pystagram 프로젝트를 생성한 단계의 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;manage.py와 개발용 내장 웹 서버&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;manage.py&lt;/code&gt; 파일은 Django로 돌아가는 프로젝트를 다양하게 다루는 도구입니다. Database를 만들거나 개발용 내장 웹서버로 우리가 만드는 프로젝트를 서버로 구동하는 기능 등 여러 편의 요소를 제공합니다. 말이 나온 김에 Django project가 잘 만들어졌는지 &lt;code&gt;manage.py&lt;/code&gt;로 확인해 볼까요?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py runserver

또는

$ python manage.py runserver

(중략)
Django version 1.6.6, using settings &#39;pystagram.settings&#39;
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;manage.py&lt;/code&gt; 파일에 첫 번째 인자로 &lt;code&gt;runserver&lt;/code&gt; 명령을 주어 서버를 실행하자, 쉘 프롬프트가 사라지고 Django framework이 제공하는 개발용 내장 웹 서버가 실행된 상태로 대기하고 있습니다. &lt;code&gt;pystagram&lt;/code&gt; package 안에 있는 &lt;code&gt;settings&lt;/code&gt; 모듈을 참조하여 &lt;code&gt;127.0.0.1&lt;/code&gt; 주소와 &lt;code&gt;8000&lt;/code&gt;번 포트로 개발용 서버를 띄웠다는 내용, 그리고 Control 글쇠와 C 글쇠를 누르면 이 서버를 종료한다는 내용이 나와 있습니다.&lt;/p&gt;

&lt;p&gt;Django 내장 개발용 웹서버로 띄운 서비스에 접속할 수 있는 주소를 알게 됐으니 웹 브라우저를 열어서 확인합시다. &lt;code&gt;http://localhost:8000&lt;/code&gt;이나 &lt;code&gt;http://127.0.0.1:8000&lt;/code&gt;로 접속하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/09/03-django_project_works.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It worked!&lt;/p&gt;

&lt;p&gt;우린 그냥 Django project를 생성한 것 뿐인데 깔끔하게 디자인 된 환영 페이지가 뜨네요. 저도 동참하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;여러분, Django 웹 프레임워크 세상에 오신 걸 환영합니다.&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;내장 웹서버 접속 주소 바꾸기&lt;/h5&gt;

&lt;p&gt;아무 전달인자를 주지 않으면 내장 웹서버는 호스트는 127.0.0.1를, 포트는 8000를 기본으로 사용합니다. 이 주소를 바꾸려면 사용할 주소를 지정하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py runserver 127.0.0.1:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;(3) Pystagram Project 초기/사전 작업&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;django-admin.py&lt;/code&gt;로 Pystagram project를 만들고 나면 데이터베이스를 동기화하는 과정을 거칩니다. 데이터베이스를 전혀 사용하지 않는다면 생략하기도 합니다. 데이터 자체는 외부에서 매번 요청하여 가져오고, 이 데이터를 적절히 가공하여 바로 출력하면 굳이 데이터베이스를 쓰지 않아도 됩니다. 가령 &lt;a href=&quot;http://www.restapitutorial.com/&quot;&gt;REST API&lt;/a&gt;로&lt;sup id=&quot;fnref-3137:1&quot;&gt;&lt;a href=&quot;#fn-3137:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 데이터를 &lt;a href=&quot;http://json.org/json-ko.html&quot;&gt;JSON&lt;/a&gt; 형식으로 가져온 뒤 출력 양식만 바꾸거나 데이터에 접근하는 방식을 바꾸어 사용자 경험을 제공하는 식이지요.&lt;/p&gt;

&lt;p&gt;하지만 Pystagram은 데이터베이스를 사용합니다. 또한 Django에서 제공하는 여러 &lt;a href=&quot;https://docs.djangoproject.com/en/1.7/topics/http/middleware/&quot;&gt;미들웨어&lt;/a&gt;나 앱을 사용하는데, 이러한 도구도 데이터베이스를 씁니다. 그래서 동기화 과정이 필요합니다. 방법은 간단합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;manage.py&lt;/code&gt;에 &lt;code&gt;migrate&lt;/code&gt; 명령어를 주면 Django framework에서 제공하는 도구가 사용하는 데이터베이스 관련 작업을 자동으로 진행합니다. 이 &lt;code&gt;migrate&lt;/code&gt; 명령어는 Django 1.7판에 생긴 명령어인데, 1.6이하 버전에서는 &lt;code&gt;syncdb&lt;/code&gt;라는 명령어가 거의 비슷한 작업을 수행했습니다. 실제로 &lt;code&gt;syncdb&lt;/code&gt; 명령어에 대한 코드를 보면 &lt;code&gt;migrate&lt;/code&gt; 명령어를 호출합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    def handle_noargs(self, **options):
        warnings.warn(&quot;The syncdb command will be removed in Django 1.9&quot;, RemovedInDjango19Warning)
        call_command(&quot;migrate&quot;, **options)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 코드는 &lt;code&gt;django/core/management/commands/&lt;/code&gt; 패키지에 있는 &lt;code&gt;syncdb.py&lt;/code&gt; 모듈에 있습니다. &lt;code&gt;syncdb&lt;/code&gt; 명령어(command)를 실행하면 이 모듈에 있는 내용이 수행되는 것이지요. 위 코드에서 &lt;code&gt;call_command(&quot;migrate&quot;, **options)&lt;/code&gt; 부분을 보면 &lt;code&gt;syncdb&lt;/code&gt;가 넘겨받은 매개변수 &lt;code&gt;**options&lt;/code&gt;를 그대로 &lt;code&gt;migrate&lt;/code&gt; 명령어를 호출하며 넘깁니다. &lt;code&gt;syncdb&lt;/code&gt; 명령어가 1.7판에도 여전히 존재하지만 1.9판에서는 제거될 예정이라는 안내 문구도 보이는군요. ^^&lt;/p&gt;

&lt;p&gt;하지만 &lt;code&gt;migrate&lt;/code&gt;와 &lt;code&gt;syncdb&lt;/code&gt;가 똑같은 일을 수행하지는 않습니다. &lt;code&gt;syncdb&lt;/code&gt;는 &lt;code&gt;migrate&lt;/code&gt; 명령어를 수행한 다음에 최고 권한 이용자(super user)를 만드는 일도 합니다. 이 작업은 &lt;code&gt;createsuperuser&lt;/code&gt; 명령어로 합니다. 즉 &lt;code&gt;syncdb&lt;/code&gt; == &lt;code&gt;migrate&lt;/code&gt; + &lt;code&gt;createsuperuser&lt;/code&gt;인 셈이지요. 최고 권한 이용자도 만들겠습니다. 곧 필요하거든요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py createsuperuser
Username (leave blank to use &#39;hannal&#39;): hannal
Email address: 
Password:
Password (again):
Superuser created successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;비밀번호는 언제든지 &lt;code&gt;changepassword&lt;/code&gt; 명령어로 바꿀 수 있습니다. 바꿀 대상(username)을 지정하면 되지요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py changepassword hannal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;바꿀 대상을 지정하지 않으면 처음 만든 이용자가 기본 지정됩니다.&lt;/p&gt;

&lt;p&gt;이렇게 수행한 데이터베이스 작업은 &lt;code&gt;db.sqlite3&lt;/code&gt;라는 파일에 저장됩니다. 이 파일은 &lt;a href=&quot;http://sqlite.org/&quot;&gt;sqlite3&lt;/a&gt;이라는 데이터베이스 엔진이 다루는 데이터베이스 파일입니다. Django framework은 따로 &lt;code&gt;settings.py&lt;/code&gt;에 설정하지 않으면 기본으로 sqlite3 데이터베이스를 사용하도록 되어 있습니다. 서비스용으로는 쓰기엔 기능과 성능이 부족하지만, 가볍고 간단해서 개발용으로 쓰기엔 더할 나위없이 좋습니다. 더구나 Linux나 Mac OS X은 운영체제에서 기본 제공하며, Python도 sqlite의 데이터베이스를 다루는 API를 기본 내장하고 있습니다.&lt;/p&gt;

&lt;p&gt;Django framework에서 제공하는 도구가 사용할 데이터베이스 관련 작업과 최고 권한 이용자를 만들었으니 이제 본격 Pystagram을 만들 차례입니다.&lt;/p&gt;

&lt;h4&gt;(4) Photo App 초기 작업&lt;/h4&gt;

&lt;h5&gt;Django App&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.hannal.com/start_with_django_webframework_01/&quot;&gt;Pystagram 기획&lt;/a&gt;에서 가장 먼저 기획한 기능이 무엇일까요? 퀴즈 아니니 기억 안 나시면 기획 내용 보고 오셔도 됩니다. 제가 가장 먼저 기획한 기능은 사진 관련 기능이었습니다. 그 다음이 사용자와 회원 기능, 그 다음이 사진 모아보는 기능이었지요. 이 각각은 사진 올리기, 사진 보기와 같이 세부 기능이 묶여 있지요. 이렇게 목적을 가진 뭔가를 수행하는 애플리케이션(application)을 Django계에선 Django App이라고 부릅니다. Django project는 이러한 App이 하나 이상 조합물입니다.&lt;/p&gt;

&lt;p&gt;보통은 Django App은 해당 App으로 분리된 Python 패키지 형식입니다. &lt;code&gt;models&lt;/code&gt;와 &lt;code&gt;views&lt;/code&gt; 모듈과 같이 각 App에 필요한 모듈로 구성합니다. 필수 모듈은 아니지만, “어떤 목적을 수행하는 애플리케이션”이라는 정의를 따른다면 자연스레 이런 모듈이 필요하게 됩니다. 그리고 Django project와 마찬가지로 Django app도 자동화 도구로 편하게 생성할 수 있습니다.&lt;/p&gt;

&lt;h5&gt;manage.py로 Photo App 만들기&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;manage.py&lt;/code&gt;가 Django project로 돌아가는 프로젝트를 지원하는 도구라는 것 기억하시죠? 이 파일로 App을 만들면 편합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py startapp photo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;django-admin.py&lt;/code&gt;과 마찬가지로 별다른 안내 없이 생성됩니다. 뭔가 안내가 나타났다면 문제가 있는 거고요. &lt;code&gt;manage.py&lt;/code&gt;로 만든 Django app인 Photo app은 다음과 같이 구성되어 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pystagram/
    manage.py
    pystagram/
        __init__.py
        settings.py
        urls.py
        wsgi.py
    photo/
        __init__.py
        admin.py
        models.py
        tests.py
        views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;photo&lt;/code&gt; package가 photo app입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/startapp_photo/pystagram&quot;&gt;photo App을 생성한 단계의 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;admin.py&lt;/code&gt;는 관리자 영역에서 이 App을 다루는 코드를 담는 모듈입니다. Django의 강점이자 매력 요소인데, 다음 편에서 다룹니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;models.py&lt;/code&gt;은 모델을 정의하는 모듈인데 모델(model)은 데이터(data)를 구성하는 항목 자체(field)와 데이터를 다루는 행위(behaviour)를 포함한 것입니다. 사진은 찍은 날짜, 사진 그 자체, 인화지, 이름과 같은 사진 구성 정보, 그리고 사진을 크게 확대해서 보거나 특정 부분을 오려내거나 복사하거나 종이로 접어 날려보내는 것과 같이 관련 행위로 구성됩니다. 이런 사진 관련 정보나 행위를 사진이라는 객체로 표현하는 것이 모델입니다. 우리가 다루고자 하는 대상 그 자체인데, 사람이 인지(recognition)하는 표현물은 아닙니다. 비유를 들자면, 하드 디스크에 있는 사진이라는 이미지 파일인 겁니다. 이미지 데이터일 뿐, 그게 어떤 사진인지는 알지 못 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views.py&lt;/code&gt;는 특정 주소(URL)에 접근하면 화면에 내용을 표시하는 Python 함수를 호출하는 내용을 담습니다. 이름만 보면 인화되거나 출력된 표현물 같지만, 정확한 용도는 우리가 인지하는 표현물로 안내하는 역할을 합니다. 비유를 들자면, 이미지 파일 뷰어나 프린터입니다. 그럼 대체 표현물은 뭘까요? MVC 패턴에서는 View가 표현물이지만, Django계에서는 &lt;code&gt;template&lt;/code&gt;이 표현물입니다. Django에서 View는 데이터(모델)를 표현(템플릿)하는 연결자이자 안내자입니다. MVC 패턴으로 보면 Controller와 유사합니다.&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;code&gt;tests.py&lt;/code&gt;은 &lt;a href=&quot;http://ko.wikipedia.org/wiki/%EC%9C%A0%EB%8B%9B_%ED%85%8C%EC%8A%A4%ED%8A%B8&quot;&gt;Unit test&lt;/a&gt; 내용을 담는 모듈입니다. 나중에 직접 겪어 보도록 하겠습니다.&lt;/p&gt;

&lt;h4&gt;(4) Photo App 만들기&lt;/h4&gt;

&lt;p&gt;사진을 다루는 App인 Photo App을 만들려면 무엇부터 해야 할까요? 뭔가를 만드는 시작은 &lt;a href=&quot;http://ko.wikipedia.org/wiki/Hello_world_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8&quot;&gt;Hello world&lt;/a&gt;류이니 템플릿으로 화면에 뭔가를 출력하는 게 미덕이겠지만, 우리가 직접 입력한 Python 코드만 없을 뿐 Django 템플릿을 이용해 “It worked!”를 이미 출력해 봤습니다. 그러니 모델을 실제로 만들어 보도록 하겠습니다.&lt;/p&gt;

&lt;h5&gt;Photo model 만들기&lt;/h5&gt;

&lt;p&gt;Django project에서 모델은 &lt;code&gt;db&lt;/code&gt; package의 &lt;code&gt;models&lt;/code&gt; 모듈에 있는 &lt;code&gt;Model&lt;/code&gt; 클래스(class) 사용하여 만듭니다. 말이 복잡한데 간단히 말해서 &lt;code&gt;models&lt;/code&gt; 모듈이 django의 &lt;code&gt;db&lt;/code&gt; package 안에 있으니 &lt;code&gt;from django.db import models&lt;/code&gt; 이렇게 접근해서 불러온다는 뜻입니다. Django로 만드는 애플리케이션의 모델은 바로 이 &lt;code&gt;Model&lt;/code&gt; 클래스의 자식클래스(하위클래스, subclass)이므로 &lt;code&gt;Model&lt;/code&gt; 클래스를 상속 받습니다.&lt;/p&gt;

&lt;p&gt;그럼 &lt;code&gt;Model&lt;/code&gt; 클래스를 사용하여 &lt;code&gt;photo&lt;/code&gt; App에 &lt;code&gt;Photo&lt;/code&gt; 모델을 만들어 보겠습니다. 이 모델은 사진을 다루는 기본 데이터를 다룹니다. 모델이니 &lt;code&gt;models.py&lt;/code&gt;를 고쳐야겠지요?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;# coding: utf-8

from django.db import models

class Photo(models.Model):
    id = &#39;개별 사진을 구분하는 색인값&#39;
    image_file = &#39;원본 사진 파일&#39;
    filtered_image_file = &#39;필터 적용된 사진 파일&#39;
    description = &#39;사진에 대한 설명문&#39;
    created_at = &#39;생성일시&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Django에서 모델의 속성(attribute)은 데이터베이스 필드(field)로 나타냅니다. Python 클래스로 놓고 보면 속성이지만, Django 모델의 데이터 요소로 다루고자 할 경우 Django 모델이 제공하는 별도 자료형(type)으로 값을 다루는데, 이 자료형인 값을 모델 필드라고 하지요. 그래서 위 모델에서 &lt;code&gt;image_file&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; 등은 아직은 그냥 Python 클래스 속성입니다. 각각이 무엇인지는 코드로 표현해놨으니 따로 설명드리진 않겠습니다.&lt;/p&gt;

&lt;p&gt;이제 이 속성들을 Django 모델 필드로 바꾸겠습니다. 그래야 비로소 Django model이 제공하는 기능을 쓸 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;image_file&lt;/code&gt;은 이용자가 올리는 원본 이미지 파일을 담습니다. Django의 model에는 파일을 다루는 필드는 &lt;code&gt;FileField&lt;/code&gt;가 있는데, 이런 필드 종류를 Django에서는 필드 타입(field type)이라고 부릅니다. 이 필드로 파일을 건내면 저장소(storage)에 파일을 저장하고 이 파일에 접근하는 연결자 역할을 하며, 파일 관련 기능이나 정보를 제공합니다. 이 필드 자체에 파일을 직접 저장하는 건 아닙니다. 그리고 파일 중에서도 이미지 파일을 대상으로 하는 &lt;code&gt;ImageField&lt;/code&gt;도 있습니다. &lt;code&gt;ImageField&lt;/code&gt;의 기본 바탕은 &lt;code&gt;FileField&lt;/code&gt;인데, 실제로도 &lt;code&gt;FileField&lt;/code&gt;를 상속 받은 클래스입니다&lt;sup id=&quot;fnref-3137:2&quot;&gt;&lt;a href=&quot;#fn-3137:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. 이미지 면적(dimension)이나 길이(width, height)같은 정보를 제공해서 이미지 파일만 다룬다면 &lt;code&gt;ImageField&lt;/code&gt;를 쓰는 게 더 편합니다.&lt;/p&gt;

&lt;p&gt;모델 필드에는 몇 가지 선택 항목을 지정하곤 하는데, 이런 선택 항목을 필드 옵션(field option)이라고 합니다. &lt;code&gt;ImageField&lt;/code&gt; 필드엔 &lt;code&gt;upload_to&lt;/code&gt;, &lt;code&gt;height_field&lt;/code&gt;, &lt;code&gt;width_field&lt;/code&gt;, &lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;storage&lt;/code&gt; 등이 있는데, &lt;code&gt;height_field&lt;/code&gt;, &lt;code&gt;width_field&lt;/code&gt;가 &lt;code&gt;ImageField&lt;/code&gt; 전용 옵션이며, 나머지는 &lt;code&gt;FileField&lt;/code&gt;에서 상속받은 항목입니다. 이 항목은 필수 지정 사항은 아니며, 따로 설정하지 않으면 Django에서 기본 설정된 내용을 따릅니다. 자세한 건 나중에 다시 설명하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;filtered_image_file&lt;/code&gt;는 원본 이미지 파일에 필터(filter)를 적용한, 즉 가공을 거친 파일입니다. 원본 이미지 파일을 저장하지 않는다면 필요없는 필드인데, 여러분을 좀 괴롭히는 기능을 만들 거라서 원본 이미지 파일과 가공을 거친 이미지 파일을 구분해서 모두 저장하겠습니다. 어쨌든 가공을 거친 파일도 이미지 파일이므로 &lt;code&gt;ImageField&lt;/code&gt; 필드 타입을 쓰겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;description&lt;/code&gt;은 사진에 사진글 작성자가 기입한 내용입니다. 그냥 글자만 넣으면 되는데, 글자를 입력하는 필드 타입은 &lt;code&gt;CharField&lt;/code&gt;와 &lt;code&gt;TextField&lt;/code&gt;가 있습니다. 물론 &lt;code&gt;ImageField&lt;/code&gt;이 &lt;code&gt;FileField&lt;/code&gt;를 상속 받아서 확장된 기능을 제공하는 것처럼 &lt;code&gt;CharField&lt;/code&gt; 필드 타입을 상속받아서 특별한 임무를 수행하는 클래스도 있습니다. &lt;code&gt;SlugField&lt;/code&gt;나 &lt;code&gt;URLField&lt;/code&gt;, &lt;code&gt;EmailField&lt;/code&gt;, &lt;code&gt;CommaSeperatedIntegerField&lt;/code&gt;  같은 거죠. 필드 타입명만으로 무슨 역할을 할 지 대략 예상이 가는군요. &lt;code&gt;CommaSeperatedIntegerField&lt;/code&gt;는 정수(Integer)를 다루는 필드처럼 보이는데 &lt;code&gt;CharField&lt;/code&gt;를 상속하는 문자형 필드인 이유는 쉼표(comma) 자체가 문자이기 때문입니다.&lt;/p&gt;

&lt;p&gt;문자열을 다룬다는 점에서 &lt;code&gt;CharField&lt;/code&gt;와 &lt;code&gt;TextField&lt;/code&gt;는 같지만, 실은 전혀 다릅니다. &lt;code&gt;CharField&lt;/code&gt;는 데이터베이스의 &lt;code&gt;VARCHAR&lt;/code&gt;에 대응합니다. Django는 통상 200자 정도를 보장합니다. “보장”이라는 표현을 쓴 이유는 데이터베이스 시스템에 따라 &lt;code&gt;VARCHAR&lt;/code&gt; 제한 길이가 다르기 때문입니다. 그에 반해 &lt;code&gt;TextField&lt;/code&gt;는 이보다 훨씬 긴 문자열을 다룹니다. 이것도 데이터베이스 시스템에 따라 길이 제한이 다른데, SQLite3는 약 1기가 바이트까지 저장하는 &lt;code&gt;text&lt;/code&gt;, PostgreSQL은 길이 제한이 없는 &lt;code&gt;text&lt;/code&gt;, MySQL은 약 4기가 바이트까지 담는 &lt;code&gt;longtext&lt;/code&gt;, Oracle은 약 8~12테라 바이트까지 담는 &lt;code&gt;NCLOB&lt;/code&gt;에 대응합니다&lt;sup id=&quot;fnref-3137:3&quot;&gt;&lt;a href=&quot;#fn-3137:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref-3137:4&quot;&gt;&lt;a href=&quot;#fn-3137:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. 보통은 긴 문자열을 담는 저러한 필드형에는 데이터베이스 인덱스가 걸리지 않으므로 Django의 &lt;code&gt;TextField&lt;/code&gt; 필드에도 데이터베이스의 인덱스가(필드 옵션 : &lt;code&gt;db_index&lt;/code&gt;) 걸리지 않습니다.&lt;/p&gt;

&lt;p&gt;어쨌든 데이터베이스 시스템에 따라서 &lt;code&gt;TextField&lt;/code&gt; 필드의 길이제한 단위가 무시무시한데, 굳이 저렇게 긴 문자열을 저장하진 않을 겁니다. 안 예쁘잖아요. 최대 길이를 500자로 제한하겠습니다. &lt;code&gt;CharField&lt;/code&gt;와 &lt;code&gt;TextField&lt;/code&gt; 둘 다 &lt;code&gt;max_length&lt;/code&gt;라는 필드 옵션으로 최대 문자열 길이를 제한하며, &lt;code&gt;CharField&lt;/code&gt;는 &lt;code&gt;max_length&lt;/code&gt; 필드 옵션을 반드시 넣어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;created_at&lt;/code&gt;은 Photo 모델이 생성되어 데이터베이스에 저장되는 시각을 담는데, Django에는 날짜를 다루는 &lt;code&gt;DateField&lt;/code&gt;, 시간을 다루는 &lt;code&gt;TimeField&lt;/code&gt;, 그리고 날짜와 시간을 같이 다루는 &lt;code&gt;DateTimeField&lt;/code&gt;가 있습니다. 생성일시 정보를 다루니 &lt;code&gt;DateTimeField&lt;/code&gt;를 쓰겠습니다. 이 필드에는 &lt;code&gt;auto_now&lt;/code&gt; 옵션과 &lt;code&gt;auto_now_add&lt;/code&gt; 옵션이 있는데, 자동으로 현재 시간 정보를 담을 지 여부를 &lt;code&gt;True&lt;/code&gt;와 &lt;code&gt;False&lt;/code&gt;로 지정합니다. &lt;code&gt;auto_now_add&lt;/code&gt;는 객체가 처음 생성될 때, &lt;code&gt;auto_now&lt;/code&gt;는 객체가 저장될 때 자동으로 시간 정보를 담습니다. &lt;code&gt;auto_now&lt;/code&gt;는 &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;auto_now_add&lt;/code&gt;는 &lt;code&gt;True&lt;/code&gt;로 설정한다면, 데이터가 처음 저장되는 시간 정보만 잡히고, 이후에 그 데이터를 수정하여 저장하더라도 자동으로 시간 정보가 담기진 않겠지요. 코드로 표현한다면 이런 모습일 겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;from datetime import datetime

the_photo.save()

if the_photo.is_created is True:
    the_photo.created_at = datetime.now()
    the_photo.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;저 두 옵션을 활용하면 이런 코드를 생략하는 것이니 깔끔하고 편하지요.&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;code&gt;id&lt;/code&gt;는 값이 겹치지 않는 색인이며, 이 값이 각 사진을 구분 짓는 고유값입니다. Django에서는 &lt;code&gt;id&lt;/code&gt;라는 필드를 따로 정하지 않으면 관례에(conventional) 따라 &lt;code&gt;AutoField&lt;/code&gt;로 &lt;code&gt;id&lt;/code&gt;를 Django framework가 알아서(자동으로) 만들어 다룹니다. 그러니 우리는 굳이 &lt;code&gt;id&lt;/code&gt;를 정의하지 않아도 됩니다.&lt;/p&gt;

&lt;p&gt;자, 이제 그냥 클래스 속성으로 구성된 기존 &lt;code&gt;Photo&lt;/code&gt; 모델을 Django 모델로 바꿔 보겠습니다. 아참, 이 필드들은 &lt;code&gt;models&lt;/code&gt; 모듈에 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;class Photo(models.Model):
    image_file = models.ImageField()
    filtered_image_file = models.ImageField()
    description = models.TextField(max_length=500)
    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;데이터베이스에 반영 (migration)&lt;/h5&gt;

&lt;p&gt;Django 1.7 이전 판에서는 &lt;code&gt;manage.py&lt;/code&gt;에 &lt;code&gt;syncdb&lt;/code&gt; 명령으로 우리가 만든 모델을 데이터베이스에 반영했지만, 1.7판부터는 &lt;code&gt;makemigrations&lt;/code&gt;과 &lt;code&gt;migrate&lt;/code&gt; 명령어를 이용합니다. &lt;code&gt;Photo&lt;/code&gt; 모델을 마이그레이션 하려면 &lt;code&gt;settings.py&lt;/code&gt;에 &lt;code&gt;photo&lt;/code&gt; 앱을 추가해야 하니 &lt;code&gt;settings.py&lt;/code&gt;에서 &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 항목을 찾아서 다음과 같이 &lt;code&gt;photo&lt;/code&gt;를 추가합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;INSTALLED_APPS = (
    &#39;django.contrib.admin&#39;,
    &#39;django.contrib.auth&#39;,
    &#39;django.contrib.contenttypes&#39;,
    &#39;django.contrib.sessions&#39;,
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
    &#39;photo&#39;,
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그 다음에 &lt;code&gt;makemigrations&lt;/code&gt;으로 마이그레이션 작업 내용을 만듭니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py makemigrations 
Migrations for &#39;photo&#39;:
  0001_initial.py:
    - Create model Photo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;마이그레이션 작업 내용은 &lt;code&gt;0001_initial.py&lt;/code&gt;에 있으며, &lt;code&gt;Photo&lt;/code&gt; 모델을 생성하는 것만 있네요. 실제 코드는 &lt;code&gt;photo&lt;/code&gt; 디렉터리의 &lt;code&gt;migrations&lt;/code&gt; 디렉터리 안에 &lt;code&gt;0001_initial.py&lt;/code&gt; 있습니다. 이 작업을 실제로 수행하려면 &lt;code&gt;migrate&lt;/code&gt; 명령을 내리면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py migrate
Operations to perform:
  Apply all migrations: admin, photo, contenttypes, auth, sessions
Running migrations:
  Applying photo.0001_initial... OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 해서 &lt;code&gt;Photo&lt;/code&gt; 모델을 데이터베이스에 반영하여 연결하였습니다. 이제부터는 &lt;code&gt;Photo&lt;/code&gt; 모델로 데이터를 데이터베이스에 저장하고 찾아 꺼내며 다룰 수 있습니다.&lt;/p&gt;

&lt;h3&gt;2. 부록&lt;/h3&gt;

&lt;h4&gt;(1) MTV와 MVC&lt;/h4&gt;

&lt;p&gt;Django는 Model, Template, View의 앞자를 따서 MTV 패턴을 따릅니다. Model-View-Controller인 &lt;a href=&quot;http://opentutorials.org/course/697/3828&quot;&gt;MVC 패턴&lt;/a&gt;과 유사한데, 실제로 많은 사람은 이 패턴의 개념에 별 차이를 두지 않습니다. Django의 View는 MVC 패턴의 Controller, Template은 MVC 패턴의 View로 적당히 퉁쳐서 이해합니다. 역할로 보면 그다지 틀린 말도 아니지만, &lt;a href=&quot;https://docs.djangoproject.com/en/1.6/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names&quot;&gt;Django framework가 지향하는 철학면에서 보면 MTV 패턴과 MVC 패턴엔 미묘한 차이&lt;/a&gt;가 있습니다.&lt;/p&gt;

&lt;p&gt;재료를 가공하여 손에 닿는 결과물로 만드는 상황을 가정하지요. 여기서 재료란 Data, 즉 Model이고, 재료로 만들어 낸 결과물이 View입니다. 가공하는 행위자가 바로 Controller지요. 이게 MVC 패턴이라면, &lt;a href=&quot;https://www.djangoproject.com/foundation/&quot;&gt;Django 소프트웨어 재단&lt;/a&gt;에서는 MVC 패턴의 Controller 역할은 Django framework 그 자체가 하고 있다고 봅니다.&lt;/p&gt;

&lt;p&gt;무슨 말인지 알 듯 하기도 하고 모를 듯 하기도 하네요. :)&lt;/p&gt;

&lt;h4&gt;(2) 한날이 아이디어를 구체화 하는 과정&lt;/h4&gt;

&lt;p&gt;저는 막연한 아이디어를 구현하고자 할 땐 표현물부터 만듭니다. 가령 고객을 대상으로 하는 제품 설명서를 작성하거나 정해놓은 흐름대로만(시나리오) 작동하는 견본(sample)을 만듭니다.&lt;/p&gt;

&lt;p&gt;표현물을 먼저 만드는 이유는 사용 경험 수단을 만들어서 겪어보고, 그러면서 저 스스로 만들 대상을 실체화하는 데 좋기 때문입니다. 왜(why) 만드는지 고민하는 것이지요. 실체화(구체화)가 되면 모델을 구상합니다. 모델도 행위를 중심으로 구상합니다. 어떤 정보(데이터)가 있는지는 정보를 어떻게 보일 것인지 고민하면 얼개를 짤 수 있습니다. 그리고 보여진 데이터로 어떤 행위를 할 수 있는지 생각하면 데이터 간 관계, 연관 데이터를 예상할 수 있습니다. 어떻게(how) 목표에 달성하는지 고민한 것입니다. 그런 과정을 얼추 마치면 방법(how)에 필요한 재료를 제한합니다. 물론 만들면서 그때 그때 필요한 재료를 추가하거나 필요없는 재료를 빼기도 합니다.&lt;/p&gt;

&lt;p&gt;이렇게 하는 이유는 이런 개발 과정이 재밌어서 그렇습니다. 취향이자 성향이지요. 이 강좌를 보시는 여러분의 취향이나 성향, 철학은 각양각색이니 제 취향과 성향대로 개발하고 설명해 나가겠습니다. ^^&lt;/p&gt;

&lt;p&gt;&lt;hr /&gt;
&lt;p&gt;이것으로 강좌 3편을 마칩니다. 모델을 만들고 데이터를 실제로 저장하는 부분까지 하려 했는데, 분량이 많아져서 3편을 여기서 끊네요. 4편에서는 꼭 데이터를 저장하고 꺼내 봅시다! :)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/03-fullsource/pystagram&quot;&gt;3편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-3137:1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/leewin12/rest-api-seolgye&quot;&gt;REST API 설계&lt;/a&gt; 발표 자료에서 한국어로 잘 설명 해놨습니다.&amp;#160;&lt;a href=&quot;#fnref-3137:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3137:2&quot;&gt;
&lt;p&gt;&lt;code&gt;django/db/models/fields/files.py&lt;/code&gt; 모듈에 정의되어 있는 &lt;code&gt;ImageField&lt;/code&gt; 클래스를 참조하세요.&amp;#160;&lt;a href=&quot;#fnref-3137:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3137:3&quot;&gt;
&lt;p&gt;&lt;code&gt;django/db/backends/&lt;/code&gt;에서 mysql, oracle, sqlite3 패키지 안에 있는 &lt;code&gt;creation.py&lt;/code&gt; 모듈을 참조하세요.&amp;#160;&lt;a href=&quot;#fnref-3137:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3137:4&quot;&gt;
&lt;p&gt;글자 수가 아니라 바이트입니다.&amp;#160;&lt;a href=&quot;#fnref-3137:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Sep 2014 02:05:48 +0900</pubDate>
        <link>http://blog.hannal.com//2014/9/start_with_django_webframework_03/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/9/start_with_django_webframework_03/</guid>
        
        <category>django</category>
        
        <category>model</category>
        
        <category>migration</category>
        
        
        <category>start_with_django_webframework</category>
        
      </item>
    
      <item>
        <title>wkhtmltopdf 에서 글자 겹치는 문제</title>
        <description>&lt;p&gt;wkhtmltopdf (QT 패치 적용한 버전)으로 html을 pdf로 변환할 때 글자가 겹치는 현상이 일어나는 원인.&lt;/p&gt;

&lt;h3&gt;letter-spacing css 속성&lt;/h3&gt;

&lt;p&gt;letter-spacing이 -1px 이하인 경우 글자가 의도한 것보다 많이 겹치거나 오히려 자간이 벌어진다. -0.5px 정도로 값을 올리면 문제 해결. 하지만 환경에 따라서 이 값은 변동될 수 있으니 letter-spacing 을 적절히 조절해봐야 함.&lt;/p&gt;

&lt;h3&gt;text-indent css 속성&lt;/h3&gt;

&lt;p&gt;text-indent 속성에 엉뚱한(?) 값을 넣어 글자를 안 보이게 하는 트릭(예 : text-indent: -999999px)은 wkhtmltopdf에서 통하지 않는다. 글자들이 이상하게 커져서 한 곳에 겹쳐지는 등 전혀 엉뚱한 문제가 발생한다.&lt;/p&gt;

&lt;p&gt;해결법은 텍스트 자체를 별도 태그로 감싸서 출력을 안 시키거나 감춰야 한다.&lt;/p&gt;

&lt;p&gt;&amp;lt;div style=&quot;text-indent: -10000em;&quot;&amp;gt;&amp;lt;span style=&quot;display: none;&quot;&amp;gt;감출 글자&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;

&lt;p&gt;또는&lt;/p&gt;

&lt;p&gt;&amp;lt;div style=&quot;text-indent: -10000em;&quot;&amp;gt;&amp;lt;span style=&quot;visibility: hidden;&quot;&amp;gt;감출 글자&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;

&lt;p&gt;webkit renderer를 쓰는 safari와 chrome에서는 발견되지 않으며, wkhtmltopdf에서 발생. 이외에도 다양한 원인이 있겠지만, 현재까지 발견한 원인은 이 두 가지.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Sep 2014 00:34:40 +0900</pubDate>
        <link>http://blog.hannal.com//2014/9/letter_overlap_problem_on_wkhtmltopdf/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/9/letter_overlap_problem_on_wkhtmltopdf/</guid>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>2. 개발 환경 꾸리기</title>
        <description>&lt;ul&gt;
&lt;li&gt;마지막 갱신일시 : 2014년 08월 24일 9시 37분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 2편에서는 Pystagram을 만드는 데 필요한 개발 도구를 설치하겠습니다. 저는 Mac OS X를 쓰기 때문에 Mac OS X 환경을 기준으로 설명하며, 윈도우나 리눅스 환경용 설명은 웹에 있는 관련 자료로 대신하겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Python 설치&lt;/h3&gt;

&lt;h4&gt;(1) Mac OS X, Linux&lt;/h4&gt;

&lt;h5&gt;Python 설치&lt;/h5&gt;

&lt;p&gt;Python은 현재 두 개 큰 버전이 배포되고 사용됩니다. 2 버전과 3 버전입니다. 우리가 사용할 Python 버전은 2.7입니다. 터미널을 연 뒤에 다음 명령어를 입력해보세요. $는 입력하지 마시고요&lt;sup id=&quot;fnref-3125:1&quot;&gt;&lt;a href=&quot;#fn-3125:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ python --version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아마도 &lt;code&gt;Python 버전&lt;/code&gt; 형식인 문장이 출력될 겁니다. 대개는 버전이 2.7대입니다. 2버전대의 최신 버전은 &lt;a href=&quot;https://www.python.org/download&quot;&gt;Python 공식 웹사이트에서 내려받아 설치&lt;/a&gt;하거나 패키지 관리 도구로 설치하면 됩니다. 패키지 관리 도구로 프로그램과 같은 패키지를 관리하면 편하니 패키지 관리 도구를 권합니다. Mac OS X라면 &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;를 많이 씁니다. 저도 Homebrew로 설치하겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ brew install python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Homebrew가 설치되어 있지 않다면 &lt;a href=&quot;http://brew.sh/#install&quot;&gt;brew부터 설치&lt;/a&gt;해야 하며, brew 설치할 때 xcode 관련 도구인 Command Line Tools가 요구되기도 합니다. 대개는 관련 과정이 함께 안내되는데, 실수로 그냥 넘어갔거나 안내되지 않았다면 다음 명령어로 Command Line Tools를 설치하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ xcode-select --install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;보다 자세한 내용은 &lt;a href=&quot;http://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/&quot;&gt;How to Install Xcode, Homebrew, Git, RVM, Ruby &amp;amp; Rails on Snow Leopard, Lion, Mountain Lion, and Mavericks&lt;/a&gt; 글을 참조하세요. 만약 &lt;a href=&quot;https://github.com/Homebrew/homebrew/wiki/Xcode&quot;&gt;Mac OS X 버전이 너무 오래된 경우 Command Line Tools나 brew가 설치되지 않을 수도 있습니다&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Debian 계열 Linux라면 운영체제에 내장된 apt-get을 씁니다. Redhat 계열 Linux는 잘 모르겠네요. RPM을 쓰나요, Yum을 쓰나요? :) 이 강좌에선 Debian 계열을 전제로 두겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ apt-get install python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그런데 아마 접근 권한 문제로 설치되지 않을 겁니다. 오류 내용을 잘 보면 &lt;code&gt;Permission denied&lt;/code&gt; 문구가 포함되어 있지요. 이런 경우 &lt;code&gt;sudo&lt;/code&gt; 명령어도 써야 합니다. sudo는 다른 이용자(대개는 최고권한자(superuser 또는 root))의 권한으로 sudo 명령어 뒤에 나오는 내용을 수행하는 프로그램입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ sudo brew install python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;또는&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ sudo apt-get install python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그러면 비밀번호를 묻는데, 시스템 관리자 권한이 있는 계정의 비밀번호를 입력합니다. Mac OS X라면 대개는 현재 로그인한 자신의 계정이 이미 시스템 관리자 권한을 갖고 있으므로 자신의 계정 비밀번호를 입력하면 됩니다.&lt;/p&gt;

&lt;h4&gt;(2) Windows&lt;/h4&gt;

&lt;p&gt;제가 Mac OS X를 사용하다 보니 Windows 환경에서 Python을 설치하는 방법에 관해서는 설명하기 어렵습니다. 그래서 설치 관련 글을 소개하는 걸로 대신하겠습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://goo.gl/v1ikhD&quot;&gt;파이썬 윈도우 설치&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python-guide.org/en/latest/starting/install/win/&quot;&gt;Installing Python on Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;2. 개발 환경 구축&lt;/h3&gt;

&lt;p&gt;여기서부터는 Mac OS X, Linux 구분을 하지 않습니다. 다만, Windows는 제가 실제 설치와 작동을 확인하기 어려우니 설치 관련 자료를 별첨하겠습니다.&lt;/p&gt;

&lt;h4&gt;(1) pip 설치&lt;/h4&gt;

&lt;p&gt;pip는 Python에 사용되는 각종 패키지&lt;sup id=&quot;fnref-3125:2&quot;&gt;&lt;a href=&quot;#fn-3125:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;를 설치하거나 업그레이드, 삭제 등을 하는 관리 도구입니다. 이 도구를 설치하는 이유는 Django를 비롯하여 Python에 유용한 패키지를 쉽고 편하게 관리하기 위해서입니다.&lt;/p&gt;

&lt;p&gt;설치는 간단합니다. pip를 설치해주는 스크립트인 &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot;&gt;get-pip.py&lt;/a&gt; 파일을 받아서&lt;sup id=&quot;fnref-3125:3&quot;&gt;&lt;a href=&quot;#fn-3125:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 실행하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ python get-pip.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;별문제 없이 설치가 끝날 겁니다. &lt;code&gt;OSError: [Errno 13] Permission denied:&lt;/code&gt; 이런 식으로 오류가 발생하며 설치가 중단된다면 &lt;code&gt;sudo&lt;/code&gt;를 이용하여 시스템 관리자 권한으로 설치하면 됩니다.&lt;/p&gt;

&lt;p&gt;이외 다른 방법으로 pip를 설치하실 거라면 &lt;a href=&quot;https://pip.pypa.io/en/latest/installing.html&quot;&gt;pip installation&lt;/a&gt; 문서를 참조하세요. pip는 Mac OS X, Linux, 그리고 윈도우에서도 설치되고 작동합니다.&lt;/p&gt;

&lt;h4&gt;(2) virtualenv 설치&lt;/h4&gt;

&lt;p&gt;virtualenv는 가상으로 Python 환경을 만드는 도구입니다. Virtual Environment를 줄인 이름이겠지요?!&lt;/p&gt;

&lt;p&gt;실제 환경인 주 시스템(운영체제)에 패키지를 설치하면 패키지가 바뀔 때마다 그 패키지를 사용하는 프로젝트 모두가 영향을 받습니다. 예를 들어, Django 1.6 버전을 기반으로 Pystagram을 개발하였는데, 얼마 후 1.6버전과 호환성이 떨어지는 Django 1.7버전이 출시됐다고 가정하겠습니다. 만약 Django 1.7 버전을 설치한다면 Django 1.6 버전에서 잘 작동하던 Pystagram에 문제가 발생할 지도 모릅니다.&lt;/p&gt;

&lt;p&gt;Pystagram은 Django 1.6 버전을 기반으로, Hannal 프로젝트는 Django 1.5 버전 기반으로, Kay 프로젝트는 Django 1.7 버전 기반으로 환경을 분리하면 되는데, 한 시스템에서 이런 환경을 가상으로 분리하여 편하게 관리하도록 도와주는 도구가 바로 virtualenv입니다. Python 패키지 뿐만 아니라 사용할 Python 버전도 가상 환경으로 분리할 수 있습니다. 한 시스템에 여러 Python 버전을 설치하고, 버전에 따라 사용할 Python을 프로젝트 마다 지정할 수 있는 것이죠.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://virtualenv.readthedocs.org/en/latest/virtualenv.html&quot;&gt;virtualenv 설치&lt;/a&gt;는 pip를 이용하면 간단합니다. 아참, 관리자 권한이 필요하니 &lt;code&gt;sudo&lt;/code&gt;도 씁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ sudo pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;설치가 끝나면 virtualenv로 만드는 가상 환경이 저장될 공간을 만들고, 그 경로를 설정해야 합니다. 보통은 이용자 계정의 홈 디렉터리에 가상 환경 공간을 만듭니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ mkdir ~/.virtualenvs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그런 뒤 &lt;code&gt;.bashrc&lt;/code&gt; 나 &lt;code&gt;.bash_profile&lt;/code&gt; 파일&lt;sup id=&quot;fnref-3125:4&quot;&gt;&lt;a href=&quot;#fn-3125:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;에 이 경로를 지정해줍니다. 이 두 파일은 ~/ 경로에 있으며, 없으면 만들면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;export WORKON_HOME=$HOME/.virtualenvs    
export PROJECT_HOME=$HOME/Workspace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;WORKON_HOME&lt;/code&gt;은 virtualenv로 만드는 가상 환경이 저장될 경로를 지정하며, &lt;code&gt;PROJECT_HOME&lt;/code&gt;은 우리가 만드는 소스 파일을 담을 작업 공간입니다. 저는 ~/Workspace 에 코딩하는 소스 파일을 두는데, 여러분은 자신의 환경에 맞게 경로를 지정하면 되며, 꼭 &lt;code&gt;PROJECT_HOME&lt;/code&gt;을 지정하지 않아도 괜찮습니다.&lt;/p&gt;

&lt;p&gt;이제 위 내용을 실제로 반영하겠습니다. 터미널에서 다음 명령어를 입력하세요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ source ~/.bashrc

또는 

$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;터미널에서 다음 명령어를 실행했을 때 여러분이 지정한 경로가 나올 겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ echo $WORKON_HOME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이번엔 &lt;a href=&quot;http://virtualenvwrapper.readthedocs.org/&quot;&gt;virtualenvwrapper&lt;/a&gt;를 설치하겠습니다. 이름을 읽기 고약한데 virtualenv wrapper 입니다. virtualenv를 더 편하게 다루도록 도와주는 도구이지요. 이것도 pip로 설치하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;pip install virtualenvwrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아마도 &lt;code&gt;sudo&lt;/code&gt;가 필요할 겁니다.&lt;/p&gt;

&lt;p&gt;이제 쉘(shell)을 열 때마다 virtualenvwrapper를 쓰도록 해줘야 합니다. &lt;code&gt;.bashrc&lt;/code&gt; 을 열고 다음 줄을 추가하세요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;source /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;저 파일이 있는 경로는 여러분의 환경에 따라 다를 수 있는데, 보통은 &lt;code&gt;/usr/local/bin/&lt;/code&gt;에 있을 겁니다. 이제 &lt;code&gt;source ~/.bash_rc&lt;/code&gt; 를 실행하여 방금 &lt;code&gt;.bashrc&lt;/code&gt;에 추가한 내용을 반영합니다. 잘 됐는 지 확인하려면 터미널에서 &lt;code&gt;workon&lt;/code&gt; 명령어를 실행해보세요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ workon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;별달리 출력되는 게 없다면 지금까지 과정을 제대로 마친 겁니다.&lt;/p&gt;

&lt;h5&gt;Windows에 pip와 virtualenv 설치 관련 자료&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tylerbutler.com/2012/05/how-to-install-python-pip-and-virtualenv-on-windows-with-powershell/&quot;&gt;How To Install Python, pip, and virtualenv on Windows with PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python-guide.org/en/latest/starting/install/win/#setuptools-pip&quot;&gt;Installing Python on Windows - Setuptools + Pip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;(3) SQLite 설치&lt;/h4&gt;

&lt;p&gt;데이터를 저장하는 데 필요한 데이터베이스는 &lt;a href=&quot;http://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;를 사용할 겁니다. 실제 서비스를 운영하기엔 부족하지만, 공부하는 데엔 참 좋습니다.&lt;/p&gt;

&lt;p&gt;Mac OS X나 Linux 계열 운영체제엔 SQLite 3가 보통은 이미 설치되어 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ sqlite3
SQLite version 3.8.5 2014-06-04 14:06:34
Enter &quot;.help&quot; for usage hints.
Connected to a transient in-memory database.
Use &quot;.open FILENAME&quot; to reopen on a persistent database.
sqlite&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그래서 SQLite 3 설치를 신경써야 하는 경우는 흔하지 않으며, 여러분이 SQLite 3이 설치되어 있지 않아서 문제를 겪는 경우도 드뭅니다. 하지만 그 드문 일을 대비해 설치하는 과정을 다루겠습니다.&lt;/p&gt;

&lt;p&gt;Mac OS X에서는 Homebrew로 설치하거나 버전 업그레이드를 하면 편합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ brew update
$ brew upgrade
$ brew install sqlite3
$ brew link --force sqlite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;하지만 이미 &lt;code&gt;sqlite3&lt;/code&gt;이 설치되어 있다는 경고가 표시되며 설치되지 않을 겁니다. 이미 설치되어 있을 테니까요.&lt;/p&gt;

&lt;p&gt;Debian 계열 Linux라면 apt-get으로 설치하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ apt-get install sqlite3 libsqlite3-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;libsqlite3-dev&lt;/code&gt;는 SQLite 3 개발용 라이브러리입니다.&lt;/p&gt;

&lt;p&gt;그런데 패키지 관리 도구로 설치가 안 되거나 직접 소스를 직접 컴파일하여 설치하고 싶다면 &lt;a href=&quot;http://sqlite.org/download.html&quot;&gt;sqlite.org의 Download&lt;/a&gt; 페이지에 가서  “Source Code” 영역에 있는 &lt;code&gt;sqlite-autoconf&lt;/code&gt;로 이름이 시작하는 파일을 받습니다. 파일 확장자는 &lt;code&gt;tar.gz&lt;/code&gt;입니다. 이 소스 파일을 다음과 같이 컴파일하여 설치하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./configure --prefix=/usr/local
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SQLite 3가 &lt;code&gt;/usr/local/&lt;/code&gt; 에 설치되고, &lt;code&gt;/usr/local/bin/&lt;/code&gt;에 &lt;code&gt;sqlite3&lt;/code&gt; 파일이 생깁니다. 하지만 패키지 관리 도구로 설치되지 않을 정도로 오래된 운영체제라면 &lt;strong&gt;직접&lt;/strong&gt; 소스 컴파일해서 프로그램을 설치하느니 운영체제를 더 최신 버전으로 업그레이드 하는 게 나을 것 같습니다. :)&lt;/p&gt;

&lt;p&gt;Python으로 SQLite 3를 사용하는 데 필요한 인터페이스는 대개 Mac OS X나 Linux에 기본 내장되어 있습니다. Python 쉘에서 간단히 확인할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;]]] import sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;하지만 어떤 이유에서인지 SQLite 3 인터페이스 모듈이 없거나 제대로 불러오지 못하는 경우가&lt;sup id=&quot;fnref-3125:9&quot;&gt;&lt;a href=&quot;#fn-3125:9&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; 있습니다. &lt;code&gt;ImportError: No module named _sqlite3&lt;/code&gt; 이런 오류를 내면서 말이죠. 이건 예전 Python 버전이 주 시스템에 설치되어 있는 상태에서 최신 Python 버전을 설치하는 과정 중에 &lt;code&gt;_sqlite3.so&lt;/code&gt; 파일이 제대로 설치되지 않아서 그렇습니다. 여러 해결 방법이 있지만, 저는 다른 인터페이스 모듈을 pip로 설치하여 해결하겠습니다. 물론 virtualenv 가상 환경에 말이죠.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ workon pystagram
(pystagram)$ pip install pysqlte
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pysqlite은 Python에 기본 내장된 &lt;code&gt;sqlite3&lt;/code&gt; 인터페이스와 다른 모듈입니다. 그래서 다음과 같이 사용하는 경우가 많습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;try:
    import sqlite3
except:
    from pysqlite2 import dbapi2 as sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pysqlite3&lt;/code&gt;에 있는 &lt;code&gt;dbapi2&lt;/code&gt;(database api 2)를 &lt;code&gt;sqlite3&lt;/code&gt;으로 이름 붙인 것(alias)입니다. 인터페이스가 같기 때문에 가능한 것이지요. 하지만 웬지 번거로워 보이네요. 그래도 걱정 마세요. Django에는 이미 저런 처리가 되어 있습니다.&lt;/p&gt;

&lt;h5&gt;Windows에 SQLite 3 설치&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://goo.gl/buqvp3&quot;&gt;윈도우 sqlite 설치&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;3. Django 설치&lt;/h3&gt;

&lt;p&gt;이제 드디어 Django를 설치할 차례입니다. virtualenv로 가상 환경을 만들고 그곳에 Django를 설치하겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ mkvirtualenv pystagram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt;는 필요 없으며, 위 명령어를 실행하면 아마 다음과 같이 뭔가가 출력될 겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;New python executable in pystagram/bin/python    
Installing Setuptools................................done.    
Installing Pip.......................................done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;앞에서 &lt;code&gt;WORKON_HOME&lt;/code&gt;으로 지정한 경로에 &lt;code&gt;pystagram&lt;/code&gt; 디렉터리가 생성되어 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ls $WORKON_HOME

또는 

$ ls ~/.virtualenvs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;우리가 virtualenv로 만든 pystagram이라는 가상 환경 공간에서 Django를 설치하면 Python이 설치된 주 시스템이 아닌 저 경로에(&lt;code&gt;~/.virtualenvs/pystagram&lt;/code&gt;) 설치됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkvirtualenv&lt;/code&gt;로 가상 환경을 만들면 여러분의 쉘은 자동으로 그 가상 환경으로 들어 갑니다. 아마 쉘 프롬프트는 이렇게 표시될 겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;(pystagram)$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그 상태에서 &lt;code&gt;deactivate&lt;/code&gt; 명령어를 실행해보세요. 그러면 쉘 프롬프트에 &lt;code&gt;(pystagram)&lt;/code&gt; 부분이 표시되지 않는데, &lt;code&gt;pystagram&lt;/code&gt;이라 이름 붙인 가상 환경에서 빠져 나와서 그렇습니다.&lt;/p&gt;

&lt;p&gt;Django를 pystagram 가상 환경에 설치하기 위해 다시 이 가상 환경으로 들어가겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ workon pystagram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;workon&lt;/code&gt;은 virtualenvwrapper에서 제공하는 명령어입니다. &lt;code&gt;workon&lt;/code&gt;만 실행하면 만들어 놓은 가상 환경 항목이 표시됩니다. &lt;code&gt;workon&lt;/code&gt; 뒤에 사용할 가상 환경 항목 이름을 일부 입력하고 탭(tab) 키를 누르면 나머지 부분이 자동 완성되기도 합니다. &lt;code&gt;workon pys&lt;/code&gt;까지 입력하고 탭을 누르면 나머지 &lt;code&gt;tagram&lt;/code&gt;이 자동 완성되는 것이지요.&lt;/p&gt;

&lt;p&gt;앞으로 우리는 이 가상 환경 안에서 Python 패키지를 관리합니다. 그 첫 번째로 Django를 설치하겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;(pystagram)$ pip install django
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;주 시스템에 설치하지 않고 가상 환경에 설치하기 때문에 관리자 권한은 필요 없어서 &lt;code&gt;sudo&lt;/code&gt;를 쓰지 않았습니다.&lt;/p&gt;

&lt;p&gt;설치가 잘 됐는지 확인해 보겠습니다. 쉘에서 &lt;code&gt;python&lt;/code&gt;을 실행하면 Python 대화형 쉘이 실행됩니다. Python 대화형 쉘에서 다음 명령어를 입력하여 Django 버전을 확인해 보겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;(pystagram)$ python    
Python 2.7.5 (default, Mar  9 2014, 22:15:05)    
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin    
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.    
]]] import django    
]]] django.VERSION    
(1, 6, 6, &#39;final&#39;, 0)    
]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;실제로는 프롬프트 기호가 &lt;code&gt;]]]&lt;/code&gt; 대신 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;가 표시됩니다.&lt;/p&gt;

&lt;p&gt;Python 프롬프트에서 &lt;code&gt;import django&lt;/code&gt;를 실행하면 아무런 안내없이 다음 프롬프트(&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;)가 출력되는 경우가 잘 설치된 겁니다. Django가 제대로 설치가 안 됐거나 경로(PATH) 설정에 문제가 있다면 &lt;code&gt;ImportError: No module named django&lt;/code&gt;라는 오류가 발생합니다. 하지만 가상 환경 안에서는 이런 문제가 거의 일어나지 않습니다. 설치한 Python 패키지 경로 설정이 이미 잘 되어있기 때문입니다. 만약 virtualenv로 만든 가상 환경에서 벗어나 실제 환경에서 위와 같이 Django를 가져오면(import)하면 무슨 일이 발생할까요? Django를 설치하지 않았기 때문에 &lt;code&gt;ImportError: No module named django&lt;/code&gt; 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;가상 환경 안에서 설치한 Django는 다음 경로에 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ls $WORKON_HOME/pystagram/lib/python2.7/site-packages    
Django-1.6.6.dist-info    
django    
.
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4. 편리한 도구 설치&lt;/h3&gt;

&lt;p&gt;Pystagram을 만드는 데 필요한 Python 패키지는 그때그때 설치하겠습니다. 대신 Pystagram을 편하게 만드는 데 좋은 도구는 먼저 소개하겠습니다. 사용 여부는 여러분 마음입니다. :)&lt;/p&gt;

&lt;h4&gt;(1) Postman - REST Client&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.getpostman.com/&quot;&gt;Postman - REST Client&lt;/a&gt;는 HTTP 기반으로 동작하는 API를 편리하게 호출하는 클라이언트(client)입니다. 서버에 기능을 구현한 후 동작 여부를 확인하려면 클라이언트에서 접근할 수 있는 인터페이스(interface)를 만들어야 합니다. 이 클라이언트쪽 인터페이스를 만드는 것 자체가 귀찮기도 하지만, 오류를 확인하고 추적하는 디버깅(debuging) 환경이 미비하여 문제를 파악하기도 불편합니다. Postman은 개발에 용이한 클라이언트 인터페이스를 제공하는 도구입니다.&lt;/p&gt;

&lt;p&gt;Postman은 Google Chrome용 앱입니다. 비슷한 역할을 하는 Firefox용 부가기능은 &lt;a href=&quot;https://addons.mozilla.org/de/firefox/addon/restclient/&quot;&gt;RESTClient&lt;/a&gt;가 있는데, 저는 써본 적이 없습니다.&lt;/p&gt;

&lt;h4&gt;(2) 편집기&lt;/h4&gt;

&lt;p&gt;프로그래밍은 해본 적이 없고 정말 Python 등으로 Hello world만 출력해본 분이라면 코딩에 필요한 편집기를 아직 결정하지 못하셨을 겁니다. Django로 프로그래밍을 하는 데 필요한 전용 편집기는 따로 없습니다. 편집기는 다양하며 취향에 맞는 걸 쓰면 됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Atom (무료)&lt;/li&gt;
&lt;li&gt;eclipse + PyDev (무료)&lt;/li&gt;
&lt;li&gt;Emacs (무료)&lt;/li&gt;
&lt;li&gt;Notepad (일명 메모장. 유료 운영체제에 기본 내장)&lt;/li&gt;
&lt;li&gt;PyCharm (무료, 유료)&lt;/li&gt;
&lt;li&gt;Sublime Text (유료)&lt;/li&gt;
&lt;li&gt;Vim (무료)&lt;/li&gt;
&lt;li&gt;Visual Studio (유료, 무료)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;저는 Sublime Text 2를 구입하여 사용하고 있으며, 간간히 Vim을 씁니다. 무료인데 꽤 잘 만들어졌고 빠르게 개선되고 있는 Atom도 좋습니다.&lt;/p&gt;

&lt;p&gt;하지만 Apple Pages나 Microsoft Word 같은 도구는 코딩에 적합하지 않습니다. :)&lt;/p&gt;

&lt;h3&gt;5. Python&lt;/h3&gt;

&lt;p&gt;이 강좌는 Python 입문자를 대상으로 하지 않으므로 Python 문법 등에 대해서는 다루지 않습니다. 대신 Python 관련하여 몇 가지 규칙을 정하고, 여러분은 이 규칙을 따르시길 권합니다.&lt;/p&gt;

&lt;h4&gt;(1) utf-8&lt;/h4&gt;

&lt;p&gt;우리는 다루는 문자나 소스 파일의 문자형은 &lt;a href=&quot;http://ko.wikipedia.org/wiki/UTF-8&quot;&gt;UTF-8&lt;/a&gt;로 할 겁니다. 소스 코드를 파일로 저장할 때 꼭 파일 형식을 UTF-8로 지정해서 저장하세요. 그렇지 않으면 영문이 아닌 글자(한글 등)를 다루다 문자 인코딩(encoding) 오류를 접하게 됩니다.&lt;/p&gt;

&lt;p&gt;또, Python 소스 코드 파일 안에 한글을 표기하는 경우 파일 맨 위에&lt;sup id=&quot;fnref-3125:5&quot;&gt;&lt;a href=&quot;#fn-3125:5&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; 다음 줄을 추가해야 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;# coding: utf-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 내용은 그 Python 소스 코드 파일의 인코딩을 지정하는 역할&lt;sup id=&quot;fnref-3125:6&quot;&gt;&lt;a href=&quot;#fn-3125:6&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;을 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;# -*- coding: utf-8 -*-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 표현하기도 합니다.&lt;/p&gt;

&lt;p&gt;Python에서 문자 인코딩 오류는 입문자나 Python이 생소한 사람을 괴롭히는 흔한 오류 중 하나입니다. 소스 파일을 UTF-8로 저장하고 소스 파일에 인코딩 종류를 명기하면 정말 사소한 인코딩 오류는 만나지 않습니다.&lt;/p&gt;

&lt;h4&gt;(2) 들여쓰기&lt;/h4&gt;

&lt;p&gt;Python의 언어 문법은 코드를 들여 쓰는 규칙(indentation)을 엄격히 따릅니다. 같은 맥락에 있는 코드는 들여 쓰는 깊이가 같아야 합니다. 들여 쓰는 깊이는 탭(tab)으로 만드는데, 이 탭은 한 자리 공백(space) 문자로 표현하는 소프트 탭(soft tab) 방식과 자판에 있는 탭 키로 표현하는 하드 탭(hard tab) 방식이 있습니다. 하지만 스페이스든 탭이든 공백 문자 하나로 처리하기 때문에 스페이스와 탭을 한 코드 내에 병행해도 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;if type(1023) is int:
    print &quot;integer&quot;
else:
                print &quot;not integer&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 코드에서 &lt;code&gt;print &quot;integer&quot;&lt;/code&gt;는 스페이스 네 개로 들여 썼고, &lt;code&gt;print &quot;not integer&quot;&lt;/code&gt;는 탭 네 개로 들여 썼다고 가정하겠습니다. 이 코드는 &lt;strong&gt;눈으로 보기엔 안 좋지만&lt;/strong&gt; 들여쓰기 문법에서는 허용됩니다&lt;sup id=&quot;fnref-3125:7&quot;&gt;&lt;a href=&quot;#fn-3125:7&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;. 스페이스든 탭이든 네 개로 들여쓰기 깊이를 같게 했기 때문이지요. 만약 &lt;strong&gt;눈으로&lt;/strong&gt; 보기에 좋게 하려고 다음과 탭 네 개를 한 개로 바꿔서 공백이 네 개인 것처럼 &lt;strong&gt;보이게&lt;/strong&gt; 하면 들여쓰기 오류가 발생합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;if type(1023) is int:
    print &quot;integer&quot;
else:
    print &quot;not integer&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그래서 한 소스 파일 안에서 스페이스와 탭을 혼용하는 걸 권하지 않습니다. 소프트탭이든 하드탭이든 하나만 하길 권하지요.&lt;/p&gt;

&lt;p&gt;저는 &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0008/#indentation&quot;&gt;스페이스 네 칸을 탭 한 칸으로 표현하는 소프트탭 방식&lt;/a&gt;을 쓰겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;hr /&gt;
&lt;p&gt;이것으로 강좌 2편을 마칩니다. 분량이 적을 거라 예상했는데, 왜 설치하고 왜 그렇게 설치하는지 설명하려다 보니 예상보다 길게 썼네요.&lt;/p&gt;
&lt;p&gt;3편에서는 Django로 프로젝트를 만들고 데이터베이스에 데이터도 넣어볼 겁니다. 그럼 3편에서 만나요.&lt;/p&gt;
&lt;p&gt;아참. 9월 초까지 블로그를 분리하고 이전하느라 접속이 잘 안 될 수 있습니다. :)&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-3125:1&quot;&gt;
&lt;p&gt;$ 기호는 보통은 쉘 프롬프트(shell prompt)를 뜻합니다. 즉, $가 있다면 터미널을 열어서 쉘에서 실행한다는 의미입니다.&amp;#160;&lt;a href=&quot;#fnref-3125:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:2&quot;&gt;
&lt;p&gt;Python Package : 모듈은 함수나 변수, 클래스를 모아 놓은 파일이며, 패키지는 모듈을 묶어놓은 것이다. &lt;a href=&quot;https://docs.python.org/2/tutorial/modules.html#packages&quot;&gt;Python Modules - Packages&lt;/a&gt; 참조.&amp;#160;&lt;a href=&quot;#fnref-3125:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:3&quot;&gt;
&lt;p&gt;wget을 사용하면 터미널에서 파일을 간편하게 받습니다. &lt;code&gt;wget 주소(URL)&lt;/code&gt; 라고 입력하면 끝이지요. wget은 brew나 apt-get으로 설치하면 되며, &lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/wget.htm&quot;&gt;윈도우용 wget&lt;/a&gt;도 있습니다.&amp;#160;&lt;a href=&quot;#fnref-3125:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:4&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kldp.org/node/38265&quot;&gt;bashrc와 bash_profile 차이&lt;/a&gt;&amp;#160;&lt;a href=&quot;#fnref-3125:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:9&quot;&gt;
&lt;p&gt;예를 들면, Python 2.4가 설치되어 있을만큼 오래된 운영체제 배포본은 놀랍게도 SQLite 3가 설치되어 있지 않은 경우가 있습니다. 이 상태에서 Python 2.7을 설치하면 주 시스템에 SQLite 3 자체가 없어서 SQLite 3에 접근하는 인터페이스가 설치되지 않기도 합니다.&amp;#160;&lt;a href=&quot;#fnref-3125:9&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:5&quot;&gt;
&lt;p&gt;항상 맨 위는 아닙니다. 리눅스나 유닉스에서 Python 소스 코드 파일 자체를 실행하려는 경우 소스 파일 맨 위에는 이 파일을 실행하는 실행기를 명시하는데, 이런 경우 인코딩을 지정하는 내용을 두 번째 줄에 표기합니다.&amp;#160;&lt;a href=&quot;#fnref-3125:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:6&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0263/&quot;&gt;PEP 0263 - Defining Python Source Code Encodings&lt;/a&gt;&amp;#160;&lt;a href=&quot;#fnref-3125:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:7&quot;&gt;
&lt;p&gt;하지만 Python 3에서는 허용하지 않습니다.&amp;#160;&lt;a href=&quot;#fnref-3125:7&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Aug 2014 00:05:44 +0900</pubDate>
        <link>http://blog.hannal.com//2014/8/start_with_django_webframework_02/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/8/start_with_django_webframework_02/</guid>
        
        <category>django</category>
        
        <category>python</category>
        
        <category>파이썬</category>
        
        <category>virtualenv</category>
        
        <category>pip</category>
        
        <category>virtualenvwrapper</category>
        
        <category>설치</category>
        
        <category>postman</category>
        
        
        <category>start_with_django_webframework</category>
        
      </item>
    
  </channel>
</rss>
