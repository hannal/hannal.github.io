<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kay on the rails</title>
    <description>Kay as known as Hannal walks on the rails
</description>
    <link>http://blog.hannal.com//</link>
    <atom:link href="http://blog.hannal.com//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 13 Jul 2015 21:35:41 +0900</pubDate>
    <lastBuildDate>Mon, 13 Jul 2015 21:35:41 +0900</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Celery의 Subtask 기능을 이용하여 Chord와 Chain로 작업 분산해서 다루기</title>
        <description>&lt;h3&gt;웹페이지 긁어오기&lt;/h3&gt;

&lt;p&gt;Python으로 웹페이지 열 곳을 긁어와서 하나로 합쳐 보겠습니다. Python HTTP library인 &lt;a href=&quot;http://docs.python-requests.org/en/latest/&quot;&gt;requests&lt;/a&gt;를 쓰면 아주 간단합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import requests

def fetch_page_by_url(url):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text

merged_text = []
for i in range(0, 10):
    result = fetch_page_by_url(
        &amp;#39;http://localhost:8000/{}.html&amp;#39;.format(i)
    )

    if result is not None:
        merged_text.append(result)

do_something(merged_text.join(&amp;#39;&amp;#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Celery를 이용해 비동기 방식으로 긁어오기&lt;/h3&gt;

&lt;p&gt;차례대로 긁어오니 열 개 페이지를 모두 가져오기 전까지는 결과를(&lt;code&gt;do_something(merged_text.join(&amp;#39;&amp;#39;))&lt;/code&gt;) 확인하지 못합니다. &lt;a href=&quot;https://docs.python.org/3/library/multiprocessing.html&quot;&gt;multiprocessing&lt;/a&gt;을 이용해 여러 프로세스로 동시성을 확보해도 되지만, 분산 작업 큐 시스템인 &lt;a href=&quot;http://celery.readthedocs.org/en/latest/&quot;&gt;Celery&lt;/a&gt;로 쉽고 간편하게 비동기 처리하기도 합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from celery import Celery

app = Celery(__name__)

@app.task
def fetch_page_by_url(url):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text

merged_text = []
for i in range(0, 10):
    result = fetch_page_by_url.apply_async(
        &amp;#39;http://localhost:8000/{}.html&amp;#39;.format(i)
    )

    if result is not None:
        merged_text.append(result)

do_something(merged_text.join(&amp;#39;&amp;#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 코드에는 문제가 있습니다. Celery 작업 수행 객체로 장식된(decorated) &lt;code&gt;fetch_page_by_url&lt;/code&gt; 객체의 &lt;code&gt;apply_async()&lt;/code&gt; 메서드를&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 이용하여 &lt;strong&gt;비동기&lt;/strong&gt;로 작업을 수행하는데, 이 메서드가 반환하는 객체는 &lt;code&gt;res.text&lt;/code&gt;가 아니라 Celery 결과 작업을 다루는 객체입니다. 게다가 비동기로 작업을 수행하고 바로 프로그램 수행 제어권을 호출자에게 반환하므로 &lt;code&gt;fetch_page_by_url.apply_async(...)&lt;/code&gt; 호출이 되자마자 바로 다음 구문을 수행하는데, 웹 페이지를 가져오는 작업이 끝났는지 여부는 알지 못 합니다.&lt;/p&gt;

&lt;p&gt;이 문제를 피하려면 &lt;code&gt;get()&lt;/code&gt; 메서드를 이용합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    if result.get() is not None:
        merged_text.append(result)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;get()&lt;/code&gt; 메서드는 비동기로 수행하는 작업 객체(&lt;code&gt;fetch_page_by_url()&lt;/code&gt;)가 작업을 마치고 값을 반환하기를 &lt;strong&gt;동기식&lt;/strong&gt;으로 기다려서 반환합니다. 어?! 이렇게 할 거라면 굳이 Celery를 쓸 필요가 없지요. Celery에게 여러 작업을 맡겨서 비동기로 처리하고, 비동기로 처리한 결과를 받아다 뭔가를 하려면 다른 방법을 써야 합니다. 이 글에서는 &lt;code&gt;chain&lt;/code&gt;와 &lt;code&gt;chord&lt;/code&gt;을 사용하겠습니다.&lt;/p&gt;

&lt;h3&gt;chain 기능&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;chain&lt;/code&gt; 기능은 이름에서 전해지듯이 작업을 체인처럼 줄줄이 수행합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from celery import chain

@app.task
def fetch_page_by_url(url, append_text=None):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        if append_text is None
            return res.text
        else:
            res.text + append_text

tasks = []
for i in range(0, 10):
    tasks.append(
        fetch_page_by_url.subtask(
            &amp;#39;http://localhost:8000/{}.html&amp;#39;.format(i)
        )
    )

result = chain(tasks)()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;subtask()&lt;/code&gt;는 Celery 작업 객체를 하위 작업으로 수행하는 메서드입니다&lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. &lt;code&gt;fetch_page_by_url&lt;/code&gt; 객체를 하위 작업으로 수행하는 작업 열 개를 담아 &lt;code&gt;chain()&lt;/code&gt;에 전달하면 &lt;code&gt;chain()&lt;/code&gt;은 순서대로 작업을 수행합니다. 각 작업이 반환하는 객체는 다음 작업자에게 인자로 전달합니다. 첫 번째 &lt;code&gt;fetch_page_by_url()&lt;/code&gt; 함수가 반환하는 웹페이지 문자열을 두 번째 &lt;code&gt;fetch_page_by_url()&lt;/code&gt;는 두 번째 인자로 받는 것이죠. 그래서 두 번째 &lt;code&gt;fetch_page_by_url()&lt;/code&gt;부터는 앞 작업자가 반환하는 결과를 넘겨 받는 것이지요.&lt;/p&gt;

&lt;p&gt;다른 예를 들어 보겠습니다. 숫자 두 개를 인자로 전달하면 두 숫자를 더하는 작업자를 쓰겠습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;첫 번째 셈은 1 + 1 입니다.&lt;/li&gt;
&lt;li&gt;두 번째 셈은 첫 번째 덧셈 결과를 받아서 10을 더합니다.&lt;/li&gt;
&lt;li&gt;세 번째 셈은 두 번째 덧셈 결과를 받아서 100을 더합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이걸 &lt;code&gt;chain()&lt;/code&gt;을 이용하면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;do_chain_tasks = chain(add.s(1, 1), add.s(10), add.s(100))
do_chain_tasks()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;chain()&lt;/code&gt;도 바로 작업을 수행하는 게 아니라 Celery 작업 객체를 반환하며&lt;sup id=&quot;fnref3&quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, 이 작업 객체를 실행해야 합니다. 바로 위 코드는 &lt;code&gt;chain(...)()&lt;/code&gt;라는 구문을 나눈 것입니다.&lt;/p&gt;

&lt;p&gt;재밌는 점은 Celery는 비트 연산으로도 &lt;code&gt;chain()&lt;/code&gt; 작업 객체를 만들어 준다는 점입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(
    fetch_page_by_url.s(&amp;#39;http://localhost:8000/0.html&amp;#39;) |
    fetch_page_by_url.s(&amp;#39;http://localhost:8000/1.html&amp;#39;) |
    fetch_page_by_url.s(&amp;#39;http://localhost:8000/2.html&amp;#39;) |
    fetch_page_by_url.s(&amp;#39;http://localhost:8000/3.html&amp;#39;)
).apply_async()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참 꼼꼼하게 만들어 놨어요. :)&lt;/p&gt;

&lt;h3&gt;chord 기능&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;chain()&lt;/code&gt;을 이용해 비동기로 열 개 작업을 수행하고 그 결과를 합쳤는데, 아쉬운 마음이 듭니다. 전체 작업 자체는 분명 비동기로 시작한 게 맞지만, 웹페이지를 긁어오는 작업도 동시에 분산해서 처리하면 더 효율이 좋을 겁니다. &lt;code&gt;chord()&lt;/code&gt;는 하위 작업을 동시에 수행하고, 각 작업자가 반환하는 값을 callback 실행 객체로 전달해줍니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from collections import MutableSequence
from celery import chord

@app.task
def fetch_page_by_url(url):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text

@app.task
def merge_text(texts):
    assert(isinstance(texts, MutableSequence))
    return texts.join(&amp;#39;&amp;#39;)

tasks = []
for i in range(0, 10):
    tasks.append(
        fetch_page_by_url.s(&amp;#39;http://localhost:8000/{}.html&amp;#39;.format(i))
    )

do_chain_tasks = chord(tasks)
do_chain_tasks(merge_text.s())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fetch_page_by_url()&lt;/code&gt; 함수가 원래대로(?) 돌아왔고, &lt;code&gt;merge_text()&lt;/code&gt; 함수가 새로 추가됐습니다. &lt;code&gt;merge_text()&lt;/code&gt;는 전달받은 인자 &lt;code&gt;texts&lt;/code&gt;를 합치는 일을 하는데, &lt;code&gt;fetch_page_by_url()&lt;/code&gt;가 반환하는 문자열을 담은 리스트형(&lt;code&gt;list&lt;/code&gt;) 객체입니다. 맨 처음에 비동기로 작성한 코드에서 웹페이지 문자열을 리스트로 담은 &lt;code&gt;merged_text&lt;/code&gt;와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chord()&lt;/code&gt;는 각 작업자(&lt;code&gt;fetch_page_by_url()&lt;/code&gt;)가 반환하는 값을 리스트형으로 모아서 callback 객체에게 인자로 전달합니다. &lt;code&gt;chord()&lt;/code&gt;로 만든 Celery 작업 객체로 callback 객체를 전달할 때 인자를 지정하지 않아도 됩니다. 알아서 넣어 줍니다.&lt;/p&gt;

&lt;p&gt;근데 이 코드엔 사소하다면 사소하고 심각하다면 심각한 문제가 있습니다. 작업들을 비동기로 수행하다보니 웹페이지 문자열이 우리가 원하는 순서대로 담겨져 &lt;code&gt;merge_text()&lt;/code&gt;로 전달된다는 보장이 없습니다. 작업이 먼저 끝나는 순서대로 결과가 담기니 0 - 1 - 2 - 3 ... 순서가 될 지 9 - 4 - 7 - 1 순서가 될 지는 아무도 모릅니다.&lt;/p&gt;

&lt;p&gt;여러 해결책이 있겠지만, 각 작업자마다 순번을 주고, &lt;code&gt;merge_text()&lt;/code&gt;는 이 순번대로 문자열을 합치면 되겠네요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@app.task
def fetch_page_by_url(url, num):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text, num

@app.task
def merge_text(texts):
    assert(isinstance(texts, MutableSequence))
    texts.sort(key=lambda x: x[1])
    return texts.join(&amp;#39;&amp;#39;)

tasks = []
for i in range(0, 10):
    tasks.append(
        fetch_page_by_url.s(
            &amp;#39;http://localhost:8000/{}.html&amp;#39;.format(i), i
        )
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;각 &lt;code&gt;fetch_page_by_url()&lt;/code&gt;에 두 번째 인자로 순번(&lt;code&gt;i&lt;/code&gt;)을 전달하고, &lt;code&gt;fetch_page_by_url()&lt;/code&gt;는 받은 순번을 웹페이지 문자열과 함께 그대로 반환합니다. &lt;code&gt;merge_text()&lt;/code&gt;가 전달받은 &lt;code&gt;texts&lt;/code&gt;엔 각 &lt;code&gt;fetch_page_by_url()&lt;/code&gt; 결과가 &lt;code&gt;[(문자열, 0), (문자열, 3), ...]&lt;/code&gt; 형태로 담깁니다. 그래서 각 항목의 두 번째(&lt;code&gt;[1]&lt;/code&gt;) 값으로 정렬하고 나서 한 문자열로 합친 것입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://celery.readthedocs.org/en/latest/userguide/canvas.html#the-primitives&quot;&gt;Canvas: Designing Workflows : The primitives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://celery.readthedocs.org/en/latest/userguide/tasks.html#avoid-launching-synchronous-subtasks&quot;&gt;Tasks : Avoid launching synchronous subtasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;대개는 &lt;code&gt;delay()&lt;/code&gt;라는 메서드로 줄여서 수행합니다.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;대개는 &lt;code&gt;s()&lt;/code&gt;로 줄인 메서드 이름을 씁니다.&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;&lt;code&gt;chain&lt;/code&gt;과 &lt;code&gt;chord&lt;/code&gt;는 함수처럼 생겼지만 클래스입니다.&amp;nbsp;&lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 08 Jul 2015 17:25:00 +0900</pubDate>
        <link>http://blog.hannal.com//2015/07/celery_chord_and_chain/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/07/celery_chord_and_chain/</guid>
        
        <category>python</category>
        
        <category>celery</category>
        
        <category>asynchronous</category>
        
        <category>distributed</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>9. 로그인한 이용자만 사진 게시물 게시하기</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막 갱신일시 : 2015년 6월 28일 1시 20분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;지난 편에서는 Django 이용자 인증 체계을 알아봤으니 이번 편에서는 인증 기능을 이용하여 로그인한 이용자만 사진 게시물을 게시하는 기능을 만들어 보겠습니다.&lt;/p&gt;

&lt;h3&gt;1. 사진 게시물에 이용자 정보 연결&lt;/h3&gt;

&lt;h4&gt;(1) 기본키 (Primary Key)&lt;/h4&gt;

&lt;p&gt;로그인한 이용자만 사진 게시물을 게시한다면 각 사진 게시물엔 사진을 게시한 이용자 정보를 담아야 합니다. 누가 게시한 사진인지 알아야 하니까요. 이용자 ID(&lt;code&gt;username&lt;/code&gt;)을 문자열로 담아도 되지만, 대개는 고유하며 변하지 않을 정보인 기본키(Primary Key)를 담습니다. &lt;/p&gt;

&lt;p&gt;이용자가 따로 기본키 역할을 하는 모델 필드를 지정하지 않으면 Django는 관례대로 &lt;code&gt;id&lt;/code&gt;라는 모델 필드를 알아서 만들고 이를 기본키로 사용합니다. 사진 모델인 &lt;code&gt;Photo&lt;/code&gt;로 사진 게시물 데이터를 &lt;code&gt;photo01&lt;/code&gt;이라는 인스턴스 객체로 할당하면 이 객체엔 &lt;code&gt;id&lt;/code&gt;라는 멤버 변수가 속성으로 존재하고 이 속성에 정수(&lt;code&gt;int&lt;/code&gt;) 값이 할당되어 있습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt;&amp;gt;&amp;gt; photo01 = Photo.objects.last()
&amp;gt;&amp;gt;&amp;gt; print(photo01.id)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;모델의 인스턴스 객체엔 &lt;code&gt;pk&lt;/code&gt; 속성도 존재하는데, 이 속성은 기본키를 가리키고 있습니다. 이용자가 &lt;code&gt;id&lt;/code&gt; 모델 필드를 기본키로 하지 않고 &lt;code&gt;uuid&lt;/code&gt;라는 모델 필드를 만들어 이 필드를 기본키로 지정하면 &lt;code&gt;pk&lt;/code&gt;는 이 모델 필드를 가리킵니다. 우리는 각 모델의 기본키로 설정된 모델 필드의 이름이 무엇인지 신경쓰지 않고 &lt;code&gt;pk&lt;/code&gt; 속성을 사용하면 됩니다.&lt;/p&gt;

&lt;h4&gt;(2) 모델 관계 필드 (relationship fields)&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델로 데이터베이스에 저장할 데이터에 이용자 모델의 기본키 값을 저장하려면 다음과 같이 하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Photo(models.Model):
    user_id = models.IntegerField()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런 뒤에 &lt;code&gt;Photo&lt;/code&gt; 모델로 데이터를 저장하는 과정에서 이용자의 기본키 값을 &lt;code&gt;user_id&lt;/code&gt;에 할당하면 됩니다. 각 게시물을 게시한 이용자가 누구인지 아니까 각 사진 게시물 정보를 가져오면서 이용자 정보도 함께 가져오면 좋겠군요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.contrib.auth import get_user_model
User = get_user_model()

class Photo(models.Model):
    # 중략
    def get_user(self):
        return User.objects.get(pk=self.user_id)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 코드들엔 문제가 있습니다. 모델의 기본키 모델 필드가 &lt;code&gt;IntegerField&lt;/code&gt;가 아닌 경우에 제대로 대응하지 못하고, &lt;code&gt;get_user()&lt;/code&gt; 메서드를 호출할 때마다 매번 이용자 모델에서 이용자 데이터를 탐색해 반환하며, 이용자 모델과 연결하는 모델마다 매번 저런 구현을 중복 적용해야 합니다. 이런 문제들에 대응하는 구현체를 만들어야 하는데, Django는 &lt;a href=&quot;https://docs.djangoproject.com/en/1.8/ref/models/fields/#module-django.db.models.fields.related&quot;&gt;관계 모델 필드&lt;/a&gt;로 제공합니다. 총 세 종류입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ForeignKey&lt;/code&gt; : 1 대 다(1 to n) 관계&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OneToOneField&lt;/code&gt; : 1 대 1 관계&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ManyToManyField&lt;/code&gt; : 다 대 다(n to n) 관계&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이용자와 사진 게시물 관계로 세 관계 필드를 살펴 보겠습니다. &lt;code&gt;OneToOneField&lt;/code&gt;는 이용자는 오직 사진 게시물을 하나만 게시하고 소유합니다. &lt;code&gt;ManyToManyField&lt;/code&gt;는 이용자가 사진 게시물을 여러 개 올릴 수 있는데, 각 사진 게시물을 여러 이용자가 소유하는 게 가능합니다. 1번 사진을 Hannal 이용자 뿐만 아니라 Kay, Yuna 이용자가 소유하는 관계가 맺어지므로 소유한 누구나 사진 게시물을 변경하거나 지울 수 있습니다. 마지막으로 &lt;code&gt;ForeignKey&lt;/code&gt;는 한 이용자가 여러 사진 게시물을 게시하고 소유하는 관계입니다. 우리에게 필요한 모델 관계군요. &lt;code&gt;ForeignKey&lt;/code&gt;에 대한 건 본 편 “2. &lt;code&gt;ForeignKey&lt;/code&gt; 모델 필드”를 참고하시고, 연결부터 해보겠습니다.&lt;/p&gt;

&lt;h4&gt;(3) &lt;code&gt;Photo&lt;/code&gt; 모델에 이용자 기본키 정보 연결하기&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.conf import settings

class Photo(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL)
    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ForeignKey&lt;/code&gt; 모델 필드(클래스)는 &lt;code&gt;django.db.models&lt;/code&gt; 모듈에 있어서 다른 모델 필드처럼 &lt;code&gt;models&lt;/code&gt; 객체에서 접근하여 사용하면 됩니다. 첫 번째 인자로 관계 지을 모델을 모델 객체나 경로를 문자열로 전달합니다. &lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 설정 항목은 현재 프로젝트에서 사용하는 인증용 이용자 모델이 위치한 경로를 문자열로 지정하고 있습니다. &lt;a href=&quot;http://blog.hannal.com/2015/06/start_with_django_webframework_08/&quot;&gt;8. 로그인, 로그아웃 하기&lt;/a&gt;편에서 이에 대한 내용을 참조하세요.&lt;/p&gt;

&lt;h5&gt;마이그레이션 수행&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델이 변경됐으니 데이터베이스에 반영해야 합니다. 마이그레이션을 수행합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py makemigrations photo
You are trying to add a non-nullable field &amp;#39;user&amp;#39; to photo without a default;
we can&amp;#39;t do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows)
 2) Quit, and let me add a default in models.py
Select an option:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;긴 영어 문장이 나오며 뭔가를 물어 보는데 당황하지 말고 내용을 잘 살펴 보세요. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;당신은 Null(&lt;code&gt;None&lt;/code&gt;)을 허용하지 않는(non-nullable) &lt;code&gt;user&lt;/code&gt;라는 필드를 추가하려 하는데, 값이 주어지지 않는 경우에 기본으로 저장될 기본값(default)이 없다.&lt;/li&gt;
&lt;li&gt;데이터베이스가 기존에 저장된 데이터(populate existing rows)에 Null 외 값을 필요로 해서 우린(Django) 이 작업을 바로 수행하지 못한다.&lt;/li&gt;
&lt;li&gt;그러니 뭔가 조치를 취해달라.

&lt;ol&gt;
&lt;li&gt;이 자리에서 기본값을 제공해주든&lt;/li&gt;
&lt;li&gt;마이그레이션 수행 과정에서 빠져 나간 뒤에 &lt;code&gt;models.py&lt;/code&gt;에 기본값 지정 인자(&lt;code&gt;default&lt;/code&gt;)를 추가해달라.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그 자리에서 기본값을 제공해줄테니 &lt;code&gt;1&lt;/code&gt;을 입력합니다. Django가 뭔가를 요구하네요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Please enter the default value now, as valid Python
The datetime module is available, so you can do e.g. datetime.date.today()
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본값으로 유효한 Python의 객체를 입력하라는 말입니다. 일단 &lt;code&gt;1&lt;/code&gt;을 입력합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Migrations for &amp;#39;photo&amp;#39;:
  0006_photo_user.py:
    - Add field user to photo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제야 마이그레이션 수행에 필요한 마이그레이션 작업 파일이 만들어 졌습니다. 두 번째 입력한 &lt;code&gt;1&lt;/code&gt;은 이용자 모델의 기본키 값이 &lt;code&gt;1&lt;/code&gt;을 뜻합니다. 기존에 저장한 사진 게시물의 이용자를 기본키 값이 &lt;code&gt;1&lt;/code&gt;인 이용자로 지정한 것입니다. 만약, 기존에 소유자가 없는 사진 게시물을 위해 별도 이용자를 만들어서 연결하고자 한다면, 그 이용자를 만들어서 그 이용자의 기본키 숫자값을 지정하면 됩니다.&lt;/p&gt;

&lt;p&gt;왜 기본키 값을 넣는지 첫 번째 이유는 앞서 설명을 하였고, 두 번째 이유는 “(2) ForeignKey 모델 필드”에서 설명하겠습니다.&lt;/p&gt;

&lt;p&gt;이제 &lt;code&gt;makemigrations&lt;/code&gt; 명령어로 만든 마이그레이션 작업 내용을 데이터베이스에 반영합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py migrate photo
Operations to perform:
  Apply all migrations: photo
Running migrations:
  Applying photo.0006_photo_user... OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. 로그인한 이용자만 사진 게시물 게시하기&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델에 이용자 모델 연결을 마쳤으니 이번엔 사진 게시물을 저장하는 과정에 로그인한 이용자 정보를 적용하겠습니다. 간단히 말해서 로그인한 이용자만 사진 게시물을 게시하는 것이지요.&lt;/p&gt;

&lt;h4&gt;(1) 현재 이용자를 사진 게시물에 적용&lt;/h4&gt;

&lt;p&gt;현재 웹 서비스에 연결된(requested) 접속 정보는 &lt;code&gt;request&lt;/code&gt; 객체에 담겨 있습니다. &lt;code&gt;request&lt;/code&gt;는 뷰(view) 함수가 첫 번째 인자로 전달받는 객체입니다. 개별 사진을 보는 &lt;code&gt;single_photo&lt;/code&gt; 뷰 함수는 &lt;code&gt;def single_photo(request, photo_id):&lt;/code&gt;와 같이, 사진 게시물을 새로 저장하는 &lt;code&gt;new_photo&lt;/code&gt; 뷰 함수는 &lt;code&gt;def new_photo(request):&lt;/code&gt;와 같이 첫 번째 인자로 &lt;code&gt;request&lt;/code&gt;를 전달 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reuqest&lt;/code&gt; 객체엔 &lt;code&gt;user&lt;/code&gt; 속성이 존재하는데, 이 속성은 접속한 이용자에 정보가 담겨 있습니다. 로그인한 이용자라면 이용자 모델 클래스로 생성한 인스턴스 객체가, 로그인하지 않은 이용자라면 &lt;code&gt;AnonymousUser&lt;/code&gt; 모델 클래스로 생성한 인스턴스 객체가 할당됩니다. 먼저 코드부터 작성해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def new_photo(request):
    if request.method == &amp;quot;GET&amp;quot;:
        edit_form = PhotoEditForm()
    elif request.method == &amp;quot;POST&amp;quot;:
        edit_form = PhotoEditForm(request.POST, request.FILES)

        if edit_form.is_valid():
            new_photo = edit_form.save(commit=False)
            new_photo.user = request.user
            new_photo.save()

            return redirect(new_photo.get_absolute_url())

    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;한 줄은 조금 바뀌었고, 두 줄이 추가됐습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if edit_form.is_valid():
    new_photo = edit_form.save(commit=False)
    new_photo.user = request.user
    new_photo.save()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;두 번째 줄 &lt;code&gt;new_photo = edit_form.save(commit=False)&lt;/code&gt;에서 &lt;code&gt;edit_form&lt;/code&gt; 객체는 사진 게시물 생성과 관련된 폼(Form)인 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼 클래스입니다. 첫 번째 줄에서 &lt;code&gt;is_valid()&lt;/code&gt;로 웹에서 전달받은 자료를 검증한 그 객체입니다. 이 객체가 모델 폼인 경우, 그러니까 &lt;code&gt;ModelForm&lt;/code&gt; 클래스를 상속받아 만든 폼인 경우 &lt;code&gt;save()&lt;/code&gt; 인스턴스 메서드를 포함하고 있는데, 이 메서드는 모델의 &lt;code&gt;save()&lt;/code&gt; 메서드와 동일한 역할을 합니다. 데이터를 모델에 연결된 데이터베이스 테이블에 저장하는 것이지요. 모델의 &lt;code&gt;save()&lt;/code&gt; 메서드와 마찬가지로 저장한 내용이 반영된 모델의 인스턴스 객체를 반환합니다. 즉, &lt;code&gt;edit_form.save()&lt;/code&gt;로부터 반환받은 객체를 할당한 &lt;code&gt;new_photo&lt;/code&gt;는 폼과 관련된 객체가 아니라 &lt;code&gt;PhotoEditForm&lt;/code&gt; 모델 폼 클래스에 연결되어 있는 &lt;code&gt;Photo&lt;/code&gt; 모델로 생성한 인스턴스 객체입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;save()&lt;/code&gt; 메서드에 인자로 전달한 &lt;code&gt;commit&lt;/code&gt;은 실제로 데이터베이스에 반영할 것인지 여부를 정합니다. &lt;code&gt;True&lt;/code&gt;를 전달하면 바로 데이터베이스에 저장하고, &lt;code&gt;False&lt;/code&gt;라고 하면 모델 클래스로 생성한 인스턴스 객체만 반영하고 데이터베이스에 실제로 반영하진 않습니다. 따로 반영 여부를 정해주지 않으면 기본값은 &lt;code&gt;True&lt;/code&gt;이어서 바로 데이터베이스에 반영합니다. 데이터베이스에 저장하지 않을 거면서 뭐하러 &lt;code&gt;save()&lt;/code&gt; 메서드를 호출했으며, &lt;code&gt;save()&lt;/code&gt; 메서드엔 실제로 반영할 것인지 여부를 정하는 &lt;code&gt;commit&lt;/code&gt; 인자가 필요한 이유는 무엇일까요? 답은 그 바로 다음에 나오는 두 줄에 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;new_photo.user = request.user&lt;/code&gt;는 &lt;code&gt;new_photo&lt;/code&gt; 객체의 &lt;code&gt;user&lt;/code&gt; 속성에 현재 로그인한 &lt;code&gt;request.user&lt;/code&gt; 속성을 할당하는 것입니다. &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼 클래스는 웹에서 폼 양식 자료가 담긴 &lt;code&gt;request.POST&lt;/code&gt;와 &lt;code&gt;request.FILES&lt;/code&gt;만 전달 받았지, 현재 이용자 정보가 담긴 &lt;code&gt;request.user&lt;/code&gt;를 전달받은 적이 없습니다. 그래서 &lt;code&gt;save()&lt;/code&gt; 메서드가 반환한 &lt;code&gt;new_photo&lt;/code&gt; 인스턴스 객체의 &lt;code&gt;user&lt;/code&gt;에는 이용자 정보가 없습니다. &lt;code&gt;Photo&lt;/code&gt; 모델에 &lt;code&gt;auth.User&lt;/code&gt;에 있는 이용자 모델을 &lt;code&gt;ForeignKey&lt;/code&gt; 관계로 연결했는데, 뷰 함수에서는 관련 정보를 &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt;에 반영하지 않았습니다.&lt;/p&gt;

&lt;p&gt;만약, &lt;code&gt;edit_form.save()&lt;/code&gt;나 &lt;code&gt;edit_form.save(commit=True)&lt;/code&gt;처럼 바로 데이터베이스에 반영하려고 하면 &lt;code&gt;IntegrityError&lt;/code&gt; 예외 오류가 발생하며, &lt;code&gt;NOT NULL constraint failed: photo_photo.user_id&lt;/code&gt;라 안내 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-IntegrityError.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;겁먹지 말고 오류 안내말을 잘 보세요. 정확히 이해하지 않은 채 추측만 하려는 태도는 안 좋지만, 여러분은 이 강좌 나머지 내용을 그냥 건너뛰지 않을테니 예외 오류 내용을 보고 상황을 추측해 보겠습니다. &lt;code&gt;NOT NULL&lt;/code&gt;, &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;photo_photo.user_id&lt;/code&gt; 이 세 가지 표현이 눈에 들어오지요? “photo”가 두 번 반복된 &lt;code&gt;photo_photo&lt;/code&gt;는 &lt;code&gt;Photo&lt;/code&gt; 모델과 연관되어 보이고, &lt;code&gt;user_id&lt;/code&gt;는 우리가 만든 적이 없지만 &lt;code&gt;user&lt;/code&gt; 모델 필드와 관련되어 보입니다. &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드에 &lt;code&gt;NOT NULL&lt;/code&gt;과 관련된 문제가 발생하여 진행하던 작업(&lt;code&gt;save()&lt;/code&gt;)이 실패했다는 뜻이군요. &lt;code&gt;NOT NULL&lt;/code&gt;은 &lt;code&gt;NULL&lt;/code&gt;이면 안 된다는 의미니까 &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드에 &lt;code&gt;NULL&lt;/code&gt;이 들어가서 오류가 생긴 겁니다.&lt;/p&gt;

&lt;p&gt;웹페이지의 폼 양식에서 이용자 모델의 기본키 값을 직접 전달하면 안 됩니다. 예를 들어, &lt;code&gt;hannal&lt;/code&gt; 이용자의 기본키 값이 &lt;code&gt;1023&lt;/code&gt;이고 이 값을 웹 폼 양식에서 &lt;code&gt;user_id&lt;/code&gt;로 담아서 서버로 전달한다면, 이용자는 기본키 값 숫자를 고쳐서 마치 다른 이용자가 사진 게시물을 올린 것처럼 왜곡할지도 모릅니다. 이런 정보는 서버에서 알아내서 다뤄야 합니다. 그게 &lt;code&gt;request.user&lt;/code&gt;입니다. 아하, &lt;code&gt;request.user&lt;/code&gt;를 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼 클래스에 전달하면 되겠구나.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;edit_form = PhotoEditForm(request.POST, request.FILES, request.user)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;request.POST&lt;/code&gt;처럼.&lt;/p&gt;

&lt;p&gt;아닙니다. 그렇게 알아서 동작(magic behaviour)해주지 않고, 그래서도 안 됩니다. 추측해야 하는 코드와 기능은 좋지 않다고 봅니다. 이용자 정보가 필요한 폼 클래스라면 이용자 정보를 따로 전달받도록 처리해야 합니다. Python 클래스는 실행 가능한(callable) 객체이므로 함수처럼 소괄호를 사용하여 실행하고 실행 결과로 인스턴스 객체를 반환 받는데, 인스턴스 초기화를 수행하는 메서드가 &lt;code&gt;__init__()&lt;/code&gt;입니다. 이용자 정보인 &lt;code&gt;request.user&lt;/code&gt;를 인자로 전달 받는 &lt;code&gt;__init__()&lt;/code&gt; 메서드를 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼 클래스에 만들면 됩니다. 이건 Class based view를 다룰 때 살펴보기로 하고, 이번 편에서는 &lt;code&gt;save()&lt;/code&gt; 메서드에 &lt;code&gt;commit&lt;/code&gt; 인자를 &lt;code&gt;False&lt;/code&gt;로 전달하여 처리합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드는 &lt;code&gt;user = models.ForeignKey(settings.AUTH_USER_MODEL)&lt;/code&gt;로 만들었고, 이 모델 필드는 NULL을 허용하지 않습니다. 데이터베이스 테이블에도 &lt;code&gt;NOT NULL&lt;/code&gt;로 정의되어 있습니다. 그래서 데이터베이스에 실제로 반영하지 말고 우선 모델로 생성한 인스턴스 객체를 &lt;code&gt;edit_form&lt;/code&gt; 객체로부터 받으려고 &lt;code&gt;save(commit=False)&lt;/code&gt; 메서드를 수행했습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EditPhotoForm&lt;/code&gt;이 반환하는 &lt;code&gt;Photo&lt;/code&gt; 모델의 인스턴스 객체를 &lt;code&gt;new_photo&lt;/code&gt;에 할당받고, 이 객체의 &lt;code&gt;user&lt;/code&gt; 속성에 이용자 정보인 &lt;code&gt;request.user&lt;/code&gt;를 할당합니다. &lt;code&gt;new_photo.user = request.user&lt;/code&gt; 코드입니다. 이제 &lt;code&gt;new_photo.save()&lt;/code&gt;를 수행하여 데이터베이스에 저장합니다. &lt;code&gt;new_photo.save(commit=True)&lt;/code&gt;와 동일합니다.&lt;/p&gt;

&lt;p&gt;이제 로그인한 이용자 정보가 사진 게시물에 반영되어 저장됩니다.&lt;/p&gt;

&lt;h4&gt;(2) &lt;code&gt;new_photo&lt;/code&gt; 뷰 함수에 로그인한 이용자만 접근하도록 제한&lt;/h4&gt;

&lt;p&gt;로그인하지 않은 이용자가 사진 게시물을 저장하려 하면 오류가 발생할 겁니다. 로그인하지 않은 이용자는 이용자 모델로 생성한 인스턴스 객체에 기본키 값이 없을테니 &lt;code&gt;IntegrityError&lt;/code&gt; 예외 오류가 발생할 것 같습니다. 이렇게 예상하셨다면 훌륭합니다. 한 번 시도해보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-anonymous_user_exception.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;실제로 발생하는 예외는 &lt;code&gt;ValueError&lt;/code&gt;가 발생하며, 안내말은 &lt;code&gt;User&lt;/code&gt; 모델 클래스로 만든 인스턴스여야 한다는 내용입니다. 앞서 설명드린 바와 같이 로그인하지 않은 경우 &lt;code&gt;request.user&lt;/code&gt;엔 &lt;code&gt;AnonymousUser&lt;/code&gt; 모델 클래스로 생성한 인스턴스 객체가 할당되어 있습니다. &lt;code&gt;django.contrib.auth.models&lt;/code&gt;에 있는데, 코드를 보면 아시겠지만 껍데기 역할을 할 뿐입니다.&lt;/p&gt;

&lt;p&gt;로그인한 이용자인지 여부는 &lt;code&gt;request.user&lt;/code&gt;의 &lt;code&gt;is_authenticated()&lt;/code&gt; 메서드를 실행하면 &lt;code&gt;bool&lt;/code&gt; 객체를 반환받아 구분합니다. &lt;code&gt;True&lt;/code&gt;이면 로그인한 이용자, &lt;code&gt;False&lt;/code&gt;이면 로그인하지 않은 이용자입니다. 코드도 아주 간단합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.conf import settings

def new_photo(request):
    if not request.user.is_authenticated():
        return redirect(settings.LOGIN_URL)
    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;로그인하지 않은 이용자가 &lt;code&gt;new_photo&lt;/code&gt; 뷰 함수로 접근하면 &lt;code&gt;settings.LOGIN_URL&lt;/code&gt;에 지정되어 있는 URL로 이동(redirect) 시킵니다. &lt;code&gt;LOGIN_URL&lt;/code&gt;은 &lt;code&gt;global_settings&lt;/code&gt;에 &lt;code&gt;/accounts/login/&lt;/code&gt;으로 기본 지정되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@login_required&lt;/code&gt; 장식자(decorator)를 사용하면 더 명확하고 간결합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.contrib.auth.decorators import login_required

@login_required
def new_photo(request):
    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-login_required.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;더 친절하게도 로그인한 후 이동할 도착지도 &lt;code&gt;next&lt;/code&gt; 인자로 지정됩니다. 로그인 주소를 &lt;code&gt;settings.LOGIN_URL&lt;/code&gt;에 따로 지정해주면 자동으로 변경한 주소로 이동해 줍니다.&lt;/p&gt;

&lt;h3&gt;3. 모델 관계에 더 자세히 알아보기&lt;/h3&gt;

&lt;p&gt;우리는 이용자 모델을 &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드에 &lt;code&gt;ForeignKey&lt;/code&gt; 관계로 연결했습니다. 그리고 &lt;code&gt;user&lt;/code&gt; 모델 필드에 이용자 모델로 생성한 인스턴스 객체(&lt;code&gt;request.user&lt;/code&gt;)를 할당하지 않자 &lt;code&gt;photo_photo.user_id&lt;/code&gt;에 NULL을 저장하려 해서 저장하지 못했다는 예외 오류도 접했습니다. 이 중에서 &lt;code&gt;user_id&lt;/code&gt; 정체를 살펴 보겠습니다.&lt;/p&gt;

&lt;h4&gt;(1) ForeignKey 모델 필드&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;ForeignKey&lt;/code&gt;, 그러니까 Many to one 관계는 “One”쪽에 “Many”쪽 데이터 여러 개가 연결되는 구조입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-ManyToOne.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;한 이용자가 여러 게시물을 남기거나, 한 글갈래(category)에 여러 글이 속하는 관계입니다. Django 모델로는 &lt;code&gt;ForeignKey&lt;/code&gt; 모델 필드로 모델 클래스를 지정한 것인데, 이 관계 정보를 데이터베이스엔 어떻게 저장할까요?&lt;/p&gt;

&lt;p&gt;일단 각 모델은 데이터베이스에 Django 앱 이름과 모델 이름을 조합하여 테이블로 만듭니다. &lt;code&gt;photo_photo&lt;/code&gt;는 &lt;code&gt;photo&lt;/code&gt; 앱에 있는 &lt;code&gt;Photo&lt;/code&gt; 모델을 뜻합니다. &lt;code&gt;hello&lt;/code&gt;라는 앱의 &lt;code&gt;Hannal&lt;/code&gt; 모델은 &lt;code&gt;hello_hannal&lt;/code&gt; 테이블을, &lt;code&gt;KayCha&lt;/code&gt; 모델은 &lt;code&gt;hello_kay_cha&lt;/code&gt; 테이블을 만들어 연결합니다. 앞서 발생한 &lt;code&gt;IntegrityError&lt;/code&gt; 예외 오류에서 &lt;code&gt;photo_photo&lt;/code&gt; 정체가 무엇인지 이제 아시겠죠?&lt;/p&gt;

&lt;p&gt;Django의 모델 필드는 데이터베이스의 컬럼(column)이 됩니다. &lt;code&gt;image_file&lt;/code&gt; 모델 필드는 같은 이름을 갖는 테이블 컬럼이 됩니다. 모델 필드형(type)은 테이블 컬럼형을 결정합니다. 그런데 &lt;code&gt;ForeignKey&lt;/code&gt;와 같은 모델 관계 필드는 컬럼 이름이 조금 다릅니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드는 컬럼 이름이 &lt;code&gt;user_id&lt;/code&gt;입니다. &lt;code&gt;user_id&lt;/code&gt; 정체는 &lt;code&gt;user&lt;/code&gt; 모델 필드가 맞습니다. 그런데 &lt;code&gt;user&lt;/code&gt;가 아니라 &lt;code&gt;user_id&lt;/code&gt;인 이유는 무엇일까요? 질문 아니니 대답 안 하셔도 됩니다. :)&lt;/p&gt;

&lt;p&gt;이번 9회 초반에 모델 간 연결은 기본키로 한다고 설명했습니다. Django는 Many쪽이 One쪽을 연결하는 경우, Many쪽 모델 필드 이름에 One쪽의 기본키 이름을 덧붙입니다.&lt;/p&gt;

&lt;p&gt;기본키는 관례에 따라 &lt;code&gt;id&lt;/code&gt;라는 모델 필드가 되며, 모델 필드는 데이터베이스 테이블 컬럼과 이름이 같으므로 테이블 컬럼도 &lt;code&gt;id&lt;/code&gt;입니다. &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드는 이용자 모델을 Many to one으로 가리키는데, 이용자 모델의 기본키인 모델 필드도 &lt;code&gt;id&lt;/code&gt;입니다. &lt;code&gt;Photo&lt;/code&gt; 모델 데이터가 Many쪽이고 이용자 모델이 One쪽이므로, &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;user&lt;/code&gt; 모델 필드는 이용자 모델 필드의 기본키 모델 필드인 &lt;code&gt;id&lt;/code&gt; 이름을 덧붙여서 &lt;code&gt;user_id&lt;/code&gt;가 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-foreign_key_db_table_schema.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;만약 기본키 모델 필드 이름이 &lt;code&gt;id&lt;/code&gt;가 아니라 &lt;code&gt;uid&lt;/code&gt;라면 &lt;code&gt;_uid&lt;/code&gt;가 덧붙게 됩니다. Django는 이 데이터베이스 컬럼 값을 참조하여 서로 분리된 모델의 데이터 연결 관계를 알아냅니다.&lt;/p&gt;

&lt;h4&gt;(2) 모델 관계를 나중에 맺기 (lazy relation)&lt;/h4&gt;

&lt;p&gt;모델 관계를 맺을 대상 모델 클래스 객체를 직접 전달해도 됩니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.contrib.auth import get_user_model
User = get_user_model()

class Photo(models.Model):
    user = models.ForeignKey(User)
    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;models.ForeignKey(User)&lt;/code&gt;는 &lt;code&gt;ForeignKey&lt;/code&gt; 클래스에 &lt;code&gt;User&lt;/code&gt;라는 객체를 첫 번째 인자로 전달하여 호출(call)하고, 모델 필드의 인스턴스 객체를 반환받아 &lt;code&gt;user&lt;/code&gt;에 할당하는 것입니다. Python은 소스 파일 맨 윗 줄부터 아래로 실행하므로 저 구문을 실행하여 모델 필드를 만드는 시점에 실제로 존재하는 &lt;code&gt;User&lt;/code&gt; 객체를 사용합니다.&lt;/p&gt;

&lt;p&gt;그렇다면 관계 맺을 모델이 있는 경로를 문자열로 담아 인자로 전달하는 경우는 언제일까요? 이용자 모델처럼 상황에 따라 연결할 모델이 바뀌는 경우가 있습니다. 지난 편에서 예를 든 것처럼 이용자 모델이 바꾸면 이 모델을 가져오는(&lt;code&gt;import&lt;/code&gt;) 모든 코드에도 영향이 미칩니다. 그러나 &lt;code&gt;settings.AUTH_USER_MODEL&lt;/code&gt;에 이용자 모델이 있는 위치를 지정하고, &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 내용을 참조하여 &lt;code&gt;get_user_model()&lt;/code&gt; 함수로 이용자 모델을 가져오면 &lt;a href=&quot;http://blog.dahlia.kr/post/103101756957&quot;&gt;한 의도를 한 구현체로 정리&lt;/a&gt;할 수 있지요.&lt;/p&gt;

&lt;p&gt;관계 맺을 대상 모델이 아직 만들어지기 전에 연결하려는 경우에도 문자열로 지정합니다. A 모델이(from) B 모델을(to) 관계를 맺는다면 다음과 같이 B 모델을 먼저 만들고 그 &lt;strong&gt;이후&lt;/strong&gt;에 A 모델을 만들어야 합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class B(models.Model):
    pass

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B 모델은 C 모델을 관계 맺는다면 C 모델을 B 모델에 앞서 만들어야 합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class C(models.Model):
    pass

class B(models.Model):
    c = models.ForeignKey(C)

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런데 C 모델은 A 모델에 관계를 지어야 한다고 가정하겠습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class C(models.Model):
    a = models.ForeignKey(A)

class B(models.Model):
    c = models.ForeignKey(C)

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;문제가 생깁니다. C 모델이 만들어지는 시점에 A라는 객체가 존재하지 않기 때문이죠. A 모델을 C 모델 코드 위로 올리면 안 됩니다. A 모델이 만들어지는 시점에 B 모델이 없기 때문이지요. 이런 경우에, C 모델에서 A 모델을 문자열 인자로 전달하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class C(models.Model):
    a = models.ForeignKey(&amp;#39;A&amp;#39;)

class B(models.Model):
    c = models.ForeignKey(C)

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;문자열로 관계 맺을 대상 모델을 지정하면 관계 맺을 대상 모델이 만들어졌다는 신호가 오기 전까지 관계를 맺지 않은 채 관계 맺는 연산을 지연시켜 놓습니다. 비유가 아니라 정말로 대상 모델 클래스(예 : &lt;code&gt;A&lt;/code&gt; 모델)가 초기화 되면 모델 신호(&lt;code&gt;ModelSignal&lt;/code&gt;)인 &lt;code&gt;class_prepared&lt;/code&gt;를 일으키고(fire), 대상 모델을 바라보던 모델은(예 : &lt;code&gt;C&lt;/code&gt; 모델) 이 신호을 받고선 비로소 실제 관계를 맺습니다.&lt;/p&gt;

&lt;p&gt;이런 연산 특성을 응용하여 관계 맺을 대상 모델로 자기 자신을 지정하는 것도 가능합니다. 순환 관계(recursive relationship)이라고 하는데, 문자열 &lt;code&gt;&amp;#39;self&amp;#39;&lt;/code&gt;을 지정하면 됩니다. 추후에 기회가 닿으면 순환 관계 모델을 만들어 보겠습니다.&lt;/p&gt;

&lt;p&gt;정리하면, 모델 관계 필드는 관계 맺을 대상을 세 가지 형태로 지정합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;관계 지을 모델 클래스 객체를 직접 인자로 전달&lt;/li&gt;
&lt;li&gt;관계 지을 모델 클래스 객체가 있는 경로를 문자열로 전달

&lt;ul&gt;
&lt;li&gt;형식 : &lt;code&gt;Django앱이름.모델이름&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;자기 자신을 가리키는 경우 &lt;code&gt;&amp;#39;self&amp;#39;&lt;/code&gt; 문자열 전달&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;강좌 9편을 마칩니다. 그동안 강좌 연재 소식을 &lt;a href=&quot;https://www.facebook.com/hello.kaycha&quot;&gt;제 페이스북 개인 페이지&lt;/a&gt;, &lt;a href=&quot;https://www.facebook.com/groups/django/&quot;&gt;Django 페이스북 그룹&lt;/a&gt;, 제 페이스북 개인 계정, 제 트위터에서 알려 왔는데요. 10편부터는 제 페이스북 개인 페이지와 트위터에만 알릴 예정입니다. 제 블로그를 구독하지 않고 강좌 연재 소식을 보시려면 제 페이스북 개인 페이지나 트위터를 구독하시길 바랍니다. :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/09-fullsource/pystagram&quot;&gt;9편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 28 Jun 2015 01:20:00 +0900</pubDate>
        <link>http://blog.hannal.com//2015/06/start_with_django_webframework_09/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/06/start_with_django_webframework_09/</guid>
        
        <category>django</category>
        
        <category>model relationship</category>
        
        <category>foreignkey</category>
        
        <category>authentication</category>
        
        <category>many to one relationship</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
      <item>
        <title>8. 로그인, 로그아웃 하기</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막 갱신일시 : 2015년 6월 7일 7시 19분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 편에서는 Django 이용자 인증 체계을 알아보고, 이 인증 체계에서 로그인을 어떻게 처리하는지 살펴 보겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Django 이용자 인증 체계&lt;/h3&gt;

&lt;p&gt;Django 이용자 인증 체계는 크게 두 가지 요소로 구분합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;인증 (Authentication)&lt;/li&gt;
&lt;li&gt;권한 (Authorization)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인증은 “나 누구인데 확인 좀...”이라면 권한은 “나 이거 해도 돼요?”라 보면 됩니다. 누구인지 신원이 확인되지 않은 존재에게 권한을 세밀하게 부여하진 못합니다. 신원이 확인된, 즉, 인증된 이용자인지 아닌지로 구분하는 정도로 권한을 부여합니다. 그래서, 권한 체계를 비롯하여 이용자 인증 체계 자체는 인증(Authetication)을 바탕으로 합니다.&lt;/p&gt;

&lt;h4&gt;(1) Django 내장 인증 기능&lt;/h4&gt;

&lt;p&gt;Django는 이용자 인증 체계를 내장하고 있으며, 우리는 이미 이 기능을 사용해봤습니다. &lt;a href=&quot;http://blog.hannal.com/2014/10/start_with_django_webframework_04/&quot;&gt;4. Photo 모델로 Admin 영역에서 데이터 다루기&lt;/a&gt; 편에서 최고 권한 이용자로 Admin 영역에 로그인하여 사진 게시물을 입력 했었거든요.&lt;/p&gt;

&lt;p&gt;Django에 내장된 인증 체계는 &lt;code&gt;django.contrib.auth&lt;/code&gt;라는 경로(name space)인 Python 패키지에 모여 있으며, Django 개념으로는 Django App입니다. &lt;code&gt;settings.py&lt;/code&gt; 파일에 있는 &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 설정 항목을 보면 &lt;code&gt;&amp;#39;django.contrib.auth&amp;#39;,&lt;/code&gt;가 있는데, 우리가 만드는 Pystagram에 사용할 Django App에 Django 인증 체계가 앱 형태로 기본 내장되어 있는 것입니다.&lt;/p&gt;

&lt;p&gt;Django webframework으로 제품을 만든다면 Django 인증 체계를 사용하는 게 좋습니다. 오랜 기간 개발되어 보안 수준은 성숙하고 안전하며, 확장 가능하게 유연합니다. Django에서 제공하는 다른 여러 기능이 내장된 인증 기능 구조를 따르기 때문에 Django가 제공하는 기능을 유기성 있고 풍부하게 쓰기에도 Django 인증 체계를 쓰는 게 좋습니다.&lt;/p&gt;

&lt;h4&gt;(2) Django 내장 권한 기능&lt;/h4&gt;

&lt;p&gt;권한 검사 기능도 Django에 내장되어 있습니다. 뷰(View) 단위 행동(behaviour), 데이터 단위 행동에 권한을 부여하여 운용 가능하며, 권한을 그룹 단위로 묶어서(grouping) 이용자에게 지정하는 기능도 제공합니다. 자세한 내용은 권한 기능을 적용할 때 다루겠습니다.&lt;/p&gt;

&lt;h3&gt;2. 로그인 기능 구현&lt;/h3&gt;

&lt;h4&gt;(1) URL 패턴 추가&lt;/h4&gt;

&lt;p&gt;Django에서 제공하는 인증 기능을 이용하여 로그인, 로그아웃 기능을 구현 하겠습니다. &lt;code&gt;settings.py&lt;/code&gt; 파일이 있는 시작패키지에서 &lt;code&gt;urls.py&lt;/code&gt; 파일을 열고, 다음 URL 패턴을 &lt;code&gt;urlpatterns&lt;/code&gt;에 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;urlpatterns = patterns(
    &amp;#39;&amp;#39;,
    # 중략
    url(
        r&amp;#39;^accounts/login/&amp;#39;,
        &amp;#39;django.contrib.auth.views.login&amp;#39;,
        name=&amp;#39;login&amp;#39;,
        kwargs={
            &amp;#39;template_name&amp;#39;: &amp;#39;login.html&amp;#39;
        }
    ),
    url(
        r&amp;#39;^accounts/logout/&amp;#39;,
        &amp;#39;django.contrib.auth.views.logout&amp;#39;,
        name=&amp;#39;logout&amp;#39;
    ),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;r&amp;#39;^accounts/login/&amp;#39;&lt;/code&gt;은 로그인 하는 URL이고, 로그인 화면을 출력하거나 로그인 인증 처리를 하는 뷰 함수는 Django에 내장된 &lt;code&gt;login&lt;/code&gt; 뷰 함수를 사용합니다. 이 함수 객체는 &lt;code&gt;django.contrib.auth.views&lt;/code&gt; 모듈에 존재합니다. 이 URL 패턴의 이름을 &lt;code&gt;name&lt;/code&gt; 키워드 인자를 이용하여 &lt;code&gt;login&lt;/code&gt;이라고 지었는데, 이 인자를 사용하지 않아도 무방합니다. &lt;code&gt;kwargs&lt;/code&gt;는 URL 패턴에 연결한 뷰 함수에 추가로 전달할 인자를 사전형(&lt;code&gt;dict&lt;/code&gt;) 객체로 전달합니다. 키가 &lt;code&gt;&amp;#39;template_name&amp;#39;&lt;/code&gt;이고 값이 &lt;code&gt;&amp;#39;login.html&amp;#39;&lt;/code&gt;인 사전형 객체인데, Django에서 제공하는 &lt;code&gt;login&lt;/code&gt; 뷰 함수에 &lt;code&gt;template_name&lt;/code&gt; 이름으로 키워드 인자를 지정하면 로그인 화면을 출력하는 데 사용할 템플릿으로 사용합니다. &lt;code&gt;&amp;#39;login.html&amp;#39;&lt;/code&gt;이라는 문자열을 지정했으니 우리가 &lt;code&gt;settings.py&lt;/code&gt;에서 &lt;code&gt;TEMPLATE_DIRS&lt;/code&gt;에 지정한 템플릿 디렉터리 중 최상위 순위에 있는 &lt;code&gt;login.html&lt;/code&gt; 파일을 찾아서 로그인 화면을 출력하는 데 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;r&amp;#39;^accounts/logout/&amp;#39;&lt;/code&gt;은 로그아웃 하는 URL이며, 로그아웃 기능 역시 로그인 기능과 마찬가지로 Django에 내장된 뷰 함수를 사용합니다.&lt;/p&gt;

&lt;h4&gt;(2) 로그인 템플릿 파일&lt;/h4&gt;

&lt;p&gt;이번엔 로그인 화면에 사용할 &lt;code&gt;login.html&lt;/code&gt; 템플릿 파일을 만듭니다. &lt;code&gt;templates&lt;/code&gt; 디렉터리에 &lt;code&gt;login.html&lt;/code&gt; 파일을 만들고 다음 내용을 담습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% extends &amp;quot;layout.html&amp;quot; %}

{% block content %}

{% if form.errors %}
&amp;lt;p&amp;gt;ID나 비밀번호가 일치하지 않습니다.&amp;lt;/p&amp;gt;
{% endif %}

{% if next %}
    {% if user.is_authenticated %}
    &amp;lt;p&amp;gt;권한이 없는 페이지에 접근하였으니, 권한이 있는 계정으로 로그인하세요.&amp;lt;/p&amp;gt;
    {% else %}
    &amp;lt;p&amp;gt;이 페이지를 보려면 로그인을 해야 합니다.&amp;lt;/p&amp;gt;
    {% endif %}
{% endif %}

&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;{% url &amp;#39;login&amp;#39; %}&amp;quot;&amp;gt;
{% csrf_token %}
&amp;lt;table&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;{{ form.username.label_tag }}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;{{ form.username }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;{{ form.password.label_tag }}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;{{ form.password }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;로그인&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;next&amp;quot; value=&amp;quot;{{ next }}&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Django에서 견본으로 제공하는 &lt;a href=&quot;https://docs.djangoproject.com/en/1.8/topics/auth/default/#django.contrib.auth.views.login&quot;&gt;login.html 템플릿 파일&lt;/a&gt;에서 따와서 약간 고쳤습니다. &lt;code&gt;form.errors&lt;/code&gt;엔 입력한 폼 양식에 문제가 있는 경우에 문제 내용이 담겨 있습니다. ID(&lt;code&gt;username&lt;/code&gt;)나 비밀번호를 입력하지 않거나 형식에 맞지 않는 등 여러 오류 종류가 있겠지만, 간결하게 ID와 비밀번호가 일치하지 않는다고만 안내합니다. 로그인에 대해서는 굳이 친절하게 뭐가 문제인지 자세히 알려줄 필요는 없습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{% if next %}&lt;/code&gt;에서 &lt;code&gt;next&lt;/code&gt;는 로그인을 한 후 이동할 URL을 뜻합니다. 예를 들어, 로그인을 하지 않은 채 사진에 달린 댓글을 삭제하려 하면 로그인하는 URL로 이동하고 로그인을 하고 나면 로그인하기 전에 접근하려는 URL으로 이동하는데, 이동할 URL이 GET이나 POST 방식으로 전달된 Query String 키인 &lt;code&gt;next&lt;/code&gt;에 담깁니다. 대개는 URL이 &lt;code&gt;https://pystagram.com/accounts/login/?next=/redirect_to_here/&lt;/code&gt;와 같이 표현됩니다.&lt;/p&gt;

&lt;p&gt;이동할 곳이 있는데(&lt;code&gt;{% if next %}&lt;/code&gt;) 로그인한 상태에서 로그인 URL에 왔다는 건 무슨 뜻일까요? 현재 로그인한 이용자 인증이나 권한 상태로는 문제가 있으니 다른 계정으로 로그인하라는 의미입니다. 로그인을 하지 않았다면, 로그인을 해야 접근 가능한 페이지이니 로그인을 하라고 안내합니다.&lt;/p&gt;

&lt;p&gt;그외엔 &lt;a href=&quot;http://blog.hannal.com/2015/05/start_with_django_webframework_07/&quot;&gt;7. 사진 게시물 제출하여 게시하기&lt;/a&gt; 편 내용과 비슷합니다. &lt;code&gt;form&lt;/code&gt;은 &lt;code&gt;django.contrib.auth.forms&lt;/code&gt; 모듈에 있는 &lt;code&gt;AuthenticationForm&lt;/code&gt; 폼 클래스로 생성한 인스턴스 객체입니다. 이 폼에 있는 &lt;code&gt;username&lt;/code&gt; 폼 필드와 &lt;code&gt;password&lt;/code&gt; 폼 필드를 사용한 것입니다. &lt;code&gt;username&lt;/code&gt;은 이용자의 실명이나 필명이 아니라 이용자 ID라고 보면 됩니다.&lt;/p&gt;

&lt;p&gt;이제 &lt;code&gt;http://localhost:8000/accounts/login/&lt;/code&gt;에 접속하면 로그인 화면이 나옵니다. 잘못된 &lt;code&gt;username&lt;/code&gt;과 &lt;code&gt;password&lt;/code&gt;을 제출하면 이에 대한 안내도 나오고요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-login_form_01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-login_form_02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;현재 구현한 로그인 기능으로 로그인을 하면 “Page not found” 오류를 만나게 됩니다. 이에 대해서는 곧 처리하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-404_after_login.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;3. 로그인 과정&lt;/h3&gt;

&lt;p&gt;Django가 제공하는 로그인 뷰 함수가 어떤 과정을 거쳐 이용자 인증을 처리하는지 좀 더 살펴 보겠습니다. 이 부분을 몰라도 로그인 기능을 이용하는 데 문제 없습니다.&lt;/p&gt;

&lt;h4&gt;(1) Form 검증&lt;/h4&gt;

&lt;p&gt;웹 페이지에서 폼 양식으로 넘어오는 값은 Form을 이용해 값을 검증합니다. Django는 로그인 절차에 &lt;code&gt;AuthenticationForm&lt;/code&gt; 폼을 사용하며, 이 폼은 &lt;code&gt;django.contrib.auth.forms&lt;/code&gt; 모듈에 있습니다. 이쯤되면 눈치 채셨을텐데, Django는 인증 관련 모델, 폼, 뷰, 미들웨어 등을 &lt;code&gt;django.contrib.auth&lt;/code&gt; 패키지 안에 담아 놨습니다. 인증과 관련된 소스 코드를 보려면 이 패키지를 살펴 보시면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AuthenticationForm&lt;/code&gt; 폼은 현재 이용자 정보와 HTTP 요청 정보를 담은 &lt;code&gt;request&lt;/code&gt; 객체도 함께 인자로 전달 받는데, 세션 처리에 필요하기 때문에 그렇습니다. 폼 양식 값이 유효하면(&lt;code&gt;is_valid()&lt;/code&gt;) 이용자가 로그인 후에 이동할 URL 문자열이 안전한 지 검사합니다. 그런 뒤 &lt;code&gt;auth_login()&lt;/code&gt; 함수를 이용해 로그인 인증 처리를 마무리하고 나서 이용자를 다음 URL로 이동(redirect) 시킵니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auth_login()&lt;/code&gt; 함수는 이름과는 달리 실제로는 인증 과정 마무리 단계를 담당합니다. 로그인 양식을 토대로 이용자 정보를 가져와서 HTTP Request(&lt;code&gt;request&lt;/code&gt;) 정보와 함께 사용해 서버 세션 정보를 만듭니다. 세션 정보를 만들지 않으면 로그인 정보는 유지되지 않아서 다른 페이지에 방문할 때마다 매번 로그인을 해야 합니다.&lt;/p&gt;

&lt;p&gt;로그인 양식, 그러니까 로그인 하려고 제출한 &lt;code&gt;username&lt;/code&gt;과 &lt;code&gt;password&lt;/code&gt;에 정확히 일치하는 이용자를 찾는 과정은 &lt;code&gt;AuthenticationForm&lt;/code&gt; 폼에서 이뤄집니다. 이 폼의 &lt;code&gt;clean()&lt;/code&gt; 메서드에서 &lt;code&gt;username&lt;/code&gt;과 &lt;code&gt;password&lt;/code&gt; 내용을 토대로 &lt;code&gt;authenticate()&lt;/code&gt; 함수를 이용해 인증을 시도합니다. 일치하는 이용자가 없으면 Form 오류를 일으키고, 우리는 “ID나 비밀번호가 일치하지 않습니다.”라는 안내를 화면에서 만납니다. 일치하는 이용자가 있으면 이 이용자 계정이 활성화 된 상태인지(&lt;code&gt;is_active&lt;/code&gt;) 검사하는 걸로 폼 안에서 처리하는 인증 과정을 마칩니다.&lt;/p&gt;

&lt;h4&gt;(2) 인증 체계 기반으로 처리&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;authenticate()&lt;/code&gt; 함수는 &lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 항목에 등록된 인증 체계 기반 클래스를 하나씩 가져와서 &lt;code&gt;authenticate()&lt;/code&gt; 메서드를 호출하여 인증을 시도합니다. 우리가 &lt;code&gt;settings.py&lt;/code&gt; 파일에 따로 이 항목을 설정하지 않아도 문제가 없는 건, Django에 기본으로 내장된 &lt;code&gt;global_settings.py&lt;/code&gt;에 이 항목이 설정되어 있기 때문입니다. 이 항목에 있는 내용은 &lt;code&gt;&amp;#39;django.contrib.auth.backends.ModelBackend&amp;#39;&lt;/code&gt; 이름영역인 클래스가 튜플 객체로 담겨 있습니다.&lt;/p&gt;

&lt;p&gt;데이터베이스에서 &lt;code&gt;username&lt;/code&gt;와 &lt;code&gt;password&lt;/code&gt;로 이용자를 찾는 과정이 비로소 이 단계에서 이뤄집니다. 이용자 모델을 가져오고, 이 모델을 이용해 &lt;code&gt;username&lt;/code&gt;으로 먼저 이용자 데이터를 가져오고, 이 이용자 데이터에 저장된 비밀번호와 이용자가 로그인하며 제출한 &lt;code&gt;password&lt;/code&gt;를 비교합니다. 비밀번호까지 일치하면 해당 이용자 데이터, 그러니까 이용자 모델로 생성한 인스턴스 객체를 반환하고, 그렇지 않으면 &lt;code&gt;None&lt;/code&gt;을 반환합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 항목에 &lt;code&gt;django.contrib.auth.backends.ModelBackend&lt;/code&gt;이 튜플에 담겨져 있다는 말은 다음 두 가지를 의미합니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Django 인증 체계 기반(backend)을 꼭 사용하지 않아도 된다.&lt;/li&gt;
&lt;li&gt;인증 체계 기반을 여러 개 이상을 사용하는 게 가능하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;인증 체계 기반의 클래스 규칙대로 인터페이스를 만들기만 한다면 우리가 직접 만든 인증 체계를 사용하거나 Facebook, Twitter처럼 인증 API를 제공하는 서비스나 플랫폼을 기반으로 인증 체계를 운용해도 됩니다.&lt;/p&gt;

&lt;h4&gt;(3) 이용자 모델 가져오기&lt;/h4&gt;

&lt;p&gt;인증 체계 기반을 Django에서 제공하는 기본 인증 &lt;code&gt;ModelBackend&lt;/code&gt;를 다른 것으로 갈아끼우거나 추가한다면, 이용자 정보를 데이터베이스에서 다루는 이용자 모델도 대체하여 쓸 수 있습니다. Django에 내장된 이용자 모델은 &lt;code&gt;django.contrib.auth.models&lt;/code&gt;에 &lt;code&gt;User&lt;/code&gt; 모델 클래스입니다. 이 이용자 모델엔 모델 필드이 간결하게 담겨 있습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; : 이용자 ID 역할. 다른 값과 중복되지 않는 고유한 값만 허용합니다(&lt;code&gt;unique=True&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt; : 비밀번호. &lt;code&gt;PasswordField&lt;/code&gt; 모델 필드.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first_name&lt;/code&gt; : 성씨. &lt;code&gt;CharField&lt;/code&gt; 모델 필드이며 생략 가능.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_name&lt;/code&gt; : 이름. &lt;code&gt;CharField&lt;/code&gt; 모델 필드이며 생략 가능.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;email&lt;/code&gt; : 전자우편 주소. &lt;code&gt;EmailField&lt;/code&gt; 모델 필드.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_staff&lt;/code&gt; : 관리자 여부. &lt;code&gt;BooleanField&lt;/code&gt; 모델 필드.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_active&lt;/code&gt; : 활성화 된 계정인지 여부. &lt;code&gt;BooleanField&lt;/code&gt; 모델 필드.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이외에도 &lt;code&gt;is_superuser&lt;/code&gt;나 &lt;code&gt;groups&lt;/code&gt; 같은 모델 필드 몇 가지가 더 있지만, 이 모델 필드의 값을 직접 다룰 일은 드물고, 이 강좌 내용을 이해하시면 이런 모델 필드를 직접 찾아 다루는 건 어렵지 않으므로 이 강좌에선 다루지 않겠습니다.&lt;/p&gt;

&lt;p&gt;만약, 필명이나 사용하는 언어, 거주 지역처럼 정보를 추가로 이용자로부터 입력 받아 관리하려면 이용자 모델 클래스를 &lt;strong&gt;확장&lt;/strong&gt;해야 합니다. Django에서 제공하는 이용자 모델을 변경해도 되지만, Django 소스 파일을 직접 고쳐서 쓰지 않는 게 좋습니다. Django 판을 올릴 때마다 직접 수정한 부분을 매번 챙겨야 하고, 연계되어 동작하는 다른 기능에 부작용을 일으킬 여지도 있습니다. 그래서 변경하지 않고 &lt;strong&gt;확장&lt;/strong&gt;해야 합니다.&lt;/p&gt;

&lt;p&gt;확장하는 자세한 방법은 다른 편에서 따로 다루기로 하고&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, 여기에선 확장 방법 종류만 간단히 언급하겠습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;따로 이용자 모델을 만들고, Django의 이용자 모델에 연결(Model relationship).&lt;/li&gt;
&lt;li&gt;이용자 모델과 모델 매니저, 이용자 폼 등을 모두 구현하여 이용자 모델 부분을 대체.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2번 방법에서 “모델 부분을 대체”한다는 표현을 눈 여겨 보세요. 일일이 Django 소스에서 이용자 모델 관련 부분, 가령, &lt;code&gt;django.contrib.auth.models.User&lt;/code&gt;를 &lt;code&gt;pystagram_auth.models.User&lt;/code&gt;와 같이 교체하는 건 아닙니다. &lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 항목에 지정하기만 하면 됩니다.&lt;/p&gt;

&lt;p&gt;이 항목 역시 우리가 따로 설정한 적이 없는데, Django의 &lt;code&gt;global_settings&lt;/code&gt;에 설정되어 있으며, 기본 값으로 &lt;code&gt;&amp;#39;auth.User&amp;#39;&lt;/code&gt; 문자열이 할당되어 있습니다. &lt;code&gt;auth&lt;/code&gt;는 Django 앱 이름(Python 패키지)이고, &lt;code&gt;User&lt;/code&gt;는 모델 클래스 이름입니다. Python 이름영역(name space)으로 풀어 쓰면 &lt;code&gt;auth.models.User&lt;/code&gt;인 셈입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;AUTH_USER_MODEL&lt;/code&gt; 설정 항목을 참조하여 이용자 모델을 실제로 가져오는 역할은 &lt;code&gt;get_user_model()&lt;/code&gt; 함수가 맡으며, &lt;code&gt;django.contrib.auth&lt;/code&gt;에 있습니다. 이 함수를 이용하면 이용자 모델이 어떤 것으로 바뀌든 코드를 일관되게 유지하게 됩니다. &lt;code&gt;AUTH_USER_MODEL = &amp;#39;auth.User&amp;#39;&lt;/code&gt;라고 설정하고 &lt;code&gt;get_user_model()&lt;/code&gt; 함수를 실행하면 &lt;code&gt;auth.models.User&lt;/code&gt;를 반환하고, &lt;code&gt;AUTH_USER_MODEL = &amp;#39;pystagram_auth.MyUser&amp;#39;&lt;/code&gt;로 설정하고 실행하면 &lt;code&gt;pystagram_auth.models.MyUser&lt;/code&gt;를 이용자 모델로 반환합니다. 그러므로 &lt;code&gt;get_user_model()&lt;/code&gt; 함수로 이용자 모델을 가져오는 게 좋습니다.&lt;/p&gt;

&lt;p&gt;인증 체계 기반(backend)과는 달리 기본 이용자 모델은 하나만 가능합니다.&lt;/p&gt;

&lt;h4&gt;(4) 정리하면&lt;/h4&gt;

&lt;p&gt;로그인 과정을 정리하면 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django.contrib.auth.views.login&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django.contrib.auth.forms.AuthenticationForm&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;django.contrib.auth.authenticate()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;settings.AUTHENTICATION_BACKENDS&lt;/code&gt;에서 인증 기반 하나씩 가져옴&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django.contrib.auth.backends.ModelBackend&lt;/code&gt;의 &lt;code&gt;authenticate()&lt;/code&gt; 메서드로 인증 처리&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django.contrib.auth.auth_login&lt;/code&gt; (정확히는 &lt;code&gt;django.contrib.auth.login&lt;/code&gt;를 &lt;code&gt;auth_login&lt;/code&gt;으로 import 한 것.)으로 인증 관련 세션 처리&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;로그인 이후 이동할 URL로 이동 처리(redirect)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;4. 로그인 관련 설정 항목&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt;에 설정하는 로그인 관련 항목이 몇 가지 있습니다.&lt;/p&gt;

&lt;h4&gt;(1) &lt;code&gt;LOGIN_URL&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;LOGIN_URL&lt;/code&gt;은 로그인 URL을 뜻합니다. Django에서 제공하는 장식자(decorator) 중 &lt;code&gt;login_required&lt;/code&gt;는 뷰 함수에 접근할 때 로그인 여부를 검사하고, 로그인하지 않으면 로그인 URL로 이용자를 이동시키는데, 이 로그인 URL을 &lt;code&gt;settings.LOGIN_URL&lt;/code&gt;에서 가져 옵니다. &lt;code&gt;global_settings&lt;/code&gt;에 설정된 기본값은 &lt;code&gt;/accounts/login/&lt;/code&gt;입니다.&lt;/p&gt;

&lt;h4&gt;(2) &lt;code&gt;LOGOUT_URL&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;LOGIN_URL&lt;/code&gt;과 같은 역할을 합니다. 기본값은 &lt;code&gt;/accounts/logout/&lt;/code&gt;입니다.&lt;/p&gt;

&lt;h4&gt;(3) &lt;code&gt;LOGIN_REDIRECT_URL&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;로그인을 하고 나서 이동할 URL을 설정합니다. 로그인 하고나서 이동할 URL이 지정된 경우 그 URL로 이동하지만, 이동할 URL이 지정되지 않았거나 지정한 URL이 보안상 문제가 있는 경우 &lt;code&gt;settings.LOGIN_REDIRECT_URL&lt;/code&gt;를 사용합니다.&lt;/p&gt;

&lt;p&gt;현재 구현한 기능으로는 로그인을 마치면 “Page not found” 오류를 만납니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-404_after_login.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;웹 브라우저 주소입력란을 잘 보면 &lt;code&gt;http://localhost:8000/accounts/profile/&lt;/code&gt;과 같이 전혀 본 적 없는 URL로 되어 있습니다. 이는 Django 기본 &lt;code&gt;LOGIN_REDIRECT_URL&lt;/code&gt; 설정값이 &lt;code&gt;/accounts/profile/&lt;/code&gt;이라서 그렇습니다. 아직 우리는 프로필 페이지를 만들지 않았으니 임시로 &lt;code&gt;/photo/upload/&lt;/code&gt;로 이동하도록 설정하겠습니다. 시작패키지에서 &lt;code&gt;settings.py&lt;/code&gt; 파일을 열고 다음 코드를 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LOGIN_REDIRECT_URL = &amp;#39;/photo/upload/&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 로그인을 마치면 &lt;code&gt;/photo/upload/&lt;/code&gt;로 이동하여 사진을 올리라는 압박을 줍니다.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;강좌 8편을 마칩니다. 아직은 Django 1.7판을 기준으로 강좌를 진행하고 있는데, 조만간 1.8판을 기준으로 내용을 다듬어야 겠습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/08-fullsource/pystagram&quot;&gt;8편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;다른 편에서 다루겠다는 내용이 늘어가니 불안해지네요. 까먹고 다루지 않을까봐요.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 07 Jun 2015 02:45:00 +0900</pubDate>
        <link>http://blog.hannal.com//2015/06/start_with_django_webframework_08/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/06/start_with_django_webframework_08/</guid>
        
        <category>django</category>
        
        <category>login</category>
        
        <category>logout</category>
        
        <category>authentication</category>
        
        <category>user model</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
      <item>
        <title>7. 사진 게시물 제출하여 게시하기</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막 갱신일시 : 2015년 6월 11일 4시 25분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그동안 우리는 사진 게시물을 Django Admin에서 게시했습니다. 이번엔 사진 게시물을 게시하는 기능을 구현하겠습니다. Django Form을 이용할 것인데, 이번 편에서는 왜 Django Form을 쓰면 좋고, 어떻게 동작하는 지 흐름을 이해하는 내용을 다루겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Django Form&lt;/h3&gt;

&lt;p&gt;Django Form은 Django의 주요 매력 요소 중 하나라 생각합니다. &lt;a href=&quot;http://blog.hannal.com/2014/9/start_with_django_webframework_03/&quot;&gt;Django는 MTV 패턴을 따른다&lt;/a&gt;고 하는데, Django Model과 Form을 활용하면 반복되는 처리를 Django가 대신 하고 이용자는 데이터(model)와 표현물(template)에 집중하게 됩니다.&lt;/p&gt;

&lt;p&gt;Form은 이름에서 드러나듯이 입력 양식(form)을 다루는 기능입니다. “입력 양식”이란 Django가 웹 프레임워크이니 웹 입력 양식을 뜻합니다. Django Form은 HTML로 만든 웹 화면의 form 태그에서 서버로 전달된 항목이 유효한 지 검증(validation)할 뿐만 아니라 웹 입력 항목에 필요한 HTML 태그를 생성해 출력합니다. 유효하지 않은 항목이 있으면 어떻게 유효하지 않은 지 안내말을 출력하기도 합니다.&lt;/p&gt;

&lt;p&gt;유효성은 꼼꼼하게 검사(validation)해야 합니다. 보안 측면에서 클라이언트(서비스 이용자)가 서버로 보내오는 데이터는 그다지 신뢰해서는 안 됩니다. 우리 서비스를 위태롭게 할 코드가 숨겨져 있을지도 모릅니다. 운영 측면에서도 이용자가 system이나 admin과 같이 운영자를 사칭하는 계정 이름을 짓거나 화면을 망가뜨리거나 다른 이용자의 권한을 가로채는 서비스 앞단(front-end)용 코드를 심을지도 모릅니다.&lt;/p&gt;

&lt;p&gt;보안성을 높이려면 마냥 뚫고 들어오지 못 하게 폐쇄하기만 할 게 아니라 개방할 필요도 있습니다. 개발자 또는 개발팀이 아무리 뛰어난 능력을 가졌어도 갈수록 증가하는 소프트웨어 복잡성에서 발생하는 수많은 경우와 상황에 대응하는 건 불가능합니다. 또한 서비스에 구현된 모든 기능을 완전히 직접 구현하여 제공하는 것이 아닌 이상 우리가 만드는 소프트웨어는 다른 소프트웨어나 도구와 연결되는데, &lt;a href=&quot;http://blog.dahlia.kr/post/82482810330&quot;&gt;우리가 만든 소프트웨어의 바깥 환경이 변하면서 우리가 만든 소프트웨어도 녹슬어&lt;/a&gt; 끊임없이 새로운 문제에 부딪히게 됩니다. 이 문제는 폐쇄하여 감출 게 아니라 오히려 개방하여 더 드러내서 많은 사람이 문제를 발견하는 게 낫습니다. Django는 오픈소스 프로젝트이며, 많은 개발자가 참여하고 기여하고 사용합니다. Django처럼 애용되고 활성화 된 오픈소스 프로젝트는 사람이 유발하는 보안 구멍을 주시하는 눈이 많아서 우리가 직접 구현하는 것보다 더 신뢰할 만하다고 생각합니다. 우리의 능력이 뛰어나든 그렇지 않든 말이지요.&lt;/p&gt;

&lt;p&gt;운영 측면에서 대응해야 할 대응은 반복되는 처리가 많습니다. 예를 들어, 숫자만 입력받을 항목에 숫자 외 다른 글자가 입력되었는지 검사하고 들어 있으면 예외 처리하거나 첨부한 이미지 파일이 제대로 된 파일인지 검사하는 처리는 항목 개수만큼이나 반복되는 과정입니다. 이를 일일이 코드로 검사한다면 실수할 가능성이 큽니다. 일관성과 관리 차원에서 그러한 역할을 하는 검사기(validator)를 만들어 처리하는 게 좋습니다.&lt;/p&gt;

&lt;p&gt;이렇게 클라이언트로부터 전송받은 데이터가 유효한지 검사하고 걸러내는 역할을 Django Form가 합니다. Django Form을 사용하면 상당히 다양한 입력 형식에 대해 수 년에 걸쳐 쌓인 경험으로 유효성을 검사합니다. 가령, Django Form의 &lt;code&gt;EmailField&lt;/code&gt; 폼 필드를 사용하면, 다국어나 &lt;code&gt;.wiki&lt;/code&gt;나 &lt;code&gt;.google&lt;/code&gt;과 같은 새로운 최상위 도메인(Top-level domain), 심지어 IPv4나 IPv6와 같이 IP주소로 구성된 전자우편 주소에 대응 가능합니다.&lt;/p&gt;

&lt;p&gt;물론 어디까지나 유효성을 검사하는 것이므로 제가 앞서 언급한 보안성에 대해 무결하지는 않습니다. 예를 들어, Django Form의 &lt;code&gt;ImageField&lt;/code&gt; 폼 필드는 클라이언트가 제출한 파일이 &lt;a href=&quot;https://github.com/django/django/blob/1.8.1/django/forms/fields.py#L691&quot;&gt;이미지 파일로 유효한지 확인하는 방법을 Image Library인 PIL이나 Pillow의 &lt;code&gt;verify()&lt;/code&gt;에 의존&lt;/a&gt;합니다. &lt;code&gt;verify()&lt;/code&gt; 메서드는 파일의 헤더 영역을 읽어 들여서 유효한 파일인지 검사할 뿐입니다. 그 마저도 일부 파일에 대해서만 제공하여, &lt;a href=&quot;https://github.com/python-pillow/Pillow/blob/master/PIL/GifImagePlugin.py&quot;&gt;GIF 파일&lt;/a&gt;을 처리하는 모듈엔 &lt;code&gt;verify()&lt;/code&gt;가 아예 없습니다. GIF, PNG, Jpeg과 같은 이미지 파일은 일반 문자열을 담는 Metadata 영역(chunk)을 지원하는데, 이 요소를 악용하여 보안을 위협하는 코드를 삽입하여 서버나 클라이언트(방문자)에게 해를 끼칠 가능성이 있습니다&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;하지만, 이는 Django Form이 보안에 초점을 맞춘 기능은 아니니 보안 대응용으로 Django Form에 의존하지 않아야 한다는 의미이며, 입력 항목이 유효한 지에 대한 필수 검사 요소는 갖추고 있으므로 Django Form을 가장 기본으로 사용하고 보안에 필요한 조치를 추가하는 것이 나을 것입니다.&lt;/p&gt;

&lt;h4&gt;Form과 ModelForm&lt;/h4&gt;

&lt;p&gt;Django Form은 &lt;code&gt;django.forms&lt;/code&gt; 모듈에서 &lt;code&gt;Form&lt;/code&gt;과 &lt;code&gt;ModelForm&lt;/code&gt; 클래스로 제공됩니다. &lt;code&gt;Form&lt;/code&gt;은 앞서 설명한 내용을 그대로 담고 있는 클래스입니다. &lt;code&gt;ModelForm&lt;/code&gt;은 Django Model과 연계한 Form 클래스입니다. Django Model을 사용한다면 &lt;code&gt;ModelForm&lt;/code&gt;을 이용하여 입력 양식과 입력 항목 검증, 그리고 검증된 입력 데이터를 데이터베이스에 저장하는 과정을 편하게 처리합니다.&lt;/p&gt;

&lt;p&gt;자세한 건 코드로 구현하면서 다루겠습니다.&lt;/p&gt;

&lt;h3&gt;2. 사진 게시물을 Form을 이용하여 게시하기&lt;/h3&gt;

&lt;h4&gt;Form 만들기&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;photo&lt;/code&gt; 디렉터리에 &lt;code&gt;forms.py&lt;/code&gt; 파일을 만듭니다. 앞으로 &lt;code&gt;photo&lt;/code&gt; 앱에서 사용하는 Form은 이 모듈에 만듭니다. 이제 사진 게시물을 편집하는(생성하거나 수정) 폼을 &lt;code&gt;PhotoEditForm&lt;/code&gt;이라는 이름으로 만듭니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# coding: utf-8

from __future__ import unicode_literals

from django import forms

from photo.models import Photo


class PhotoEditForm(forms.ModelForm):
    class Meta:
        model = Photo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아주 간결한 코드입니다. &lt;code&gt;forms&lt;/code&gt; 모듈에 있는 &lt;code&gt;ModelForm&lt;/code&gt; 클래스를 상속받는 &lt;code&gt;PhotoEditForm&lt;/code&gt; 클래스를 만들면 이 클래스는 Form 클래스입니다. &lt;code&gt;ModelForm&lt;/code&gt;이므로 클래스 안에 &lt;code&gt;Meta&lt;/code&gt; 클래스를 또 만들고, 그 안에 &lt;code&gt;model = Photo&lt;/code&gt;라는 코드로 이 Model form에 연계하는 Model을 &lt;code&gt;Photo&lt;/code&gt;로 지정한 것입니다. 이 &lt;code&gt;Photo&lt;/code&gt; 모델 클래스는 &lt;code&gt;photo&lt;/code&gt; 앱 디렉터리의 &lt;code&gt;models.py&lt;/code&gt; 모듈에 있으니 &lt;code&gt;from photo.models import Photo&lt;/code&gt;로 읽어 들인 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ModelForm&lt;/code&gt;은 Form에 연결한 Model의 모델 필드를 기반으로 폼 필드를 만듭니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Photo(models.Model):
    image_file = models.ImageField(upload_to=&amp;#39;%Y/%m/%d&amp;#39;)
    filtered_image_file = models.ImageField(upload_to=&amp;#39;static_files/uploaded/%Y/%m/%d&amp;#39;)
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델이 이와 같은 모델 필드로 구성되어 있으니 &lt;code&gt;PhotoEditForm&lt;/code&gt;을 일반 &lt;code&gt;Form&lt;/code&gt; 클래스를 상속받아 만든다면 다음과 같이 만드는 셈입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class PhotoEditForm(forms.Form):
    image_file = forms.ImageField()
    filtered_image_file = forms.ImageField()
    description = forms.CharField(
        max_length=500,
        required=False,
        widget=forms.Textarea
    )
    created_at = forms.DateTimeField(required=False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Model과 비슷하게 생겼습니다. 웹페이지에 사용할 HTML도 거의 비슷합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-new_photo_modelform.png&quot; alt=&quot;ModelForm으로 만든 PhotoEditForm&quot;&gt;&lt;/p&gt;

&lt;p&gt;앞 화면은 &lt;code&gt;ModelForm&lt;/code&gt;으로 만든 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼이 만든 HTML 화면이고, 다음 화면은 &lt;code&gt;Form&lt;/code&gt;으로 만든 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼이 만든 HTML 화면입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-new_photo_form.png&quot; alt=&quot;Form으로 만든 PhotoEditForm&quot;&gt;&lt;/p&gt;

&lt;p&gt;거의 동일하지요?&lt;/p&gt;

&lt;p&gt;Model은 데이터베이스와 연관되어 있어서 모델 필드형(type)이 데이터베이스의 컬럼(column)형(type)에 맞추어져 있고, Form은 웹 입력 양식인 form 관련 태그의 종류에 맞추어져 소소한 차이가 있지만, 결국 웹에서 넘겨받은 데이터를 데이터베이스에 넣는 것이라 서로 비슷한 인터페이스를 갖습니다. &lt;code&gt;ModelForm&lt;/code&gt;을 쓰면 모델 필드와 폼 필드 간 차이 마저도 별로 의식하지 않습니다. 그래서 Model을 잘 만들고 &lt;code&gt;ModelForm&lt;/code&gt;을 이용하여 Model form을 만들면 우리는 데이터 유효성을 검사하고 이를 데이터베이스에 넣거나 찾아 쓰는 데이터 관리와 처리를 날로 먹게 됩니다.&lt;/p&gt;

&lt;h4&gt;사진 게시물 작성 화면 만들기&lt;/h4&gt;

&lt;p&gt;사진 게시물을 게시하려면 사진 파일을 선택하고, 사진을 설명하는 본문 등 사진 게시물에 필요한 사항을 입력해야 합니다. 본 강좌 중 &lt;a href=&quot;http://blog.hannal.com/2014/8/start_with_django_webframework_01/&quot;&gt;Pystagram 기획&lt;/a&gt;편에서 사진 게시물을 작성하고 게시하는 URL을 &lt;code&gt;/photo/upload/&lt;/code&gt;로 하기로 했으니 &lt;code&gt;urls.py&lt;/code&gt;에 이 주소 패턴을 등록합니다. 시작 패키지(&lt;code&gt;settings.py&lt;/code&gt; 파일이 있는 디렉터리)에 있는 &lt;code&gt;urls.py&lt;/code&gt; 파일을 열고 다음 URL 패턴을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;url(r&amp;#39;^photo/upload/$&amp;#39;, &amp;#39;photo.views.new_photo&amp;#39;, name=&amp;#39;new_photo&amp;#39;),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 내용을 반영하면 다음과 같은 코드가 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;urlpatterns = patterns(
    &amp;#39;&amp;#39;,
    url(
        r&amp;#39;^photo/(?P&amp;lt;photo_id&amp;gt;\d+)/$&amp;#39;,
        &amp;#39;photo.views.single_photo&amp;#39;,
        name=&amp;#39;view_single_photo&amp;#39;
    ),
    url(r&amp;#39;^photo/upload/$&amp;#39;, &amp;#39;photo.views.new_photo&amp;#39;, name=&amp;#39;new_photo&amp;#39;),
    url(r&amp;#39;^admin/&amp;#39;, include(admin.site.urls)),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;/photo/upload/&lt;/code&gt; URL에 &lt;code&gt;photo.views.new_photo&lt;/code&gt;을 연결(mapping)한 것입니다. &lt;code&gt;photo&lt;/code&gt; 앱의 &lt;code&gt;views&lt;/code&gt; 모듈에 있는 &lt;code&gt;new_photo&lt;/code&gt;라는 객체를 가리키는 이름영역(namespace)입니다. 간단히 말해서, &lt;code&gt;photo&lt;/code&gt; 앱 디렉터리에 있는 &lt;code&gt;views.py&lt;/code&gt; 파일에 있는 &lt;code&gt;new_photo&lt;/code&gt;라는 실행 가능한(callable) 객체를 연결한 것이며, 이 &lt;code&gt;new_photo&lt;/code&gt;는 뷰 함수(View function)입니다.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code&gt;views.py&lt;/code&gt; 파일에 &lt;code&gt;new_photo&lt;/code&gt; 뷰 함수를 만듭니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from photo.forms import PhotoEditForm

def new_photo(request):
    edit_form = PhotoEditForm()

    return render(
        request,
        &amp;#39;new_photo.html&amp;#39;,
        {
            &amp;#39;form&amp;#39;: edit_form,
        }
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;new_photo.html&lt;/code&gt; 템플릿 파일에 템플릿 맥락 요소(Context)로 앞서 만든 &lt;code&gt;PhotoEditForm&lt;/code&gt; 클래스 객체를 전달하는데, 폼 클래스 자체가 아니라 폼 클래스를 인스턴스 객체로 생성하여 &lt;code&gt;edit_form&lt;/code&gt;에 할당하고, 이 &lt;code&gt;edit_form&lt;/code&gt;을 전달합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;render()&lt;/code&gt; 함수는 &lt;a href=&quot;http://blog.hannal.com/2014/11/start_with_django_webframework_05/&quot;&gt;5. url에 view 함수 연결해서 사진 출력하기&lt;/a&gt; 편에서 역할을 설명했고, 이번 편에서 처음 사용합니다. 이 함수는 대개 세 가지 인자를 필요로 합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;request&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;템플릿 파일 이름&lt;/li&gt;
&lt;li&gt;사전형 객체로 전달되는 템플릿 맥락 요소(context)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;request&lt;/code&gt; 객체는 뷰 함수에 첫 번째 인자로 전달되는 객체입니다. &lt;a href=&quot;https://docs.djangoproject.com/en/1.8/ref/request-response/#httprequest-objects&quot;&gt;HTTP Request&lt;/a&gt;를 뜻합니다. 뷰 함수는 언제나 첫 번째 인자로 &lt;code&gt;request&lt;/code&gt; 객체를 전달 받는데, 이 객체를 &lt;code&gt;render()&lt;/code&gt; 함수의 첫 번째 인자로 전달합니다. 템플릿에서 템플릿 맥락 요소로 &lt;code&gt;request&lt;/code&gt; 객체를 지정하는(mapping) 데 사용됩니다. 두 번째 인자는 템플릿 파일 경로를 문자열로 지정하며, 이 인자 역시 필수 인자입니다. 마지막으로, 세 번째 인자는 템플릿 파일 안에서 사용할 템플릿 맥락 요소를 사전형(&lt;code&gt;dict&lt;/code&gt;) 객체로 전달합니다. &lt;code&gt;{&amp;#39;form&amp;#39;: edit_form}&lt;/code&gt;에서 &lt;code&gt;Key&lt;/code&gt;인 &lt;code&gt;&amp;#39;form&amp;#39;&lt;/code&gt;은 템플릿 파일 안에서 &lt;code&gt;form&lt;/code&gt;이라는 이름으로 사용하는 템플릿 변수가 되고, &lt;code&gt;Value&lt;/code&gt;인 &lt;code&gt;edit_form&lt;/code&gt;(&lt;code&gt;PhotoEditForm()&lt;/code&gt;의 인스턴스 객체)가 이 템플릿 변수에 연결된(mapped) 객체인 셈이지요.&lt;/p&gt;

&lt;p&gt;이번엔 템플릿 파일인 &lt;code&gt;new_photo.html&lt;/code&gt;을 만듭니다. &lt;code&gt;photo&lt;/code&gt; 디렉터리에 &lt;code&gt;templates&lt;/code&gt; 디렉터리를 만들고, 그 안에 &lt;code&gt;new_photo.html&lt;/code&gt; 파일을 만들어 다음 내용을 담습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% extends &amp;#39;layout.html&amp;#39; %}

{% block content %}
&amp;lt;form
    method=&amp;quot;POST&amp;quot;

    action=&amp;quot;{% url &amp;#39;new_photo&amp;#39; %}&amp;quot;

    enctype=&amp;quot;multipart/form-data&amp;quot;
&amp;gt;
    {% csrf_token %}
    {{form.as_p}}

    &amp;lt;p&amp;gt;
        &amp;lt;input type=&amp;quot;submit&amp;quot; /&amp;gt;
    &amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Django Template은 추후 연재에서 자세히 다루겠습니다. 이 &lt;code&gt;new_photo.html&lt;/code&gt;는 뷰 함수에서 지정한 템플릿 파일이니 이후엔 &lt;strong&gt;뷰 템플릿 파일&lt;/strong&gt;이라 부르겠습니다. 템플릿 내용 중 눈여겨 볼 점은 &lt;code&gt;{{form.as_p}}&lt;/code&gt; 코드입니다. &lt;code&gt;form&lt;/code&gt;은 &lt;code&gt;new_photo&lt;/code&gt; 뷰 함수가 &lt;code&gt;edit_form&lt;/code&gt; 폼 객체를 &lt;code&gt;form&lt;/code&gt;이라는 템플릿 변수로 지정해 전달한 것입니다. 이 객체의 인스턴스 메서드인 &lt;code&gt;as_p()&lt;/code&gt;를 호출하면 각 폼 필드를 HTML 태그인 &lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;(paragraph, 문단 태그)로 감싸서 출력합니다. 실제로 출력되는 HTML 코드는 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;label for=&amp;quot;id_image_file&amp;quot;&amp;gt;Image file:&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;id_image_file&amp;quot; name=&amp;quot;image_file&amp;quot; type=&amp;quot;file&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;label for=&amp;quot;id_filtered_image_file&amp;quot;&amp;gt;Filtered image file:&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;id_filtered_image_file&amp;quot; name=&amp;quot;filtered_image_file&amp;quot; type=&amp;quot;file&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;label for=&amp;quot;id_description&amp;quot;&amp;gt;Description:&amp;lt;/label&amp;gt; &amp;lt;textarea cols=&amp;quot;40&amp;quot; id=&amp;quot;id_description&amp;quot; maxlength=&amp;quot;500&amp;quot; name=&amp;quot;description&amp;quot; rows=&amp;quot;10&amp;quot;&amp;gt;
&amp;lt;/textarea&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델에 있는 모델 필드 네 개 중 세 개가 HTML form 입력항목 태그로 표현 되었습니다. &lt;code&gt;created_at&lt;/code&gt;은 없는데, 날짜나 시간 관련 모델 필드(&lt;code&gt;DateTimeField&lt;/code&gt;, &lt;code&gt;DateField&lt;/code&gt;, &lt;code&gt;TimeField&lt;/code&gt;)에 &lt;code&gt;auto_now_add&lt;/code&gt;나 &lt;code&gt;auto_now&lt;/code&gt; 필드 옵션 중 하나라도 &lt;code&gt;True&lt;/code&gt;로 지정되면 Model form으로 폼 필드를 만들 때 기본 입력 항목으로 지정되지 않고, 그래서 HTML 태그로도 만들어 내지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{% csrf_token %}&lt;/code&gt;는 &lt;a href=&quot;https://goo.gl/Bw90sV&quot;&gt;CSRF(Cross Site Request Forgery)&lt;/a&gt; 토큰을 만드는 템플릿 태그입니다. Django로 만든 웹 페이지에 접속하면 각 세션을 기반으로 CSRF 토큰을 만들며, 이 토큰이 조작되거나 존재하지 않으면 Form 데이터를 Django로 동작하는 웹 애플리케이션 서버에 보내지 못합니다&lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. CSRF 토큰 검사를 하지 않도록 하면 되지만, 보안 상 좋지 않으니 HTML 폼 영역에 CSRF 토큰을 생성하도록 &lt;code&gt;{% csrf_token %}&lt;/code&gt;을 습관처럼 넣길 권합니다. 빠뜨리면 CSRF 검증을 실패하였다는 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-csrf_failed.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;뷰 템플릿 파일인 &lt;code&gt;new_photo.html&lt;/code&gt;는 레이아웃 구조를 잡는 역할을 하는 &lt;code&gt;layout.html&lt;/code&gt; 템플릿 파일로 확장하므로(&lt;code&gt;{% extends &amp;#39;layout.html&amp;#39; %}&lt;/code&gt;) 이 &lt;code&gt;layout.html&lt;/code&gt; 파일도 만들어야 합니다.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code&gt;manage.py&lt;/code&gt; 파일이 있는 디렉터리에 &lt;code&gt;templates&lt;/code&gt; 디렉터리를 새로 만들고, 그 안에 &lt;code&gt;layout.html&lt;/code&gt; 파일을 만들어 다음 내용을 담습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% load staticfiles %}

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ko&amp;quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;{% block page_title %}Pystagram{% endblock %}&amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;{% static &amp;#39;js/jquery-2.1.3.min.js&amp;#39; %}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
{% block content %}{% endblock %}
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지난 6회 연재 글에서 다룬 정적(static) 파일 내용이 얼핏 보이네요. 이것도 Django Template을 다루는 연재 글에서 자세히 다루겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;layout.html&lt;/code&gt;은 여러 뷰 템플릿에서 공통으로 사용하므로 앱 디렉터리가 아닌 별도 템플릿 디렉터리를 만들어 배치했습니다. 이 템플릿 디렉터리를 &lt;code&gt;settings.py&lt;/code&gt;에 설정합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;TEMPLATE_DIRS = (
    os.path.join(BASE_DIR, &amp;#39;templates&amp;#39;),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고로 이 설정은 Django 1.8에서는 유효하지 않으며, 추후 템플릿에 대해 자세히 다룰 때 이 설정을 수정하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;이제 Django의 개발용 내장 웹 서버를 구동하고(&lt;code&gt;python manage.py runserver&lt;/code&gt;) &lt;code&gt;/photo/upload/&lt;/code&gt; URL로 접속하면 사진 게시물을 작성하는 편집 화면이 나옵니다. 그런데 &lt;code&gt;filtered_image_file&lt;/code&gt;은 이미지 필터를 적용하여 가공된 이미지 파일을 담는 모델 필드입니다. 다시 말하면, 사진 게시물을 편집하는 단계에서 이용자가 접근해서는 안 되는 필드입니다. 그래서 화면에 나타나지 않게 감추겠습니다. 방법은 간단합니다. &lt;code&gt;PhotoEditForm&lt;/code&gt; 모델 폼의 메타 클래스에서 폼 필드로 사용할 모델 필드를 지정하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class PhotoEditForm(forms.ModelForm):
    class Meta:
        model = Photo
        fields = (&amp;#39;image_file&amp;#39;, &amp;#39;description&amp;#39;, )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fields&lt;/code&gt;는 폼에서 사용할 모델 필드를 지정하는 데 사용하며, 모델 필드 이름을 문자열로 리스트(&lt;code&gt;list&lt;/code&gt;)나 튜플(&lt;code&gt;tuple&lt;/code&gt;) 객체에 나열해 담으면 됩니다. 그런데 폼 필드로 사용하지 않을 모델 필드는 &lt;code&gt;filtered_image_file&lt;/code&gt; 하나이고, 사용할 모델 필드는 221개쯤 있다고 가정하겠습니다. 고작 하나를 사용하지 않으려고 221개 모델 필드 이름을 나열하면 무척 고통스럽습니다. 이런 경우는 사용하지 않을 모델 필드만 지정해야 편한데, &lt;code&gt;exclude&lt;/code&gt;에 지정하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class PhotoEditForm(forms.ModelForm):
    class Meta:
        model = Photo
        exclude = (&amp;#39;filtered_image_file&amp;#39;, )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 코드에서 유의할 점은 &lt;code&gt;exclude&lt;/code&gt; 역시 리스트나 튜플 객체를 할당해야 하므로 &lt;code&gt;&amp;#39;filtered_image_file&amp;#39;&lt;/code&gt; 뒤에 쉼표 하나 더 찍어줘야 합니다&lt;sup id=&quot;fnref3&quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-new_photo_modelform_without_some_field.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;이제 필터가 적용된 이미지 파일 모델 필드는 폼에서 다루지 않습니다.&lt;/p&gt;

&lt;h4&gt;사진 게시물 게시하기&lt;/h4&gt;

&lt;p&gt;우리는 사진 게시물 내용을 작성하는 URL과 사진 게시물을 제출하여 게시하는 URL을 같이 쓰겠습니다. 즉, &lt;code&gt;/photo/upload/&lt;/code&gt;에 HTTP Get 방식으로 접근하면 사진 게시물을 작성하는 화면이 나오고, POST 방식으로 접근하면 게시물을 제출합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def new_photo(request):
    if request.method == &amp;quot;GET&amp;quot;:
        edit_form = PhotoEditForm()
    elif request.method == &amp;quot;POST&amp;quot;:
        edit_form = PhotoEditForm(request.POST, request.FILES)

        if edit_form.is_valid():
            new_photo = edit_form.save()

            return redirect(new_photo.get_absolute_url())

    return render(
        request,
        &amp;#39;new_photo.html&amp;#39;,
        {
            &amp;#39;form&amp;#39;: edit_form,
        }
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;request.method&lt;/code&gt;가 &lt;code&gt;GET&lt;/code&gt;인 경우는 기존 코드를 그대로 사용하면 됩니다. &lt;code&gt;POST&lt;/code&gt; 방식, 즉, 게시물 내용과 파일을 제출 받는 부분을 추가했습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PhotoEditForm(request.POST, request.FILES)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;PhotoEditForm&lt;/code&gt; 폼에 첫 번째 인자로 &lt;code&gt;request.POST&lt;/code&gt;를, 두 번째 인자로 &lt;code&gt;request.FILES&lt;/code&gt;를 전달합니다. 첫 번째 인자는 폼에서 다룰 데이터를 뜻하며, 사전형(&lt;code&gt;dict&lt;/code&gt;) 객체나 사전형 객체처럼 동작하는(비슷한 인터페이스를 제공하는) 객체&lt;sup id=&quot;fnref4&quot;&gt;&lt;a href=&quot;#fn4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;여야 합니다. 파일을 제외한 HTML Form에서 &lt;code&gt;POST&lt;/code&gt; 방식으로 전송해온 모든 데이터가 &lt;code&gt;request.POST&lt;/code&gt;에 있습니다. 파일은 &lt;code&gt;request.FILES&lt;/code&gt;에 있습니다. 그래서, 이 둘을 분리하여 첫 번째 인자, 두 번째 인자로 전달한 것입니다.&lt;/p&gt;

&lt;p&gt;여기까지는 폼에서 처리할 데이터를 인자로 전달하여 설정한 것일 뿐이므로, &lt;code&gt;edit_form = PhotoEditForm()&lt;/code&gt;와 다를 바 없습니다. 그렇다고 해서 다음과 같이 코드를 작성해서는 안 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    edit_form = PhotoEditForm()
    if request.method == &amp;quot;POST&amp;quot;:
        edit_form.data = request.POST
        edit_form.files = request.FILES

        if edit_form.is_valid():
            new_photo = edit_form.save()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Django Form은 첫 번째 인자로 넘어온 데이터는 &lt;code&gt;data&lt;/code&gt; 멤버에, 파일은 &lt;code&gt;files&lt;/code&gt; 멤버에 할당하는 걸 이용한 것인데, Form 클래스로 인스턴스 객체를 생성해 할당하는 과정에서(&lt;code&gt;__init__()&lt;/code&gt;) 인자로 전달된 데이터나 파일이 있으면 &lt;code&gt;is_bound&lt;/code&gt;라는 멤버에 &lt;code&gt;True&lt;/code&gt;가 할당되고, 이 &lt;code&gt;is_bound&lt;/code&gt;가 &lt;code&gt;True&lt;/code&gt;여야만 &lt;code&gt;is_valid()&lt;/code&gt;를 비롯한 폼 검사를 수행하기 때문입니다. 물론,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    if request.method == &amp;quot;POST&amp;quot;:
        edit_form.is_bound = True
        edit_form.data = request.POST
        edit_form.files = request.FILES
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 &lt;code&gt;is_bound&lt;/code&gt;를 직접 &lt;code&gt;True&lt;/code&gt;로 할당하면 되지만, &lt;code&gt;edit_form = PhotoEditForm(request.POST, request.FILES)&lt;/code&gt;라고 코드를 짜면 그만인 것을 굳이 저렇게 짤 필요는 없습니다.&lt;/p&gt;

&lt;p&gt;폼에 검사할 데이터를 전달하여 초기화하여 인스턴스 객체(&lt;code&gt;edit_form&lt;/code&gt;)에는 전달된 데이터를 검사하는 몇 가지 인스턴스 메서드를 제공합니다. &lt;code&gt;full_clean()&lt;/code&gt;나 &lt;code&gt;clean()&lt;/code&gt; 메서드가 폼 데이터를 검사하는 데 사용하는 메서드인데, 실제로는 &lt;code&gt;is_valid()&lt;/code&gt; 메서드를 사용하면 됩니다. &lt;code&gt;is_valid()&lt;/code&gt; 메서드는 폼에 전달된 데이터를 폼 필드를 기준으로 검사하여 모든 데이터가 유효하면 &lt;code&gt;True&lt;/code&gt;를, 하나라도 유효하지 않은 항목이 있으면 &lt;code&gt;False&lt;/code&gt;를 반환합니다. 동작은 다음과 같습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/forms.py#L163&quot;&gt;is_valid&lt;/a&gt; : 폼 검사와 관련된 오류(error)가 있는 지 검사.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/forms.py#L157&quot;&gt;errors&lt;/a&gt; 항목 검사를 수행한 적이 없어서 오류 내용 존재 자체가 아예 존재하지 않는 경우(&lt;code&gt;None&lt;/code&gt;), &lt;code&gt;full_clean()&lt;/code&gt; 메서드 실행&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/forms.py#L362&quot;&gt;full_clean()&lt;/a&gt; : &lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/forms.py#L380&quot;&gt;&lt;code&gt;_clean_fields()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/forms.py#L399&quot;&gt;&lt;code&gt;_clean_form()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/django/django/blob/master/django/forms/models.py#L410&quot;&gt;&lt;code&gt;_post_clean()&lt;/code&gt;&lt;/a&gt; 메서드를 차례대로 수행하여 폼 데이터 유효성을 검사.&lt;/li&gt;
&lt;li&gt;최종 : &lt;code&gt;is_valid()&lt;/code&gt;는 오류(errors)가 없으면 &lt;code&gt;True&lt;/code&gt;를 반환하고, 있으면 데이터가 유효하지 않아 &lt;code&gt;False&lt;/code&gt;를 반환하며, 어떤 항목에 문제가 유효하지 않은 지 여부는 폼 인스턴스 객체의 &lt;code&gt;errors&lt;/code&gt; 멤버(프로퍼티)에 사전형 객체처럼 생긴 &lt;code&gt;ErrorDict&lt;/code&gt;의 인스턴스 객체로 할당.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;데이터가 모두 유효하면 &lt;code&gt;PhotoEditForm&lt;/code&gt; 폼의 인스턴스 객체인 &lt;code&gt;edit_form&lt;/code&gt;의 &lt;code&gt;save()&lt;/code&gt; 메서드를 실행하고, 이 메서드는 연결된 모델을 이용하여 데이터를 저장합니다. &lt;code&gt;save()&lt;/code&gt; 메서드는 &lt;code&gt;ModelForm&lt;/code&gt; 클래스에 있는 메서드인데, 모델 폼에 연결한 모델을 이용하여 데이터를 저장하고 저장한 모델의 인스턴스 객체를 반환합니다. &lt;code&gt;PhotoEditForm&lt;/code&gt;에 &lt;code&gt;Photo&lt;/code&gt; 모델을 연결하였으므로 &lt;code&gt;Photo&lt;/code&gt; 모델로 생성한 인스턴스 객체를 반환하는 셈이지요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return redirect(new_photo.get_absolute_url())&lt;/code&gt; 에서 &lt;code&gt;redirect()&lt;/code&gt; 함수는 HTTP Response를 반환하는 Django의 &lt;code&gt;HttpResponseRedirect&lt;/code&gt; 클래스를 이용하여 클라이언트를 지정한 URL로 이동(redirect)시킵니다. &lt;code&gt;render()&lt;/code&gt; 함수처럼 몇 가지 절차를 간편하게 줄여준 함수이며, &lt;code&gt;django.shortcuts&lt;/code&gt; 모듈에 있습니다. 사용하려면 &lt;code&gt;import&lt;/code&gt;해야 겠지요?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.shortcuts import (
    render,
    redirect,
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;new_photo.get_absolute_url()&lt;/code&gt;에서 눈여겨 볼 부분은 &lt;code&gt;get_absolute_url()&lt;/code&gt; 메서드입니다. &lt;code&gt;new_photo&lt;/code&gt;는 &lt;code&gt;Photo&lt;/code&gt; 모델로 생성한 인스턴스 객체인데, 우리는 &lt;code&gt;Photo&lt;/code&gt; 모델에 &lt;code&gt;get_absolute_url()&lt;/code&gt; 인스턴스 메서드를 만든 적이 없습니다. 먼저 만들고 설명하겠습니다. &lt;code&gt;photo&lt;/code&gt; 앱 디렉터리 안에 있는 &lt;code&gt;models.py&lt;/code&gt;에서 &lt;code&gt;Photo&lt;/code&gt; 모델 클래스에 다음 코드를 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;from django.core.urlresolvers import reverse_lazy


class Photo(models.Model):
    # 중략

    def get_absolute_url(self):
        return reverse_lazy(&amp;#39;view_single_photo&amp;#39;, kwargs={&amp;#39;photo_id&amp;#39;: self.id})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Django Model의 &lt;code&gt;get_absolute_url()&lt;/code&gt; 메서드는 모델의 개별 데이터에 접근하는 URL을 문자열로 반환합니다. 우리는 개별 사진을 보는 URL을 &lt;code&gt;/photo/사진ID/&lt;/code&gt; 패턴으로 제공하므로, 2번 사진은 &lt;code&gt;/photo/3/&lt;/code&gt;, 1023번 사진은 &lt;code&gt;/photo/1023/&lt;/code&gt; URL로 접근해 봅니다. 각 사진의 데이터는 &lt;code&gt;Photo&lt;/code&gt; 모델에 존재하며, 사진 데이터란 모델 클래스의 인스턴스 객체이므로 모델 클래스에 인스턴스 메서드로 &lt;code&gt;get_absolute_url()&lt;/code&gt;를 만드는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;get_absolute_url&lt;/code&gt;라는 이름을 반드시 따를 필요는 없으며 없어도 무방합니다. &lt;code&gt;permalink()&lt;/code&gt;라는 이름으로 메서드를 만들어도 무방합니다. 다만, &lt;code&gt;get_absolute_url&lt;/code&gt;는 Django가 개별 모델 데이터의 URL을 제공하는 메서드라고 전제해 놓은 이름이어서 Django가 알아서 처리하는 감춰진 동작&lt;sup id=&quot;fnref5&quot;&gt;&lt;a href=&quot;#fn5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;에 사용됩니다. 이런 관례(convention)를 따르면 일일이 지정하고 설정하지 않아도 되어 코드가 간결해집니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reverse_lazy()&lt;/code&gt;는 나중에 좀 더 자세히 다루기로 하고, 이번 편에서는 &lt;code&gt;urls.py&lt;/code&gt;에 &lt;code&gt;&amp;#39;view_single_photo&amp;#39;&lt;/code&gt; 이름으로 등록한 URL 패턴에 키워드 인자인 &lt;code&gt;photo_id&lt;/code&gt;의 값으로 &lt;code&gt;self.id&lt;/code&gt;를 할당하여 URL 문자열을 가져오는 데 사용했다고 이해하고 넘어가겠습니다.&lt;/p&gt;

&lt;p&gt;사진 게시물을 게시하는 기능을 구현했습니다. 실제로 올려보세요. 잘 게시됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-uploaded_photo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;유효하지 않은 폼 항목 오류 출력하기&lt;/h4&gt;

&lt;p&gt;혹시 사진으로 이미지 파일을 첨부하지 않거나 이미지 파일이 아닌 파일을 첨부하여 게시물을 첨부해 보셨나요? 강좌 소스 코드대로 잘 따라 오셨다면, 오류 내용이 안내됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-form_required_field.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/05/07-form_not_valid_image.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;우리는 템플릿 파일 어디에도 폼 오류 안내말을 출력하지 않았는데, 이게 어떻게 된 일일까요? 우리가 템플릿 파일에 폼 관련 내용을 담은 건 고작 한 줄 뿐입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    {{form.as_p}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;as_p&lt;/code&gt;로 폼 내용을 HTML로 출력하려 하면, 폼 항목에 오류가 있는 지, 즉, 폼 인스턴스 객체의 &lt;code&gt;errors&lt;/code&gt; 속성에 내용이 있는 지 확인하고, 있다면 오류 내용을 출력합니다. &lt;code&gt;{{form.as_p}}&lt;/code&gt;를 풀어쓰면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    {% for field in form %}
    &amp;lt;p&amp;gt;
        {% if field.errors %}
        {{ field.errors }}
        {% endif %}

        {{field}}
    &amp;lt;/p&amp;gt;
    {% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;form&lt;/code&gt; 템플릿 변수(&lt;code&gt;views.py&lt;/code&gt;에서는 &lt;code&gt;edit_form&lt;/code&gt; 객체)는 &lt;code&gt;for&lt;/code&gt;문으로 순환 가능합니다. 순환하면 폼에 등록된 폼 필드 순서대로 하나씩 폼 필드 객체를 꺼냅니다. 이 필드 객체를 출력하려 하면 이 필드가 생성하는 HTML 내용을 반환하는데, 이 필드 객체에 오류가 있는 경우, 오류 내용이 필드 객체의 &lt;code&gt;errors&lt;/code&gt;에 할당됩니다. 한 폼 필드에 오류 내용은 한 개 이상인 경우도 생기므로 순서열 객체(&lt;code&gt;list&lt;/code&gt;)에 오류가 하나씩 할당됩니다. &lt;code&gt;{{ field.errors }}&lt;/code&gt; 마저도 더 풀어쓰면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;        {% if field.errors %}
        &amp;lt;ul&amp;gt;
            {% for error in field.errors %}
            &amp;lt;li&amp;gt;{{error}}&amp;lt;/li&amp;gt;
            {% endfor %}
        &amp;lt;/ul&amp;gt;
        {% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;폼 필드를 직접 명시하여 오류를 확인하는 방법도 있습니다. 예를 들어, 이미지 파일 필드인 &lt;code&gt;image_file&lt;/code&gt;에 오류가 있는 지 확인하는 방법은 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% if form.errors.image_file %}
    {{form.errors.image_file}}
{% endif %}

또는

{% if form.image_file.errors %}
    {{form.image_file.errors}}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;대개는 Django Form이 자동으로 만들어주는 폼 항목 구성을 그대로 사용하진 않습니다. 각 폼 항목에 CSS나 HTML 속성을 다르게 부여하는데, Django 애플리케이션 개발자가 고치지 않고 Front-end 개발자가 수정하는 경우도 있습니다. 그래서 폼 필드를 구성하는 요소(레이블, 오류, 폼 필드 자체)를 분리해서 위와 같이 다루는 경우가 흔하고, 오히려 &lt;code&gt;{{form.as_p}}&lt;/code&gt;와 같이 Django에서 만들어내는 HTML 그대로를 사용하는 경우가 드뭅니다.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;강좌 7편을 마칩니다. 이번 편에서 다룬 Django Form이 동작하는 큰 흐름을 이해하면 앞으로 다룰 Form 세부 요소를 이해하기 쉽습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/07-fullsource/pystagram&quot;&gt;7편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/&quot;&gt;Encoding Web Shells in PNG IDAT chunks&lt;/a&gt; 글이나 &lt;a href=&quot;https://blog.sucuri.net/2013/07/malware-hidden-inside-jpg-exif-headers.html&quot;&gt;Malware Hidden Inside JPG EXIF Headers&lt;/a&gt; 글 참조.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://dobest.io/how-csrf-token-works/&quot;&gt;Django와 Rails에서 CSRF Token의 동작 방식&lt;/a&gt;이라는 글을 참조하세요.&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;쉼표를 빼서 &lt;code&gt;(&amp;#39;filtered_image_file&amp;#39;)&lt;/code&gt;로 표기하면 그냥 문자열 객체가 됩니다. 리스트 객체를 만드는 데 대괄호를(&lt;code&gt;[&lt;/code&gt;와 &lt;code&gt;]&lt;/code&gt;) 사용하고 튜플 객체를 만드는 데 소괄호(&lt;code&gt;(&lt;/code&gt;와 &lt;code&gt;)&lt;/code&gt;)를 활용해서 헷갈리기 일쑤인데, 튜플을 만드는 데에 필요한 건 괄호가 아니라 쉼표(&lt;code&gt;,&lt;/code&gt;)입니다. 왜냐하면 쉼표로 항목을 구분하여 나열하며, 괄호는 명시적으로 생략 가능하기 때문입니다. 단, 예외로 아무 항목이 없는 빈 튜플을 만드는 경우엔 그냥 소괄호로 짝지으면 됩니다. 자세한 내용은 &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#tuples&quot;&gt;공식 문서의 Tuples&lt;/a&gt;를 참조하세요.&amp;nbsp;&lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;사전형 객체처럼 생긴 이런 객체를 인스턴스로 만드는 데 사용하는 클래스(&lt;code&gt;type&lt;/code&gt;)도 &lt;code&gt;dict&lt;/code&gt;를 상속받아서 만들어서 &lt;code&gt;dict&lt;/code&gt;형이 제공하는 인터페이스를 포함합니다.&amp;nbsp;&lt;a href=&quot;#fnref4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn5&quot;&gt;
&lt;p&gt;“magic”이라는 표현을 씁니다. 뭔가 알아서 수행되는데, 이용자(개발자)가 굳이 알 필요가 없는 내부에 감춰진 동작을 뜻하지요.&amp;nbsp;&lt;a href=&quot;#fnref5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 18 May 2015 02:47:49 +0900</pubDate>
        <link>http://blog.hannal.com//2015/05/start_with_django_webframework_07/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/05/start_with_django_webframework_07/</guid>
        
        <category>django</category>
        
        <category>form</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
      <item>
        <title>6. Django 정적 파일 기능 이해하기</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;마지막 갱신일시 : 2015년 4월 26일 21시 10분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;지난 5회에서 다룬 정적 파일을 Django에서 어떻게 다루는지 자세히 알아 보겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Django와 정적 파일&lt;/h3&gt;

&lt;h4&gt;웹 서버와 웹 애플리케이션, 그리고 정적 파일&lt;/h4&gt;

&lt;p&gt;웹 게시판이나 블로그, 또는 우리가 만들 Pystagram은 웹 프로그램 또는 웹 애플리케이션입니다. 이런 웹 애플리케이션이 필요한 이유는 뭘까요?&lt;/p&gt;

&lt;p&gt;웹 서버는 웹 클라이언트가 특정 위치에(URL) 있는 서버 저장소(storage)에 있는 자원(resource)을 요청(HTTP request) 받아서 제공(serving)하는 응답(HTTP response) 처리가 기본 동작입니다. 이러한 기본 동작은 자원과 접근 가능한 주소가 정적으로 연결된 관계입니다. PC 스토리지의 &lt;code&gt;/Users/hannal/Pictures/private_photo.png&lt;/code&gt; 경로에 사진 파일이 있다고 예를 들면, 파일 경로는 웹 주소이고 사진 파일은 자원입니다. 사진 파일을 읽어 들여 보거나 수정하거나 지우는 행위는 HTTP method(GET, POST, PUT, DELETE 등)로 표현합니다. 정리하면 웹 서버는 요청받은 URL과 방식으로 서버에 존재하는 자원을 제공하며, 이 동작을 정적 자원(static resource)을 제공하는 것입니다.&lt;/p&gt;

&lt;p&gt;그런데 사진 파일 자체를 제공하는 데 그치지 않고, 사진에 설명도 달고 댓글도 단다면 자원(사진, 본문, 댓글 등)을 정적으로 제공하는 건 그다지 효율성이 좋지 않습니다. 본문을 수정하거나 댓글을 단다는 건 내용물이 고정되어 있지 않고 언제든지 변하는 상황인데, 언제든지 가변하는 내용물을 고정된 자원으로 제공하려면 내용물이 바뀔 때마다 고정된 자원도 매번 바꿔서 정적인 상태로 만들어야 합니다&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;가변하는 자원을 운용하려면 동적으로 자원을 처리하는 기능을 구현해야 하는데, 웹 서버에 이러한 기능을 추가하는 건 그리 좋은 생각은 아닙니다. 웹 서버는 대부분 C나 C++ 언어로 작성되어 있고, 동적인 웹 자원을 다루는 처리는 대부분 문자열을 가공하는 과정입니다. C나 C++ 언어로 문자열을 다루는 건 불편할 뿐더러 웹 서버에 동적 자원을 다루는 기능을 직접 탑재하는 것도 까다롭습니다. 문자열 가공을 더 쉽게 다루는 다른 언어(Python, Perl 등)로 동적 자원을 처리하는 별도 웹 서버 애플리케이션을 웹 서버와 분리해서 만들고 관리하는 게 낫습니다. 그리고 웹 애플리케이션과 웹 서버가 통신하는 인터페이스를 중간에 두어 서로를 연결합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/04/06-webserver-webapplication.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Django는 정적 파일을 제공하는 실 서비스용 기능을 제공하지 않는다&lt;/h4&gt;

&lt;p&gt;Django는 실 서비스 환경에서 사용할 정적 파일을 제공하는 기능을 제공하지 않습니다. 서버에 저장된 정적 파일을 읽어들여서 그대로 웹 클라이언트에 보내기만 하면 그만인 단순한 기능인데도 Django는 그런 기능을 제공하지 않습니다. 왜냐하면 그럴 필요가 없기 때문인데, 앞서 설명한 바와 같이 그런 작업에 대해서는 웹 서버가 전문가이기 때문입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/04/06-webserver-static_resources.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;게다가 웹 애플리케이션은 웹 서버와 연결하는 중간 인터페이스를 거치므로 효율이 더 떨어집니다.&lt;/p&gt;

&lt;p&gt;하지만, 개발 상황인 경우는 효율보다는 기능(역할)이 중요한 경우가 많습니다. 정적 파일이 제대로 제공되는지 확인하려고 항상 웹 서버를 구동할 필요는 없습니다. Django는 개발 단계에서 쓸 정적 파일 제공 기능을 제공합니다. 성능은 웹 서버가 직접 정적 파일을 제공하는 것 보다 떨어지지만 정적 파일 제공에 필요한 기능은 대부분 지원합니다.&lt;/p&gt;

&lt;h4&gt;Static file과 Media file&lt;/h4&gt;

&lt;p&gt;Django은 정적 파일을 크게 두 종류로 구분합니다.&lt;/p&gt;

&lt;p&gt;Static file은 Javascript, CSS, Image 파일처럼 웹 서비스에서 사용하려고 미리 준비해 놓은 정적 파일입니다. 파일 자체가 고정되어 있고, 서비스 중에도 수시로 추가되거나 변경되지 않고 고정되어 있습니다.&lt;/p&gt;

&lt;p&gt;Media file은 이용자가 웹에서 올리는(upload) 파일입니다. 파일 자체는 고정되어 이지만, 언제 어떤 파일이 정적 파일로 제공되고 준비되는지 예측할 수 없습니다.&lt;/p&gt;

&lt;p&gt;Static file과 Media file은 정적 파일이라는 점에서는 같지만, 정적 파일을 제공하는 상황을 예측할 수 있는지 여부는 다릅니다. Static file은 서비스에 필요한 정적 파일을 미리 준비해놓기 때문에 &lt;code&gt;manage.py&lt;/code&gt; 도구에 &lt;code&gt;findstatic&lt;/code&gt;과 &lt;code&gt;collectstatic&lt;/code&gt;이라는 기능으로 정적 파일을 모으고 찾는 관리 기능을 제공합니다. &lt;code&gt;manage.py&lt;/code&gt;은 Django 프로젝트를 관리하는 일에 필요한 기능을 명령줄 쉘(shell)에서 수행하는 도구입니다. 그에 반해 Media file은 이용자가 웹에서 올리는 파일이므로 미리 예측해서 준비할 수 없습니다. 그래서 Static file 관련된 관리 기능인 &lt;code&gt;findstatic&lt;/code&gt;과 &lt;code&gt;collectstatic&lt;/code&gt; 기능을 사용하지 못합니다.&lt;/p&gt;

&lt;h3&gt;2. Static file&lt;/h3&gt;

&lt;p&gt;Static file은 웹 서비스에 사용할 정적 파일을 미리 준비하여 제공하는 데 사용합니다. Django로 운영되는 프로젝트의 설정을 관리하는 &lt;code&gt;settings.py&lt;/code&gt;에 Static file와 관련된 항목이 다섯 가지 존재하며, 보통은 다음 세 가지를 사용합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;은 개발 단계에서 사용하는 정적 파일이 위치한 경로들을 지정하는 설정 항목입니다. 특정 Django App&lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;에만 사용하는 정적 파일이 있거나 혹은 정적 파일을 관리하기 용이하게 하기 위해 여러 경로(path)에 정적 파일을 배치하였다면, 이 경로들을 Python의 &lt;code&gt;list&lt;/code&gt;나 &lt;code&gt;tuple&lt;/code&gt;로 담으면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATICFILES_DIRS = (
    os.path.join(BASE_DIR, &amp;#39;static&amp;#39;),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;대개는 &lt;code&gt;static&lt;/code&gt;이라는 디렉터리에 정적 파일을 담습니다. 주의할 점은 정적 디렉터리 경로가 하나이더라도 반드시 &lt;code&gt;list&lt;/code&gt;나 &lt;code&gt;tuple&lt;/code&gt;로 담아야 한다는 점입니다. 흔히 하는 실수는 다음과 같이 항목 뒤에 쉼표를 빠뜨리는 것입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATICFILES_DIRS = (
    os.path.join(BASE_DIR, &amp;#39;static&amp;#39;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 경우 Django는 &lt;code&gt;ImproperlyConfigured: Your STATICFILES_DIRS setting is not a tuple or list; perhaps you forgot a trailing comma?&lt;/code&gt;라는 경고를 출력하며 정적 파일을 제대로 제공(serving)하지 못합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;manage.py&lt;/code&gt;에서 제공하는 명령어 중 &lt;code&gt;findstatic&lt;/code&gt;은 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 설정한 경로에서 지정한 정적 파일을 찾습니다. 실습해보지요. &lt;a href=&quot;http://jquery.com/download/&quot;&gt;jQuery download&lt;/a&gt;에서 “Download the compressed, production jQuery x.x.x”로 된 링크를 찾은 뒤 그 링크에 걸려있는 jQuery 파일을 내려 받습니다. 이 강좌를 쓰는 시점에서 저는 2.1.3판을 받았습니다. 이제 &lt;code&gt;manage.py&lt;/code&gt; 파일이 있는 경로에 &lt;code&gt;static&lt;/code&gt;이라는 이름으로 디렉터리를 만들고, 다시 &lt;code&gt;static&lt;/code&gt; 디렉터리 안에 &lt;code&gt;js&lt;/code&gt;라는 디렉터리를 만든 다음에 &lt;code&gt;js&lt;/code&gt; 디렉터리에 내려 받은 jQuery 파일을 넣습니다. &lt;code&gt;settings.py&lt;/code&gt;에는 앞서 나온 예시대로 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 항목을 추가합니다. 이제 &lt;code&gt;findstatic&lt;/code&gt; 명령어로 파일을 찾아 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py findstatic js/jquery-2.1.3.min.js
Found &amp;#39;jquery-2.1.3.min.js&amp;#39; here:
  /(중략)/pystagram/static/js/jquery-2.1.3.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;물론 &lt;code&gt;$&lt;/code&gt; 기호는 입력하지 않습니다. 쉘의 프롬프트 기호이니까요.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 &lt;code&gt;os.path.join(BASE_DIR, &amp;#39;static2&amp;#39;)&lt;/code&gt; 항목을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATICFILES_DIRS = (
    os.path.join(BASE_DIR, &amp;#39;static&amp;#39;),
    os.path.join(BASE_DIR, &amp;#39;static2&amp;#39;),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런 뒤 &lt;code&gt;manage.py&lt;/code&gt; 파일이 있는 경로에 &lt;code&gt;static2&lt;/code&gt; 디렉터리를 만들고 이 안에 &lt;code&gt;js&lt;/code&gt; 디렉터리를 만들어서 그곳에 jQuery 파일을 복사합니다. 마지막으로 &lt;code&gt;photo&lt;/code&gt; 디렉터리(Django &lt;code&gt;photo&lt;/code&gt; 앱)에 &lt;code&gt;static&lt;/code&gt; 디렉터리를 만들고 이 디렉터리에 jQuery 파일을 복사하고, 또 &lt;code&gt;static&lt;/code&gt; 디렉터리 안에 &lt;code&gt;js&lt;/code&gt; 디렉터리를 더 만든 뒤 그 안에 jQuery 파일을 복사합니다. 디렉터리 구조는 다음과 같으며, 강좌 연재가 너무 지연되어서 &lt;code&gt;photo&lt;/code&gt; 디렉터리가 뭔지 기억이 나지 않는다면 “&lt;a href=&quot;http://blog.hannal.com/2014/9/start_with_django_webframework_03/&quot;&gt;3. Photo 앱과 모델 만들기&lt;/a&gt;”편을 참고하시길 바랍니다. :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.&lt;/li&gt;
&lt;li&gt;static/

&lt;ul&gt;
&lt;li&gt;js/&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;static2/

&lt;ul&gt;
&lt;li&gt;js/&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;photo/

&lt;ul&gt;
&lt;li&gt;static/&lt;/li&gt;
&lt;li&gt;static/js/&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그런 뒤 다음 세 줄을 실행하여 화면에 나온 결과가 무엇을 의미하는지 고민해 보세요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py findstatic jquery-2.1.3.min.js
$ python manage.py findstatic js/jquery-2.1.3.min.js
$ python manage.py findstatic javascript/jquery-2.1.3.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;충분히 고민하셨으리라 믿습니다. &lt;code&gt;js/jquery-2.1.3.min.js&lt;/code&gt;를 찾으려 하면 &lt;code&gt;static&lt;/code&gt; 디렉터리에 있는 것과 &lt;code&gt;static2&lt;/code&gt; 디렉터리에 있는 것, 그리고 &lt;code&gt;photo/static&lt;/code&gt; 디렉터리에 있는 것이 나타납니다. 나타난 순서는 &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;static2&lt;/code&gt;, &lt;code&gt;photo/static&lt;/code&gt; 디렉터리 순인데, 이 배치된 순서는 실제로 정적 파일을 찾아다 사용할 때 우선순위로 작용합니다. 이 우선순위는 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 명기된 디렉터리가 더 상위인데, &lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;라는 &lt;code&gt;settings.py&lt;/code&gt; 설정 항목에서 기본 파일 시스템 파인더(finder)가 Django App 디렉터리보다 상위순위로 지정되어 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;이와 같이 정적 파일 경로가 일치할 경우 우선순위에 따라 실제 사용하는 정적 파일이 결정됩니다. 실제 물리 경로는 그대로 유지하지만 우선순위 문제를 겪지 않으려면 접두사(prefix)를 붙여서 구분하면 됩니다. &lt;code&gt;static2&lt;/code&gt;는 이제 곧 지울 항목이니까 &lt;code&gt;byebye&lt;/code&gt;라는 접두사를 쓰겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATICFILES_DIRS = (
    os.path.join(BASE_DIR, &amp;#39;static&amp;#39;),
    (&amp;#39;byebye&amp;#39;, os.path.join(BASE_DIR, &amp;#39;static2&amp;#39;),),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 설정을 적용하면 &lt;code&gt;static2&lt;/code&gt; 디렉터리가 마치 &lt;code&gt;byebye&lt;/code&gt;라는 디렉터리 안에 위치한 것처럼 &lt;code&gt;static2&lt;/code&gt;에 있는 정적 파일에 접근해야 합니다. 다음 두 명령을 실행해 보세요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py findstatic js/jquery-2.1.3.min.js
$ python manage.py findstatic byebye/js/jquery-2.1.3.min.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;은 웹 페이지에서 사용할 정적 파일의 최상위 URL 경로입니다. 이 최상위 경로 자체는 실제 파일이나 디렉터리가 아니며, URL로만 존재하는 단위입니다. 그래서 이용자 마음대로 정해도 무방하며, 저는 &lt;code&gt;assets&lt;/code&gt;라는 URL 경로를 쓰겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATIC_URL = &amp;#39;/assets/&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;문자열은 반드시 &lt;code&gt;/&lt;/code&gt;로 끝나야 합니다. &lt;code&gt;findstatic&lt;/code&gt; 명령어로 탐색되는 정적 파일 경로에 &lt;code&gt;STATIC_URL&lt;/code&gt; 경로를 합치면 실제 웹에서 접근 가능한 URL이 됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;findstatic js/jquery-2.1.3.min.js&lt;/code&gt; : http://pystagram.com&lt;strong&gt;/assets/js/jquery-2.1.3.min.js&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findstatic byebyejs/jquery-2.1.3.min.js&lt;/code&gt; : http://pystagram.com&lt;strong&gt;/assets/byebye/js/jquery-2.1.3.min.js&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;은 정적 파일이 실제 위치한 경로를 참조하며, 이 실제 경로는 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 설정 항목에 지정된 경로가 아닌 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 설정 항목에 지정된 경로입니다. 그런데 &lt;code&gt;static2&lt;/code&gt; 경로는 &lt;code&gt;byebye&lt;/code&gt; 접두사가 붙어서 실제 물리 경로와 다릅니다. 이에 대해선 &lt;code&gt;STATIC_ROOT&lt;/code&gt;에서 자세히 다루겠습니다.&lt;/p&gt;

&lt;h4&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;는 Django 프로젝트에서 사용하는 모든 정적 파일을 한 곳에 모아넣는 경로입니다. 한 곳에 모으는 기능은 &lt;code&gt;manage.py&lt;/code&gt; 파일의 &lt;code&gt;collectstatic&lt;/code&gt; 명령어로 수행합니다. Django가 모든 파일을 검사하여 정적 파일로 사용하는지 여부를 확인한 뒤 모으는 건 아니고, 각 Django 앱 디렉터리에 있는 &lt;code&gt;static&lt;/code&gt; 디렉터리와 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 지정된 경로에 있는 모든 파일을 모읍니다.&lt;/p&gt;

&lt;p&gt;개발 과정에선, 정확히는 &lt;code&gt;settings.py&lt;/code&gt;의 &lt;code&gt;DEBUG&lt;/code&gt;가 &lt;code&gt;True&lt;/code&gt;로 설정되어 있으면 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 설정은 작용하지 않으며, &lt;code&gt;STATIC_ROOT&lt;/code&gt;는 실 서비스 환경을 위한 설정 항목입니다. 그래서 개발 과정에선 &lt;code&gt;STATIC_ROOT&lt;/code&gt;에 지정한 경로가 실제로 존재하지 않거나 아예 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 설정 항목 자체가 없어도 문제없이 동작합니다.&lt;/p&gt;

&lt;p&gt;그렇다면 실 서비스 환경에서 &lt;code&gt;STATIC_ROOT&lt;/code&gt;는 왜 필요할까요? 이 경로에 있는 모든 파일을 웹 서버가 직접 제공(serving)하기 위함입니다. 실제 실습하며 확인해 보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt;에 다음과 같이 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 설정 항목을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;STATIC_ROOT = os.path.join(BASE_DIR, &amp;#39;collected_statics&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt;나 &lt;code&gt;tuple&lt;/code&gt;형인 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;와는 달리 문자열 경로를 할당합니다. 이제 &lt;code&gt;collectstatic&lt;/code&gt; 명령어로 현 프로젝트가 사용하는 모든 정적 파일을 모읍니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ python manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지정한 경로에 있는 기존 파일을 전부 덮어 쓰는데 정말로 모을 거냐고 묻습니다. 원본 파일을 덮어 쓰는 게 아니니 &lt;code&gt;yes&lt;/code&gt;라고 입력합니다. 정적 파일을 모을 경로를 &lt;code&gt;manage.py&lt;/code&gt; 파일이 있는 경로에 &lt;code&gt;collected_statics&lt;/code&gt; 디렉터리로 지정했으므로 이 디렉터리가 만들어지고, 이 안에 사용하는 모든 정적 파일이 &lt;strong&gt;복사&lt;/strong&gt;됩니다. 이 디렉터리 안을 보면 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 넣은 경로들 중 &lt;code&gt;byebye&lt;/code&gt;라는 접두사를 붙인 디렉터리도 보입니다. 마음으로 “hi”라고 인사 보내셨다면 당신은 친절한 사람. :)&lt;/p&gt;

&lt;p&gt;이렇게 정적 파일을 모아놓은 &lt;code&gt;STATIC_ROOT&lt;/code&gt;는 Django가 직접 접근하진 않습니다. Django가 접근하여 다루는 설정은 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;이며, &lt;code&gt;STATIC_ROOT&lt;/code&gt;는 정적 파일을 직접 제공(serving)할 웹 서버가 접근합니다. &lt;code&gt;collectstatic&lt;/code&gt; 명령어를 수행하면 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;나 앱 디렉터리에 있는 &lt;code&gt;static&lt;/code&gt; 디렉터리 안에 있는 파일을 &lt;code&gt;STATIC_ROOT&lt;/code&gt;에 모으는데, &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 지정된 경로인 경우 따로 명시한 접두사으로 디렉터리를 만들어 그 안에 파일을 복사하고, 앱 디렉터리에 있는 &lt;code&gt;static&lt;/code&gt; 디렉터리인 경우는 앱 이름으로 디렉터리를 만들어 그 안에 &lt;code&gt;static&lt;/code&gt; 디렉터리 안에 있는 파일을 복사합니다. 즉, 개발 단계(&lt;code&gt;DEBUG = True&lt;/code&gt;)에서는 정적 파일 URL 경로가 논리 개념이고, 서비스 환경(&lt;code&gt;DEBUG = False&lt;/code&gt;)에서는 실제 물리 개념인 정적 파일 URL 경로가 되는 것입니다.&lt;/p&gt;

&lt;p&gt;그렇다면 경로가 동일해서 우선순위가 발생하는 경우에 &lt;code&gt;collectstatic&lt;/code&gt;을 수행하면 어떤 파일이 실제로 복사될까요? 물론 1순위 경로에 위치한 파일이 복사됩니다. &lt;code&gt;photo/js/jquery-2.1.3.min.js&lt;/code&gt; 파일을 열어서 내용을 몽땅 지워서 0 byte 파일로 만들고, &lt;code&gt;collected_static&lt;/code&gt; 디렉터리를 지운 뒤에 다시 &lt;code&gt;collectstatic&lt;/code&gt; 명령어를 실행해 보세요. &lt;code&gt;collected_static&lt;/code&gt; 디렉터리 안의 &lt;code&gt;js&lt;/code&gt; 디렉터리 안에 있는 &lt;code&gt;jquery-2.1.3.min.js&lt;/code&gt; 파일을 보면 0 byte인 &lt;code&gt;photo/js/jquery-2.1.3.min.js&lt;/code&gt;이 아닌 정상 파일인 &lt;code&gt;js/jquery-2.1.3.min.js&lt;/code&gt;이 복사되어 있습니다.&lt;/p&gt;

&lt;p&gt;주의할 점. &lt;code&gt;STATIC_ROOT&lt;/code&gt; 경로는 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 등록된 경로와 같은 경로가 있어서는 안 됩니다. 남들이 잘 안 쓸만한 이상한 이름(&lt;code&gt;collected_statics&lt;/code&gt;?)을 쓰세요.&lt;/p&gt;

&lt;h4&gt;&lt;code&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;개발 단계에서 정적 파일을 제공(serving)하는 기능은 Django에서 제공하는데, 사용 방법은 아주 간단합니다. &lt;code&gt;django.conf.urls.static&lt;/code&gt; 모듈에 있는 &lt;code&gt;static&lt;/code&gt; 함수를 이용해 URL 패턴을 만들어 &lt;code&gt;urls.py&lt;/code&gt;의 &lt;code&gt;urlpatterns&lt;/code&gt;에 추가하는 것입니다. 지난 5회 강좌분에서 이미 사용한 바로 그 방식입니다. 이 함수를 조금 더 살펴볼까요?&lt;/p&gt;

&lt;p&gt;이 함수를 &lt;code&gt;urls.py&lt;/code&gt;에서 URL 패턴을 만드는 데 사용한 걸 보면 이 함수 자체가 정적 파일을 제공한다기 보다는 정적 파일 URL에 그런 기능을 하는 무언가를 연결할 것이라 예상되지요? 실제로 그렇게 동작합니다. 정적 파일에 접근할 URL 접두사(&lt;code&gt;staticfiles&lt;/code&gt;)를 첫 번째 인자로 넣고 정적 파일이 위치한 경로를 &lt;code&gt;document_root&lt;/code&gt;라는 키워드 인자로 전달하면, 이런 내용을 &lt;code&gt;django.views.static.serve&lt;/code&gt;라는 뷰 함수가 사용합니다. 이 &lt;code&gt;serve&lt;/code&gt; 함수는 서버에 위치한 파일을 읽어서(&lt;code&gt;open(fullpath, &amp;#39;rb&amp;#39;)&lt;/code&gt;) 스트리밍 방식으로 응답(&lt;code&gt;StreamingHttpResponse&lt;/code&gt;)합니다. 실제 파일 서빙을 하는 것입니다. 물론 성능은 웹 서버가 직접 서빙하는 것보다 떨어지므로 개발 단계에서만 쓰는 게 좋을텐데, &lt;code&gt;django.conf.urls.static&lt;/code&gt;의 &lt;code&gt;static&lt;/code&gt; 함수는 &lt;code&gt;settings&lt;/code&gt;의 &lt;code&gt;DEBUG&lt;/code&gt;가 True인 경우에만 이런 정적 파일 제공에 필요한 URL 패턴을 만듭니다. 간단히 말해서 &lt;code&gt;DEBUG=True&lt;/code&gt;인 경우에만 &lt;code&gt;static&lt;/code&gt; 함수는 우리가 원하고 기대하는 동작을 합니다.&lt;/p&gt;

&lt;p&gt;그런데 &lt;strong&gt;Static file&lt;/strong&gt;은 이런 처리를 하지 않아도 개발 단계에서는 잘 제공(serving)됩니다. Media file(업로드 파일)은 &lt;code&gt;urls.py&lt;/code&gt;에 &lt;code&gt;static&lt;/code&gt; 함수를 사용해 정적 파일을 제공하도록 강제했지만, Static file은 그런 처리를 하지 않아도 저절로 제공(serving)됩니다. 이런 &lt;strong&gt;저절로&lt;/strong&gt; 동작하는 기능은 Django 프레임워크에 내장된 Django App인 &lt;code&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/code&gt;가 맡고 있습니다. &lt;code&gt;settings.py&lt;/code&gt; 파일을 열어서 &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 항목을 보면 우리가 앞서 추가한 &lt;code&gt;&amp;#39;photo&amp;#39;&lt;/code&gt; 외에도 &lt;code&gt;django.contrib&lt;/code&gt;으로 시작하는 몇 가지가 더 있는데, 그 중에 &lt;code&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/code&gt;가 있습니다. &lt;code&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/code&gt; 항목을 보니 지난 강좌에서 사용해 본 Django admin 기능도 Django App이라는 걸 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 앱에는 이 앱이 사용하는 URL 패턴을 담은 &lt;code&gt;urls.py&lt;/code&gt; 파일이 있는데, 이 파일 내용은 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def staticfiles_urlpatterns(prefix=None):
    &amp;quot;&amp;quot;&amp;quot;
    Helper function to return a URL pattern for serving static files.
    &amp;quot;&amp;quot;&amp;quot;
    if prefix is None:
        prefix = settings.STATIC_URL
    return static(prefix, view=&amp;#39;django.contrib.staticfiles.views.serve&amp;#39;)

# Only append if urlpatterns are empty
if settings.DEBUG and not urlpatterns:
    urlpatterns += staticfiles_urlpatterns()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;단순하지요? &lt;code&gt;settings.py&lt;/code&gt;의 &lt;code&gt;STATIC_URL&lt;/code&gt; 항목의 URL에 &lt;code&gt;django.contrib.staticfiles.views.serve&lt;/code&gt; 뷰 함수를 연결했는데, 이 내용은 &lt;code&gt;settings.DEBUG&lt;/code&gt;가 &lt;code&gt;True&lt;/code&gt;인 경우에 반영됩니다.&lt;/p&gt;

&lt;h4&gt;정리&lt;/h4&gt;

&lt;p&gt;정리하면, 정적 파일이 있는 경로를 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;에 지정하면 개발 단계에서는 더 신경쓸 게 없습니다.&lt;/p&gt;

&lt;h3&gt;3. Media file&lt;/h3&gt;

&lt;h4&gt;간단히 설명&lt;/h4&gt;

&lt;p&gt;Media file은 이용자가 웹에서 업로드한 정적 파일입니다. 미리 준비해놓고 제공하는 Static file과는 달리 언제 어떤 파일이 추가될 지 모르므로 &lt;code&gt;findstatic&lt;/code&gt;과 &lt;code&gt;collectstatic&lt;/code&gt;같은 명령어는 Media file에 대해서는 무의미합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt;에 Media file와 관련된 항목이 두 가지 존재합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;파일 업로드와 관련하여 세부 조정하는 설정이 몇 가지 더 있지만, 대개는 기본 설정(&lt;code&gt;global_settings&lt;/code&gt;)대로 써도 무방합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;는 이름이 &lt;code&gt;STATIC_ROOT&lt;/code&gt;과 비슷한데, 업로드가 끝난 파일을 배치할 최상위 경로를 지정하는 설정 항목입니다. &lt;code&gt;STATIC_ROOT&lt;/code&gt;보다는 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;이 더 비슷한 역할을 하는데, &lt;a href=&quot;https://docs.djangoproject.com/en/dev/releases/1.3/#extended-static-files-handling&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;는 Django 1.3판에 새롭게 도입&lt;/a&gt;된 설정이자 기능이다 보니 설정 항목 이름을 미처 교통정리하지 못했나 봅니다. &lt;code&gt;MEDIA_ROOT&lt;/code&gt;는 &lt;code&gt;STATIC_ROOT&lt;/code&gt;와 다른 경로를 지정해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;은 &lt;code&gt;STATIC_URL&lt;/code&gt;과 이름도 비슷하고 역할도 비슷합니다. &lt;code&gt;/&lt;/code&gt;로 끝나는 URL 경로 문자열로 설정해야 한다는 점도 같습니다. &lt;code&gt;MEDIA_URL&lt;/code&gt;도 &lt;code&gt;MEDIA_ROOT&lt;/code&gt;와 마찬가지로 &lt;code&gt;STATIC_URL&lt;/code&gt;과 URL 경로가 달라야 합니다.&lt;/p&gt;

&lt;p&gt;주요 개념을 Static file 영역에서 설명하니 Media file은 간결하게 정리 되는군요.&lt;/p&gt;

&lt;h4&gt;지난 Media file 관련 코드 수정&lt;/h4&gt;

&lt;p&gt;지난 5회에서 파일 업로드를 경험해 봤지만, 흐름을 파악하는 데 목표가 있는 코드여서 올바른(?) 코드는 아니었습니다. 이번 6회 강좌로 Django가 정적 파일을 다루는 방식을 이해했으니 지난 번 코드도 보다 적확하게 고치겠습니다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;code&gt;settings.py&lt;/code&gt;에서 &lt;code&gt;MEDIA_ROOT&lt;/code&gt; 부분을 고치겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;MEDIA_ROOT = os.path.join(BASE_DIR, &amp;#39;static_files&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기존엔 이와 같이 설정했는데, Static file과 혼돈할 여지가 있으니 업로드 파일이 저장될 디렉터리 이름을 &lt;code&gt;uploaded_files&lt;/code&gt;로 바꾸겠습니다. 그리고, 업로드 URL 경로는 &lt;code&gt;/uploads/&lt;/code&gt;로 보다 명확하게 표현하겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;MEDIA_URL = &amp;#39;/uploads/&amp;#39;
MEDIA_ROOT = os.path.join(BASE_DIR, &amp;#39;uploaded_files&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번엔 &lt;code&gt;urls.py&lt;/code&gt;에 Media file을 제공(serving)하는 URL 패턴 등록 부분을 고치겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if settings.DEBUG:
    urlpatterns += static(
        settings.MEDIA_URL, document_root=settings.MEDIA_ROOT
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;#39;static_files&amp;#39;&lt;/code&gt;을 &lt;code&gt;settings.MEDIA_URL&lt;/code&gt;로 바꾼 것입니다.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code&gt;photo&lt;/code&gt; 앱의 &lt;code&gt;models.py&lt;/code&gt; 파일을 열어서 업로드 된 이미지 파일이 저장될 경로를 지정한 &lt;code&gt;upload_to&lt;/code&gt; 필드 옵션을 고칩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Photo(models.Model):
    image_file = models.ImageField(upload_to=&amp;#39;%Y/%m/%d&amp;#39;)
    filtered_image_file = models.ImageField(upload_to=&amp;#39;static_files/uploaded/%Y/%m/%d&amp;#39;)
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    # 후략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;upload_to=&amp;#39;static_files/uploaded/%Y/%m/%d&amp;#39;&lt;/code&gt; 부분에서 &lt;code&gt;static_files/uploaded/&lt;/code&gt;를 떼버린 것입니다. &lt;code&gt;static_files&lt;/code&gt;는 이미 &lt;code&gt;MEDIA_ROOT&lt;/code&gt;에 지정되어 있고, &lt;code&gt;uploaded&lt;/code&gt;는 업로드 파일을 구분하기 위한 경로였는데 Static file과 Media file이 정적 파일이라는 큰 범주에 속하지만 역할은 다르다는 걸 이번 강좌에서 이해했으므로 더이상 업로드 경로에 넣을 필요가 없습니다.&lt;/p&gt;

&lt;p&gt;덤으로 &lt;code&gt;created_at&lt;/code&gt;도 조금 바뀌었는데, &lt;code&gt;auto_now&lt;/code&gt; 필드 옵션을 제거 했습니다. Django 1.8판에서는 &lt;code&gt;auto_now_add&lt;/code&gt;와 &lt;code&gt;auto_now&lt;/code&gt;를 병행하지 못하도록 정책이 바뀌었거든요.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;강좌 6편을 마칩니다. 5편과 6편 사이에 5개월이 흘렀네요. 그동안 Django는 1.8판이 나왔고, Python과 Django 입문자를 대상으로 오프라인 강의도 두 차례 했으며, 저는 딸바보가 되었습니다. 딸이 첫 돌을 맞이하기 전에 이 강좌 연재를 완주하면 좋겠습니다. :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/06-fullsource/pystagram&quot;&gt;6편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;2015년 4월 기준으로 제 블로그는 실제로 이런 방식으로 운영합니다. 그다지 자주 내용물을 고치거나 새로 만들지 않기 때문에 오히려 정적으로 자원을 제공하는 것이 더 효율성 있기 때문입니다. 주 자원은 &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;라는 기능을 이용하여 제공하고, 가변하는 내용물인 댓글은 &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt;라는 서비스를 이용하여 본문에서 분리해서 운영합니다.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Django로 생성한 프로젝트를 Django 프로젝트라 하고, Django 프로젝트는 뭔가를 수행하는 기능 단위인 Django App을 모아놓은 좀 더 큰 단위입니다.&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 27 Apr 2015 04:00:49 +0900</pubDate>
        <link>http://blog.hannal.com//2015/04/start_with_django_webframework_06/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/04/start_with_django_webframework_06/</guid>
        
        <category>django</category>
        
        <category>static file</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
      <item>
        <title>예전엔 말이야</title>
        <description>&lt;p&gt;요즘,&lt;br&gt;
대화 중에 옛날에 이런 게 있었다거나 이게 10년 전에는 이러했다거나 처음 이 일을 시작한 게 20년 전이라거나 또는 내 세대 때는 이러한 일이 있었는데 라는 표현을 자주 쓴다. 그런 표현을 무심코 내뱉다가 바로 아차!하며 표현을 바꾸려 하지만 이미 나간 말이라 거둘 방법이 없다. 꼰대스러워서 쓰지 않겠다고 매번 다짐하지만 어쩐지 갈수록 더 자주 쓰고 있다.&lt;/p&gt;

&lt;p&gt;이야기 주제에 초점을 맞추면 그만이다. &lt;strong&gt;묻지도 않은&lt;/strong&gt; 지난 경험을 말하는 건 향신료로 요리에 넣지 않은 재료의 맛과 향을 흉내내는 것과 다를 바 없다. 이야기 주제에 자신없기 때문에 나오는 방어 심리이다.&lt;/p&gt;

&lt;p&gt;겸손 여부는 문제 원인이 아니다. 난 아직 겸손하고 말고 할 수준도 못 될만큼 공부하고 경험하는 단계이다. 능력을 발휘해 돈을 벌고 누군가를 가르치기도 하지만, 내가 뛰어나서 그렇다기 보다는 현재 내 능력이 필요한 이들이 있어 기여하고, 내 경험과 지식 수준이 필요한 이들이 있어서 가르칠 수 있기 때문이라고 여긴다. 세상엔 다양성이 존재하니까.&lt;/p&gt;

&lt;p&gt;고민한 끝에 몸과 마음에 여유가, 그리고 생활에 잉여가 부족하기 때문이라는 결론을 내렸다. 각 대상에 대해 많이 생각하지 못하고 경험도 부족하니, 대상의 본질에 대해 생각을 표현하지 못하고 자꾸 과거 경험치를 꺼내는 것이다.&lt;/p&gt;

&lt;p&gt;더이상 꼰대스러운 행동이나 말투, 생각이 내 안에서 일어나는 걸 용납하지 않겠다. 건강과 여유보다 중요하지 않은 일을 줄여야겠다. 잉여를 되살려 경험과 관점을 깊고 풍부하게 만드는 데 쓰겠다. &lt;/p&gt;
</description>
        <pubDate>Sun, 05 Apr 2015 08:57:49 +0900</pubDate>
        <link>http://blog.hannal.com//2015/04/kill-once_upon_a_time/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/04/kill-once_upon_a_time/</guid>
        
        <category>잉여</category>
        
        <category>꼰대스러움</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>Python 3에서 함수의 키워드 인자 강제와 주석문</title>
        <description>&lt;p&gt;Python 3에 도입된 함수 선언 문법 중 키워드 인자를 강제하는 방법과 주석문(&lt;code&gt;annotation&lt;/code&gt;)이 있다. Python의 매력 요소 중 하나가 깔끔하고 명료한 코드라 생각하는데, 이 두 문법은 기호를 남발하는 코드처럼 보여서 좀 불만스럽지만 코드 문맥(context)을 읽는 데엔 참 유익하다. 그나마 &lt;code&gt;$&lt;/code&gt; 기호가 사용되는 건 아니라서 다행이랄까?! :)&lt;/p&gt;

&lt;h3&gt;위치 인자 개수 지정&lt;/h3&gt;

&lt;p&gt;Python은 함수 매개 인자 방식으로 위치 인자(positional argument)와 키워드 인자(keywords argument)를 지원한다. 위치 인자는 함수로 전달하는 매개 인자를 순서대로 나열하는 것이고, 키워드 인자는 인자 이름과 인자에 할당할 값을 특정하는 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def args_func(arg1, arg2, arg3):
    print(arg1, arg2, arg3)

args_func(&amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;!&amp;#39;)
args_func(&amp;#39;!&amp;#39;, arg3=&amp;#39;hello&amp;#39;, arg2=&amp;#39;world&amp;#39;)
args_func(&amp;#39;world&amp;#39;, arg3=&amp;#39;!&amp;#39;, arg2=&amp;#39;hello&amp;#39;)
args_func(&amp;#39;hello&amp;#39;, &amp;#39;!&amp;#39;, arg3=&amp;#39;world&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드에서&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;args_func(&amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;!&amp;#39;)&lt;/code&gt;는 &lt;code&gt;hello world !&lt;/code&gt;를 출력하고,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args_func(&amp;#39;!&amp;#39;, arg3=&amp;#39;hello&amp;#39;, arg2=&amp;#39;world&amp;#39;)&lt;/code&gt;는 &lt;code&gt;! world hello&lt;/code&gt;를 출력한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args_func(&amp;#39;world&amp;#39;, arg3=&amp;#39;!&amp;#39;, arg2=&amp;#39;hello&amp;#39;)&lt;/code&gt;는 &lt;code&gt;world hello !&lt;/code&gt;를 출력하며,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args_func(&amp;#39;hello&amp;#39;, &amp;#39;!&amp;#39;, arg3=&amp;#39;world&amp;#39;)&lt;/code&gt;는 &lt;code&gt;hello ! world&lt;/code&gt;를&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;출력한다. 위치 인자, 키워드 인자 순서로 전달만 하면 어떤 인자를 위치 인자로 전달하고, 어떤 인자를 키워드 인자로 전달하는지에 별다른 제한은 없다.&lt;/p&gt;

&lt;p&gt;Python 3는 키워드 인자를 강제하는 문법을 지원한다. 바로 &lt;code&gt;*&lt;/code&gt; 문자를 쓰는 것이다&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def args2_func(arg1, *, arg2, arg3):
    print(arg1, arg2, arg3)

args2_func(&amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;!&amp;#39;)
args2_func(&amp;#39;!&amp;#39;, arg3=&amp;#39;hello&amp;#39;, arg2=&amp;#39;world&amp;#39;)
args2_func(&amp;#39;world&amp;#39;, arg3=&amp;#39;!&amp;#39;, arg2=&amp;#39;hello&amp;#39;)
args2_func(&amp;#39;hello&amp;#39;, &amp;#39;!&amp;#39;, arg3=&amp;#39;world&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; 이후에 나열된 매개 인자는 반드시 키워드 인자로 전달돼야 한다. 위 코드에서 &lt;code&gt;args2_func&lt;/code&gt; 함수를 실행하는 네 개 실행 줄 중 첫 번째와 네 번째는 &lt;code&gt;TypeError&lt;/code&gt; 예외가 일어난다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: args2_func() takes 1 positional argument but 3 were given
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉, &lt;code&gt;args2_func&lt;/code&gt; 함수는 위치 인자를 1개 취하는데, 이 개수보다 많은 인자가 위치 인자로 전달되었다는 뜻이다.&lt;/p&gt;

&lt;p&gt;그렇다면 &lt;code&gt;*&lt;/code&gt; 이전에 나열된 매개 인자를 키워드 인자로 값을 전달하면 어떻게 될까?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;args2_func(arg1=&amp;#39;hello&amp;#39;, arg2=&amp;#39;world&amp;#39;, arg3=&amp;#39;!&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아무 문제도 발생하지 않는다. 즉, &lt;code&gt;*&lt;/code&gt;는 위치 인자 개수를 특정하거나(exact) &lt;code&gt;*&lt;/code&gt; 앞에 나열된 인자를 위치 인자로 강제하는 것이 아니라 &lt;code&gt;*&lt;/code&gt; 이후에 나열되는 인자는 반드시 키워드 인자로 전달 받도록 강제하는 것이다. 만약 위치 인자를 단 한 개도 허용하지 않고자 한다면 다음과 같이 함수 매개 인자를 선언하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def kwargs_func(*, arg1, arg2, arg3):
    print(arg1, arg2, arg3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 함수는 모든 매개 인자를 키워드 인자로 전달해야 한다.&lt;/p&gt;

&lt;h3&gt;주석문 (annotation)&lt;/h3&gt;

&lt;p&gt;annotation 문법은 함수 매개 인자와 반환 값에 대한 주석(annotation)을 지정하는 것이다&lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def anno_func(arg1: str, arg2: &amp;#39;also str&amp;#39;, arg3: 1 is True) -&amp;gt; bool:
    print(arg1, arg2, arg3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;표현된 코드를 보면 마치 인자의 형(&lt;code&gt;type&lt;/code&gt;)을 지정하는 것 같지만, 실제로는 주석이기 때문에 인자의 형이 무엇이 되든 영향을 받지 않아서 다음과 같이 함수를 호출해도 아무 문제가 발생하지 않는다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;anno_func(1, True, &amp;#39;world&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;반환하는(return) 값의 형도 주석으로 설명한 것과 달라도 무방하다. &lt;code&gt;anno_func&lt;/code&gt;은 주석으로 반환 값을 &lt;code&gt;bool&lt;/code&gt;이라 명기했지만, 실제로는 &lt;code&gt;return&lt;/code&gt;문이 따로 없기 때문에 &lt;code&gt;None&lt;/code&gt; 값을 반환한다. 물론, 아무 문제도 없다.&lt;/p&gt;

&lt;p&gt;이렇게 지정한 주석은 함수 객체에 &lt;code&gt;__annotations__&lt;/code&gt; 속성에 담겨 있으며, 사전형(&lt;code&gt;dict&lt;/code&gt;) 객체이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;print(anno_func.__annotations__)
print(anno_func.__annotations__[&amp;#39;arg1&amp;#39;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;재밌는 점은 &lt;code&gt;__annotations__&lt;/code&gt;에는 주석으로 지정한 값(&lt;code&gt;value&lt;/code&gt;)이 그대로 할당되어 있다는 점이다. 이 점을 이용하면 함수 매개 인자를 특정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def static_args_func(arg1: str, arg2: str, arg3: int) -&amp;gt; bool:
    args = locals()
    for _k, _v in args.items():
        arg_type = static_args_func.__annotations__[_k]

        if isinstance(_v, arg_type):
            continue

        raise TypeError(
            &amp;quot;The type of &amp;#39;{}&amp;#39; does not match &amp;#39;{}&amp;#39; type&amp;quot;.format(
                _k, arg_type.__name__
            )
        )
    print(arg1, arg2, arg3)

static_args_func(1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;static_args_func&lt;/code&gt; 함수의 &lt;code&gt;arg1&lt;/code&gt;, &lt;code&gt;arg2&lt;/code&gt; 인자는 주석으로 &lt;code&gt;str&lt;/code&gt;형을 명기했다. 그래서 사전형 속성인 &lt;code&gt;__annotations__&lt;/code&gt;의 &lt;code&gt;arg1&lt;/code&gt;키에는 명기한 값인 &lt;code&gt;str&lt;/code&gt;이 할당되어 있다. &lt;code&gt;__annotations__&lt;/code&gt;에 할당되어 있는 주석 값을 이용해 &lt;code&gt;arg1&lt;/code&gt;과 같은 함수 매개 인자의 형을(&lt;code&gt;type&lt;/code&gt;) 검사한 것이 &lt;code&gt;if not isinstance(_v, arg_type):&lt;/code&gt; 부분이다.&lt;/p&gt;

&lt;p&gt;이 함수를 &lt;code&gt;static_args_func(1, 2, 3)&lt;/code&gt;와 같이 호출하면 &lt;code&gt;arg1&lt;/code&gt;과 &lt;code&gt;arg2&lt;/code&gt;에 대해 코드에서 지정한 &lt;code&gt;TypeError&lt;/code&gt; 예외가 일어난다.&lt;/p&gt;

&lt;p&gt;다음 코드는 가변 매개 인자도 형 검사를 한다. 더이상 형 검사를 하지 않는 위치부터 나머지 인자까지는 &lt;code&gt;Ellipsis&lt;/code&gt; 형(&lt;code&gt;...&lt;/code&gt;)을 썼다. 즉, 두 번째 인자까지는 형 검사를 하고, 이후 인자는 형 검사를 생략한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def type_checking_func(*args: (int, int, ...)):
    annotations = type_checking_func.__annotations__

    if (
        not isinstance(annotations, dict) or
        len(annotations) == 0
    ):
        return type_checking_func(*args)

    try:
        _check_index = annotations[&amp;#39;args&amp;#39;].index(Ellipsis)
    except ValueError:
        _check_index = len(annotations) - 1

    for i, _v in enumerate(args[:_check_index]):
        arg_type = annotations[&amp;#39;args&amp;#39;][i]

        if isinstance(_v, arg_type):
            continue

        raise TypeError(
            &amp;quot;The type of &amp;#39;{}&amp;#39; does not match &amp;#39;{}&amp;#39; type&amp;quot;.format(
                _v, arg_type.__name__
            )
        )
    print(*args)

type_checking_func(1, 2, &amp;#39;3&amp;#39;, &amp;#39;a&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인자의 형을 검사하는 기능을 장식자(&lt;code&gt;decorator&lt;/code&gt;)로 만들어서 여러 함수에 간편하게 사용하면 더 낫다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def check_argument_type(func):
    def wrapper(*args):
        annotations = func.__annotations__
        if (
            not isinstance(annotations, dict) or
            len(annotations) == 0
        ):
            return func(*args)

        try:
            check_index = annotations[&amp;#39;args&amp;#39;].index(Ellipsis)
        except ValueError:
            check_index = len(annotations[&amp;#39;args&amp;#39;]) - 1

        for _i, _v in enumerate(args[:check_index]):
            _arg_type = annotations[&amp;#39;args&amp;#39;][_i]

            if isinstance(_v, _arg_type):
                continue

            raise TypeError(
                &amp;quot;The type of &amp;#39;{}&amp;#39; does not match &amp;#39;{}&amp;#39; type&amp;quot;.format(
                    _v, _arg_type.__name__
                )
            )
        return func(*args)
    return wrapper

@check_argument_type
def hello_func(*args: (int, int, ...)):
    print(*args)

hello_func(1, 2, &amp;#39;3&amp;#39;, &amp;#39;a&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python스러운 구현인 지 아닌 지 모르겠지만, 함수 매개 인자가 어떤 자료형으로 넘어올 지 몰라서 받는 스트레스는 줄어들 것 같다. :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/hannal/12597a1466307f4290a4&quot;&gt;Python 3에서 함수의 키워드 인자 강제와 주석문 예제 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3102/&quot;&gt;PEP-3102 : Keyword-Only Arguments&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3107/&quot;&gt;PEP-3107 : Function Annotations&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 22 Mar 2015 01:50:49 +0900</pubDate>
        <link>http://blog.hannal.com//2015/03/keyword-only-arguments_and_annotations_for_python3/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/03/keyword-only-arguments_and_annotations_for_python3/</guid>
        
        <category>Python 3</category>
        
        <category>위치 인자</category>
        
        <category>positional arguments</category>
        
        <category>키워드 인자</category>
        
        <category>keyword-only arguments</category>
        
        <category>annotation</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>개발 생활 - 6</title>
        <description>&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-01/&quot;&gt;개발 생활 - 1&lt;/a&gt; : PDF 문서 생성 서버&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-02/&quot;&gt;개발 생활 - 2&lt;/a&gt; : 연산된 데이터 수집 작업자&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-03/&quot;&gt;개발 생활 - 3&lt;/a&gt; : 전자우편 알림 서버&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-04/&quot;&gt;개발 생활 - 4&lt;/a&gt; : Python과 Django 강의&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-05/&quot;&gt;개발 생활 - 5&lt;/a&gt; : 공부 자료&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-06/&quot;&gt;&lt;code&gt;개발 생활 - 6&lt;/code&gt;&lt;/a&gt; : 앞으로 계획&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;5. 앞으로 계획&lt;/h3&gt;

&lt;h4&gt;개요&lt;/h4&gt;

&lt;p&gt;지난 6~7개월 동안 학습과 실무가 겹친 개발 생활을 보냈다. 내가 뭘 할 수 있고, 하고 싶은 건 무엇인지, 재밌다고 여기는 건 무엇이며, 앞으로 뭘 할 것인지를 찾는 시간이었다.&lt;/p&gt;

&lt;p&gt;다음 단계는 현재 내가 맡고 있는 분야와 관심 갖고 있는 분야에 대한 기초와 기본부터 계발하여 제대로 이해한 기술로 구현하려 한다.&lt;/p&gt;

&lt;p&gt;프로그래밍 언어는 Python을 주력으로 사용하고, Go 비중을 높여갈 계획이다. 추후엔 주 Go를 주로 사용하고 Python을 특정 목적용으로 사용할 것으로 예상한다. &lt;a href=&quot;http://julialang.org/&quot;&gt;Julia&lt;/a&gt;, &lt;a href=&quot;http://nim-lang.org/&quot;&gt;Nim&lt;/a&gt;가 재밌어 보이고, Scala, Java, C++은 별로 끌리진 않지만 공부할 필요성을 느낀다. 하지만 현재 진행하고 있거나 계획한 공부 대상으로도 벅차서 Scala, Java, C++은 당분간 공부하진 않을 것이다.&lt;/p&gt;

&lt;p&gt;테스트 케이스, 문서화, 배포/배치 등 여러 부분을 자동화하고 있고 더 많이 자동화 할 예정이다. 맡은 프로젝트가 늘어나고 각 프로젝트 구현단이 확장되면서 개발과 운영 복잡도가 증가하다 보니 자연스레 기존 자동화 도구나 방법이 필요한 이유를 이해하여 필요로 하게 됐다.&lt;/p&gt;

&lt;h4&gt;PDF 문서 생성 서버&lt;/h4&gt;

&lt;p&gt;현재(2015년 3월 기준) PDF 문서 생성 서버를 리팩토링하고 있으며, 리팩토링 후 신규 버전을 개발할 예정이다. 신규 버전은 다음 내용을 목표로 한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;메모리 사용량 줄이기 (lazy evaluation)&lt;/li&gt;
&lt;li&gt;PDF 생성을 병렬로 처리&lt;/li&gt;
&lt;li&gt;Python 3 지원&lt;/li&gt;
&lt;li&gt;캐쉬(cache) 강화&lt;/li&gt;
&lt;li&gt;전자우편 알림 서버(&lt;code&gt;postman&lt;/code&gt;) 연동&lt;/li&gt;
&lt;li&gt;통계 기능 추가&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sentry&lt;/code&gt; 연동&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;편의점 프로젝트 (연산된 데이터 수집 작업자)&lt;/h4&gt;

&lt;p&gt;4월 이후에 리팩토링을 한 후 소소한 업그레이드를 계획하고 있다. 회사 개발 일정이나 계획에 따로 잡은 건 아니어서 짬짬히 시간 내어 해결할 범위로 구상하고 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PyPy&lt;/code&gt;로 이전&lt;/li&gt;
&lt;li&gt;통계 기능 추가&lt;/li&gt;
&lt;li&gt;Sentry 연동&lt;/li&gt;
&lt;li&gt;CEP(Complex Event Processing) 적용&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;전자우편 알림 서버&lt;/h4&gt;

&lt;p&gt;현재 새로운 알림 조건을 추가하고 있으며, 4월 이후 개인화 된 소식지(newsletter) 기능을 준비한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;전자우편 발송부를 Go 언어로 이전&lt;/li&gt;
&lt;li&gt;애플리케이션 서버들 간 통신 방법 변경&lt;/li&gt;
&lt;li&gt;알림 조건 종류 확장&lt;/li&gt;
&lt;li&gt;모바일 푸시 알림 기능 추가 (&lt;code&gt;mqtt&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;개인화 된 소식지 기능 추가 (data processing, batch)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;공부&lt;/h4&gt;

&lt;p&gt;공부할 게 많은데, 책을 기준으로 나열하면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;동시성, 병렬성

&lt;ul&gt;
&lt;li&gt;입문자를 위한 병렬 프로그래밍 (ISBN : 9791185890159)&lt;/li&gt;
&lt;li&gt;Pattern-Oriented Software Architecture, Volume 2: Patterns for Concurrent and Networked Objects (ISBN : 0471606956)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;프로그래밍

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;클린 코드&lt;/em&gt; (ISBN : 9788966260959)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;프로그램 디자인, 어떻게 할 것인가&lt;/em&gt; (ISBN : 9788991268975)&lt;/li&gt;
&lt;li&gt;Pattern-Oriented Software Architecture, Volume 1: A System of Patterns (ISBN : 9780471958697)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;시스템

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;리눅스 시스템 프로그래밍&lt;/em&gt; (ISBN : 9788968481482)&lt;/li&gt;
&lt;li&gt;컴퓨터 구조 및 설계 (ISBN : 9788996276531)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;네트워크

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;트위스티드&lt;/em&gt; (ISBN : 9788966261154)&lt;/li&gt;
&lt;li&gt;컴퓨터 네트워킹 하향식 접근 (ISBN : 9788945006585)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;언어

&lt;ul&gt;
&lt;li&gt;Programming in Go (ISBN : 9780321774637)&lt;/li&gt;
&lt;li&gt;The Go Programming Language (ISBN : 9780134190440. 2015년 8월 출간 예정)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;데이터, 통계 관련

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;파이썬을 활용한 베이지안 통계&lt;/em&gt; (ISBN : 9788968481147)&lt;/li&gt;
&lt;li&gt;파이썬 라이브러리를 활용한 데이터 분석 (ISBN : 9788968480478)&lt;/li&gt;
&lt;li&gt;Building Machine Learning Systems with Python (ISBN : 9788960775367)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;알고리즘

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;알고리즘 기초&lt;/em&gt; (ISBN : 9791156000129)&lt;/li&gt;
&lt;li&gt;문제로 풀어보는 알고리즘 (ISBN : 9788966260461)&lt;/li&gt;
&lt;li&gt;알고리즘 문제 해결 전략 (ISBN : 9788966260546)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;수학

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;수학독본&lt;/em&gt; (ISBN : 9788935640379)&lt;/li&gt;
&lt;li&gt;착한 수학 (ISBN : 9788993827866)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현재(2015년 3월 기준) 보고 있는 책은 따로 표시했으며, 이외엔 다음에 읽거나 틈틈히 부분 참고하며 읽을 책들이다.&lt;/p&gt;

&lt;h4&gt;잉여&lt;/h4&gt;

&lt;p&gt;잉여 시간이 나면 Lego mindstorm과 Arduino를 갖고 놀며, &lt;code&gt;Docker&lt;/code&gt;와 &lt;code&gt;Open stack&lt;/code&gt;을 구현 관점에서 분석할 계획이다.&lt;/p&gt;

&lt;h4&gt;집필&lt;/h4&gt;

&lt;p&gt;Python과 Django를 도구로 삼은 입문서를 준비하고 있다. 함께 논의하고 있는 편집자가 믿음직스러워서 정말 출간할 수 있겠다는 기대감이 든다. 학습하고, 개발하고, 가르치는 경험을 잘 녹여내어 올해 안에 출간하고 싶다.&lt;/p&gt;

&lt;h4&gt;개발 환경&lt;/h4&gt;

&lt;p&gt;대개는 문서를 &lt;code&gt;markdown&lt;/code&gt;으로 작성하는데, &lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-04/&quot;&gt;Python과 Django 강의&lt;/a&gt; 이후로 IPython을 사용하는 빈도가 늘고 있다. 최근엔 Python 뿐만 아니라 다른 프로그래밍 언어도 지원하는 &lt;a href=&quot;http://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt;를 사용하고 있다. 앞으로 많은 문서를 Jupyter를 이용할 생각이다.&lt;/p&gt;

&lt;p&gt;코드 편집기는 Sublime text 3를 주로 사용하며, &lt;code&gt;PyCharm&lt;/code&gt; 등 JetBrains사의 도구를 사용하려 몇 번 시도했으나 좀처럼 적응하지 못하고 있다. 마음에 드는 기능이 많은데, 미묘하게 느린 화면 반응을 견디기 힘들다. &lt;a href=&quot;http://www.sourcetreeapp.com/&quot;&gt;SourceTree&lt;/a&gt;도 답답해서 터미널에서 &lt;code&gt;git&lt;/code&gt;을 콘솔로 쓰고 있으니, 당분간 IDE에 적응하는 데 적지않은 노력을 들이거나 결국 포기할 것 같다.&lt;/p&gt;

&lt;h4&gt;마치며&lt;/h4&gt;

&lt;p&gt;전업 프로그래머가 된 이후로도 사업 개발이나 기획 업무를 맡아달라는 제안을 받고 있지만, 현재 내가 참여하는 조직들(?)에서는 전부 프로그래밍 관련 일만 하고 있다. 이 조직들 모두 내게 권한과 기회를 위임하고 지원해주는 덕분에 힘든 시기를 즐겁게 보냈다.&lt;/p&gt;

&lt;p&gt;미숙해서 문제를 푸느라 고생하는 상황에 처했을 때, 누군가에게 물어봐서 문제를 빨리 해결하고 싶은 충동을 많이 느꼈다. 이 문제 좀 풀어주세요, 라는 말이 목까지 치밀어 올라온 문제도 몇 개 있었다. 하지만, 내가 부딪힌 문제 대부분은 스스로 해결해야 의미있는 단계라는 걸 알고 있었고, 거의 모두 스스로 해결했다&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;지인이 (프로그래밍으로)개발하는 생활을 만족하느냐고 물었다. 재밌고 만족한다고 답했는데, 아직은 혼자 고민하여 스스로 문제를 해결하는 데 들이는 노력이 크지 않은 단계여서 재밌다고 여기는 것일 것이다. 여태껏 겪어 온 문제보다 더 어려운 난관에 부딪히면 그 재미는 (아마도) 줄어들 것이고, 끝내 내 능력으로 풀어내지 못해 좌절할 지도 모른다.&lt;/p&gt;

&lt;p&gt;괜찮다. 프로그래머 생활을 만족하는 이유는 난관을 극복하며 성장하는 즐거움 뿐만 아니라 내 생각을 표현하는 방법으로써 매력과 재미를 느끼기 때문이다. 가령, 요리나 춤, 노래, 대화는 취미나 관심사로 재밌을지 몰라도 직업으로 내 생각을 표현할 방법으로 삼을만큼 재밌지도 매력있게 느껴지지도 않는다.&lt;/p&gt;

&lt;p&gt;지난 6~8개월 동안 겪은 개발 생활은 즐거웠다. 더 재밌고 즐겁고 만족스러운 개발 생활을 보내기 위해 계속 노력하려 한다.&lt;/p&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-02/&quot;&gt;편의점 프로젝트&lt;/a&gt;에서 SQL Query를 짜는 문제 하나는 결국 동료가 해결해 주었다.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 17 Mar 2015 04:13:40 +0900</pubDate>
        <link>http://blog.hannal.com//2015/03/devlife-s1-06/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/03/devlife-s1-06/</guid>
        
        <category>Python</category>
        
        <category>SMTP</category>
        
        <category>Jinja2</category>
        
        <category>Celery</category>
        
        <category>Mailjet</category>
        
        <category>Sentry</category>
        
        <category>Upstart</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>개발 생활 - 5</title>
        <description>&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-01/&quot;&gt;개발 생활 - 1&lt;/a&gt; : PDF 문서 생성 서버&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-02/&quot;&gt;개발 생활 - 2&lt;/a&gt; : 연산된 데이터 수집 작업자&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-03/&quot;&gt;개발 생활 - 3&lt;/a&gt; : 전자우편 알림 서버&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-04/&quot;&gt;개발 생활 - 4&lt;/a&gt; : Python과 Django 강의&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-05/&quot;&gt;&lt;code&gt;개발 생활 - 5&lt;/code&gt;&lt;/a&gt; : 공부 자료&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-06/&quot;&gt;개발 생활 - 6&lt;/a&gt; : 앞으로 계획&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;4. 공부 자료&lt;/h3&gt;

&lt;h4&gt;개요&lt;/h4&gt;

&lt;p&gt;2014년 7월부터 2015년 2월까지 지낸 개발 생활 중 공부하거나 참고한 자료를 정리했다. 미처 따로 기록하지 못 한 자료는 기재하지 않았다.&lt;/p&gt;

&lt;p&gt;일부는 부분 참고를 했고, 일부는 여전히 공부하느라 참고하고 있다.&lt;/p&gt;

&lt;h4&gt;책&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;파이썬 완벽 가이드

&lt;ul&gt;
&lt;li&gt;ISBN : 9788966260256&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;파이썬 인 프랙티스

&lt;ul&gt;
&lt;li&gt;ISBN : 9788998139650&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;실전 파이썬 프로그래밍

&lt;ul&gt;
&lt;li&gt;ISBN : 9788966261246&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Linux System Programming

&lt;ul&gt;
&lt;li&gt;ISBN : 9788968481482&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;열혈강의 파이썬

&lt;ul&gt;
&lt;li&gt;ISBN : 9788989345770&lt;/li&gt;
&lt;li&gt;강의 준비할 때 참고&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python Network Programming

&lt;ul&gt;
&lt;li&gt;ISBN : 9781430230038&lt;/li&gt;
&lt;li&gt;웹 소켓 서버와 전자우편 알림 서버 개발에 참고&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;트위스티드

&lt;ul&gt;
&lt;li&gt;ISBN : 9788966261154&lt;/li&gt;
&lt;li&gt;비동기 처리 학습&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Programming in Python 3, 2nd Edition

&lt;ul&gt;
&lt;li&gt;ISBN : 9780321680563&lt;/li&gt;
&lt;li&gt;Python 3 준비하기 위해 부분 참고&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;웹 자료&lt;/h4&gt;

&lt;h5&gt;Python&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org&quot;&gt;Python 공식 문서&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/asyncio-task.html&quot;&gt;Tasks and coroutines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.flowdas.com/thinkpython/&quot;&gt;Think Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0008/&quot;&gt;PEP 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.eairship.kr/271&quot;&gt;금지된 엑시노아의 비공정 - 파이썬 강좌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.flowdas.com/blog/asyncio-python-tulip/&quot;&gt;asyncio - Python Tulip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@cookatrice/why-python-is-slow-looking-under-the-hood-7126baf936d7&quot;&gt;파이썬은 왜 느릴까요? 내부 원리를 살펴 봅시다.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pycon.kr/2014/program/2&quot;&gt;위대한 dict 이해하고 사용하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/doc/essays/list2str/&quot;&gt;Python Patterns - An Optimization Anecdote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openlook.org/wp/?p=801&quot;&gt;파이썬을 두루 이해하는 데 도움 되는(?) 퀴즈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dabeaz.com/generators/index.html&quot;&gt;Generator Tricks for Systems Programmers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html&quot;&gt;Python Types and Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://techspot.zzzeek.org/2015/02/15/asynchronous-python-and-databases/&quot;&gt;Asynchronous Python and Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python-guide.org/&quot;&gt;The Hitchhiker’s Guide to Python!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Python 관련 frameworks나 libraries&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Django

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com&quot;&gt;Django 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/cs-math/11-things-i-wish-i-knew-about-django-development-before-i-started-my-company-f29f6080c131&quot;&gt;11 Things I Wish I Knew About Django Development Before I Started My Company&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.looah.com/article/view/2025&quot;&gt;2014년에 Django로 개발하면서 실수한 부분&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.etianen.com/blog/2013/06/08/django-querysets/&quot;&gt;Using Django querysets effectively&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;번역 : &lt;a href=&quot;http://raccoonyy.github.io/using-django-querysets-effectively-translate/&quot;&gt;Django에서 쿼리셋 효과적으로 사용하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.michelepasin.org/blog/2010/07/20/the-power-of-djangos-q-objects/&quot;&gt;The power of django’s Q objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;gevent

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gevent.org/contents.html&quot;&gt;gevent 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sdiehl.github.io/gevent-tutorial/&quot;&gt;gevent tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pycon.kr/2014/program/3&quot;&gt;제약을 넘어 : Gevent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.pythonisito.com/2011/07/gevent-zeromq-websockets-and-flot-ftw.html&quot;&gt;Gevent, ZeroMQ, WebSockets, and Flot FTW!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.miguelgrinberg.com/post/easy-websockets-with-flask-and-gevent/page/9&quot;&gt;Easy WebSockets with Flask and Gevent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Celery

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://celery.readthedocs.org/&quot;&gt;Celery 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zapier.com/blog/async-celery-example-why-and-how/&quot;&gt;Async Celery by Example: Why and How&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://celery.readthedocs.org/en/latest/userguide/periodic-tasks.html&quot;&gt;Periodic Tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SQLAlchemy

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.sqlalchemy.org/&quot;&gt;SQLAlchemy 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pythoncentral.io/understanding-python-sqlalchemy-session/&quot;&gt;Understanding Python SQLAlchemy’s Session&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;이외

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python-requests.org/&quot;&gt;Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://siriux.net/2013/06/nginx-and-websockets/&quot;&gt;nginx and WebSockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/docs&quot;&gt;Flask 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jinja.pocoo.org/docs&quot;&gt;Jinja2 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kombu.readthedocs.org&quot;&gt;Kombu 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ipython.org/documentation.html&quot;&gt;IPython 공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nbviewer.ipython.org/github/re4lfl0w/ipython/blob/master/books/python_data_analysis/ch03_Introduction%20IPython.ipynb&quot;&gt;IPython 소개&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Go&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://go-tour-kr.appspot.com/&quot;&gt;A Tour of Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.golang-book.com/&quot;&gt;An introduction to programming in Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/golang-korea/wiki/EffectiveGo&quot;&gt;Go언어 잘 사용하는 방법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gobyexample.com/&quot;&gt;Go by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://talks.golang.org/2012/waza.slide&quot;&gt;Concurrency is not Parallelism&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Redis&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.joinc.co.kr/modules/moniwiki/wiki.php/man/12/REDIS/DataModeling&quot;&gt;REDIS 데이터 모델링 예제들&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://charsyam.wordpress.com/category/cloud/redis/&quot;&gt;CharSyam&amp;#39;s Redis posts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;이외&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codeok.net/&quot;&gt;CODEOK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sentry.readthedocs.org/&quot;&gt;Sentry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://natepinchot.com/2014/01/31/building-static-wkhtmltopdf/&quot;&gt;Building static wkhtmltopdf (and static QT)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ghebook.blogspot.kr/2010/10/permutation-combination.html&quot;&gt;순열(順列, permutation)과 조합(組合, combination)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rfc-editor.org/rfc-index.html&quot;&gt;RFC Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bespokebytes.com/start-getting-up-and-running-with-upstart/&quot;&gt;Start getting up and running with Upstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lqez.github.io/blog/fool-upstart.html&quot;&gt;Fool Upstart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 14 Mar 2015 21:13:40 +0900</pubDate>
        <link>http://blog.hannal.com//2015/03/devlife-s1-05/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/03/devlife-s1-05/</guid>
        
        <category>Python</category>
        
        <category>책</category>
        
        <category>참고자료</category>
        
        <category>Go</category>
        
        <category>비동기</category>
        
        <category>Sentry</category>
        
        <category>Django</category>
        
        <category>Redis</category>
        
        <category>gevent</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>개발 생활 - 4</title>
        <description>&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-01/&quot;&gt;개발 생활 - 1&lt;/a&gt; : PDF 문서 생성 서버&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-02/&quot;&gt;개발 생활 - 2&lt;/a&gt; : 연산된 데이터 수집 작업자&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-03/&quot;&gt;개발 생활 - 3&lt;/a&gt; : 전자우편 알림 서버&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-04/&quot;&gt;&lt;code&gt;개발 생활 - 4&lt;/code&gt;&lt;/a&gt; : Python과 Django 강의&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-05/&quot;&gt;개발 생활 - 5&lt;/a&gt; : 공부 자료&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-06/&quot;&gt;개발 생활 - 6&lt;/a&gt; : 앞으로 계획&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;3. Python과 Django 강의&lt;/h3&gt;

&lt;h4&gt;개요&lt;/h4&gt;

&lt;p&gt;2014년 12월 4일부터 2015년 1월 31일까지 &lt;a href=&quot;http://www.fastcampus.co.kr&quot;&gt;패스트캠퍼스&lt;/a&gt;에서 Python과 Django를 이용해 &lt;a href=&quot;http://www.fastcampus.co.kr/camp_wpa/&quot;&gt;웹서비스를 개발하는 커리큘럼으로 강의&lt;/a&gt;를 했다. 나는 이론 부분을, 함께 강의한 고빈섭님은 실습 부분을 담당했고, 김구영님은 조교로 강의를 도와주셨다.&lt;/p&gt;

&lt;p&gt;패스트캠퍼스에는 &lt;a href=&quot;http://www.fastcampus.co.kr/camp_wpb/&quot;&gt;웹 프로그래밍 입문&lt;/a&gt; 과정이 있는데, 내가 강의를 맡은 &lt;code&gt;웹 서비스 개발&lt;/code&gt; 과정은 입문 과정의 후속 과정이다. 그래서 초기 교육 과정 이름은 가칭 웹 프로그래밍 중급이었다가 실전 웹 서비스 개발에 초점을 맞추어 교육 과정 이름이 웹 서비스 개발로 바뀌었다.&lt;/p&gt;

&lt;p&gt;패스트캠퍼스에서 내게 제안한 중급 과정 강의를 수락한 동기는 집필이었다. 내가 프로그래머로 전업을 결심하기 전에 한 출판사로부터 집필 제안을 받아서, 몇 몇 개발자에게 의견을 구하고 Django 입문 강좌의 후속 강좌인 &lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크&lt;/a&gt; 강좌 연재를 시작하면서 집필을 준비하고 있었다. 하지만 목차를 구상하는 게 쉽지 않아 좀처럼 진도를 나가지 못하고 있던 차에 패스트캠퍼스로부터 제안을 받은 것이다.&lt;/p&gt;

&lt;h4&gt;교육 재료, 환경&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;프로그래밍 재료 : Python 2.7, Django 1.7&lt;/li&gt;
&lt;li&gt;교재 재료 : 수강생 교재는 IPython으로 작성, 강사 발표는 Apple Keynote로 작성&lt;/li&gt;
&lt;li&gt;소통 공간 : 페이스북 비공개 그룹&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;강의 준비 과정&lt;/h4&gt;

&lt;p&gt;교육 과정이 시작되기 전에 나부터 교육할 필요가 있었다. 경험이나 직관으로 알던 것에서 그치지 않고, 제대로 설명하여 정확히 이해시켜야 하기 때문이다. 더구나 나는 입문 과정을 강의하는 게 아니기 때문에 명확하게  이해시키는 걸 넘어 더 깊은 내용을 설명할 줄 알아야 했다.&lt;/p&gt;

&lt;p&gt;곧바로 여러 Python 책과 공식 문서로 공부했다. 한창 &lt;a href=&quot;http://blog.hannal.com/2015/02/devlife-s1-02/&quot;&gt;편의점 프로젝트&lt;/a&gt;를 진행하던 시기였기 때문에 내 서재 책상엔 개발 관련 책 대여섯 권이 늘 펼쳐져 있었고, 웹브라우저엔 관련 자료에 대한 탭이 스무 개 이상 열려 있었다. 한 달 동안 책 다섯 권을 정독하고, 모든 예제를 실습하였다.&lt;/p&gt;

&lt;p&gt;그 다음 공부 주제는 Django로 잡았다. 내가 Django를 얼마만큼 제대로 알고 있는 지 파악해야 해서 Django를 이용해 인스타그램 같은 웹 서비스를 서로 다른 구현 방법과 구조로 세 번 만들었다. 그 중 한 버전은 블로그에 연재 중인 강좌에 사용하고&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, 다른 한 버전은 강의 실습용으로 정했다. 그러고나서 Django 공식 문서를 보며 하나 하나 뜯어보고 다듬었는데, 각 기능마다 다른 사람이 구현한 방법을 웹에서 찾아다녔고, 구현 방법이 다른 경우 Django 소스를 열어서 Django의 작동 방식이나 의도를 분석했다. 이 과정에 약 4주가 걸렸고, Django 소스 코드 중 많은 부분에 대해 리뷰 아닌 리뷰를 두 차례 했다.&lt;/p&gt;

&lt;p&gt;마지막으로 Django 릴리즈 노트와 &lt;a href=&quot;https://github.com/django/django/commits/master&quot;&gt;Django의 master 브랜치&lt;/a&gt;에 쌓인 commit들을 훑으며 주목할만한 변화를 찾아 보았다. Django 1.0 이후로 Django를 사용하지 않아서 주요 변동 이력을 알지 못했기 때문이다.&lt;/p&gt;

&lt;p&gt;학습을 일단락하고 강의를 준비했다. 나는 markdown 문서 형식을 애용하지만, &lt;a href=&quot;http://ipython.org/&quot;&gt;IPython&lt;/a&gt;으로 교재를 만들어 보기로 했다. IPython은 2014년 초에 회사 개발 프로젝트에 도입하면서&lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 처음 접했는데, 상상력을 일으키는 재밌는 도구라 여겨왔다. 프로젝터에 띄울 강의 자료도 IPython으로 작성하려 했지만, 가독성이 좋지 않아 Apple Keynote로 작성하기로 했다.&lt;/p&gt;

&lt;h4&gt;강의 과정&lt;/h4&gt;

&lt;p&gt;첫 수업에서 나는 무척 당황했다. 여러 수강자가 예상보다 내 강의를 어려워했기 때문이다. 입문 단계는 뗀 사람을 대상으로 하는 커리큘럼이니 입문서나 자료에 나오는 내용에서 그치지 않고 좀 더 이론 부분을 다뤘는데, 일부 수강자를 보니 무척 혼란스러워 하는 표정이었다. 가령, Python에서 모든 데이터는 객체라는 내용을 설명할 때, &lt;strong&gt;Python에서 객체가 무엇인지&lt;/strong&gt; 설명했다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;모든 데이터는 객체(object)

&lt;ul&gt;
&lt;li&gt;객체 구조 : 신원(identity), 타입(type, class), 값(value)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;number = 1&lt;/code&gt;에서 &lt;code&gt;number&lt;/code&gt;는 신원, &lt;code&gt;1&lt;/code&gt;은 값, 이 값이 할당된(assigned) 객체의 타입은 &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;모든 객체의 조상은 &lt;code&gt;object&lt;/code&gt;이며, &lt;code&gt;type&lt;/code&gt;은 모든 타입의 조상. &lt;code&gt;object&lt;/code&gt;는 &lt;code&gt;type&lt;/code&gt;의 인스턴스이며, &lt;code&gt;type&lt;/code&gt;은 &lt;code&gt;object&lt;/code&gt;의 하위 클래스. &lt;code&gt;type&lt;/code&gt;은 자기 자신에 대한 &lt;code&gt;type&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;동적 형(type) 변환 : 객체의 타입이 변하는 게 아니라 객체의 신원이 가리키는(reference) 대상(값)이 바뀌는 것.&lt;/li&gt;
&lt;li&gt;변수, 즉 신원 자체는 객체나 값이 아니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del&lt;/code&gt;문은 객체를 지우는 것이 아니라 객체 참고 관계를 끊는 것.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 == True&lt;/code&gt;와 &lt;code&gt;1 is True&lt;/code&gt;의 차이

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;의 값은 &lt;code&gt;1&lt;/code&gt;이고, &lt;code&gt;False&lt;/code&gt;의 값은 &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;값 비교는 &lt;code&gt;==&lt;/code&gt; 연산자로, 신원 비교는 &lt;code&gt;is&lt;/code&gt; 연산자로 평가.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하지만, 일부 수강자가 “객체”라는 것 자체를 생소해 하거나 잘 모르는 상황이었다. 그들 입장에선 내가 어렵게 강의를 준비하고 설명한 것이었고, 결국 미리 준비한 강의 자료와 교재를 전면 수정해야 했다.&lt;/p&gt;

&lt;p&gt;커리큘럼은 이론 부분과 실습 부분으로 구성했고, 나는 이론을 담당했다. 그러다보니 실습할 내용에 대해 이론 부분을 여러 방면으로 준비했다.&lt;/p&gt;

&lt;p&gt;가령, Django의 모델 필드형 중 &lt;code&gt;TextField&lt;/code&gt;를 Django 공식 문서에서는 큰(large) 텍스트를 담는 필드라고 설명하는데, 나는 SQLite 3는 &lt;code&gt;text&lt;/code&gt;형으로 약 1기가 바이트, PostgreSQL은 길이 제한이 없는 &lt;code&gt;text&lt;/code&gt;, MySQL은 &lt;code&gt;longtext&lt;/code&gt;형으로 약 4기가 바이트, Oracle은 8~12테라 바이트를 담는 &lt;code&gt;NCLOB&lt;/code&gt;형이라고 설명하는 것이다. 수강자가 얼마나 긴 문자열을 담느냐는 질문을 하는데 &lt;code&gt;CharField&lt;/code&gt;보다 긴, 게시판의 글 본문에 쓸만큼 긴 문자열이라고 대답하고 싶진 않았다.&lt;/p&gt;

&lt;p&gt;또는, 흥미롭게 구현된 Django 기능이 있는 경우, 그 기능이 작성된 Django 소스를 직접 설명하기도 했다. 예를 들어, Django의 &lt;code&gt;settings&lt;/code&gt;는 수강자들이 재밌다고 느낄만한 Python 기법이 잘 녹아있는 모듈이라서 가볍게 훑고 지나가지 않고 동작하는 방식에 대해 설명했다. Django 자체보다는 Python 기법에 대한 내용이다보니 다른 Django 자료에서는 잘 다루지 않는 내용이고, 내 강의를 듣기 때문에 접하는 내용이었다. 가능하면 이런 내용을 다루려 했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/03/django_conf_settings.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;수업은 4회차부터 강의 목표와 계획을 완전히 수정했다. 수강자들이 수업 당시에는 수업 내용을 완전히 이해하지 못하더라도 교재를 보며 복습하여 언젠가는 이해하는 것으로 목표를 바꿨다. 일명 “교재라도 남기자”. 그래서 교재도 최대한 서술형으로 풀어서 문장을 작성했다. 마치 내가 교재를 강의 원고로 삼아 그대로 읽는 것처럼 작성했고, 발표용 슬라이드는 목차처럼 활용하도록 작성했다. 그러다보니 매 수업에 사용하는 교재는 100여 장을 넘기곤 했다. 한 수강자는 우스개소리로 100만원이 넘는 Python + Django 책이라고 말하기도 했다.&lt;/p&gt;

&lt;p&gt;서술형 교재는 IPython으로 작성했다. 의도와 목표는 교재를 IPython으로 열어서 코드를 교재 안에서 직접 실행(run)하고 실습하는 상호작용 교재로 활용하도록 하는 것이었지만, 의도대로 활용되는 것 같진 않았다. 그래서 소스 문법 강조가(highlighting) 잘 된 문서로라도 활용하였고, 실제로 교재도 IPython 파일을 HTML 파일로 내보낸(export) 문서도 함께 배포하였다.&lt;/p&gt;

&lt;p&gt;실습을 본격 시작한 수업부터는 매 수업에 진행한 전체 소스 코드도 배포하였다. 그러니까, 4회 수업까지 진행한 소스 코드, 5회 수업까지 진행한 소스 코드를 구분하여 매 수업 때 마다 배포한 것이다. 처음엔 &lt;code&gt;git&lt;/code&gt;으로 관리하여 각 수업에 진행한 소스 이력에 tag를 달아서 접근하도록 하려 했다. 하지만, 이 교육 과정으로 입문한 것이나 마찬가지인 수강자는 새로운 개념이 등장할 때마다 힘들어해서 git을 수업에 도입하진 않았다.&lt;/p&gt;

&lt;p&gt;이렇게 교재를 만들어 배포하다보니 일단 수업엔 참여해서 최대한 듣고 따라오고, 수업 이후엔 내가 작성한 소스 코드를 기반으로 실습하거나 복습하고, 설명은 교재를 읽는 사례가 나타났다. 수강자 나름대로 적응하고 수업과 교재를 활용하는 것이다.&lt;/p&gt;

&lt;p&gt;점차 강의에 익숙해지다보니 분량 조절이 맞아서 수업 시간 운용도 안정되었다. 교재를 만드는 건 여전히 힘들었지만, 강의 진행은 한결 편안해졌다. 수강자 개개인을 알아가면서 강의와 교재에 예제나 보충 설명을 반영하기도 했다. 글로 강좌를 연재하는 것과는 다른 매력이었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;을 적용하고, &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;에 개발한 프로젝트를 배치(deployment)하는 것으로 전체 강의를 마쳤다. Heroku 무료판은 무척 느린데다 국내에서 사용 사례가 많지 않아서 Heroku에 서비스를 배치하는 것에 주제를 맞추지 않고, 프로젝트를 배치하고 배포하는 과정을 이해하는 데 맞추었다. 즉, Heroku가 자동으로 처리해주는 부분은 무엇이고, Amazon Web Service 등을 이용할 경우 어느 부분까지 사람이 해야 하며, 어떻게 하는 것이 좋은 지 설명하였다.&lt;/p&gt;

&lt;h4&gt;우여곡절&lt;/h4&gt;

&lt;p&gt;초반 3주는 무척 힘든 시간을 보냈다. 강의 자료와 교재를 전면 재작성 하다보니 매주 시간에 쫓겼고, 회사 업무도 마감에 임박한 상황이라 정신 없는 나날이었다. 무엇보다도 내가 과의욕 상태이다보니 난이도나 분량을 조절하지 못하여 스트레스를 자초한 탓이 가장 컸다.&lt;/p&gt;

&lt;p&gt;개인 사정으로 수업을 목요일과 토요일로 잡은 것도 좋지 않았다. 수업 간격이 좁다보니 수강자는 복습할 시간 여력이 없었고, 매 수업마다 100여 장이 넘는 교재를 작성하는 나 역시 수업 자료를 만들 시간이 부족했다. 특히 초반 2주는 주말에도 내 수업이 잡혀있다 보니 밤샘하기 일쑤였다.&lt;/p&gt;

&lt;p&gt;실습 환경을 맞추어 예외 상황을 피하려는 목적으로 VirtualBox에 Ubuntu를 가상으로 설치한 건 득보다는 실이 컸다. 대다수가 VirtualBox에 Ubuntu를 설치하는 것에서부터 난관에 부딪혔고, 너무 느리게 동작하여 답답했다. 또, 시간이 부족하여 Linux 사용법에 대해서는 전혀 다루지 않다보니 디렉터리 이동과 같은 쉘 사용 기초를 어려워하는 수강자도 있었다. 그에 반해 한 수강자는 끝까지 Windows에서 개발과 실습을 했는데, 자잘한 문제에 부딪혔지만 그래도 실습 전 과정을 무사히 치러내 다행스러우면서도 다소 허무하기도 했다. 난 Debian 계열 Linux를 좋아하지만, 실제로는 개발은 Mac OS X에서 하고 실 서비스는 Redhat 계열 Linux에서 하다보니 나 조차도 강의 진행에 시행착오를 겪기도 했다.&lt;/p&gt;

&lt;p&gt;강의에 대해서도 고민이 많았다. 나는 &lt;a href=&quot;http://www.slideshare.net/yongho&quot;&gt;하용호&lt;/a&gt;님의 발표나 강의를 좋아하여 그의 강의 방식을 분석하고 좇으려 했지만, 교재 작성하는 데 시간에 쫓겨서 흉내조차 내지 못 했다. “교재라도 남기자”로 강의 계획을 변경한 요인엔 내 강의 운영이 부족한 탓도 있다.&lt;/p&gt;

&lt;p&gt;수강자들마다 프로그래밍 소양이나 수준이 상당히 다르다보니 수강자가 할 만한 질문이나 겪을만한 오류 상황을 최대한 폭넓게 예측하고 준비하는 것도 힘들었다. 그런 강의 준비 과정에서 &lt;a href=&quot;https://github.com/django/django/compare/master...hannal:ticket_24181&quot;&gt;number format의 구분자 문자열이 뒤집히는 Django의 버그&lt;/a&gt;를 발견해 Django 프로젝트에 소스를 제출하는 즐거운 경험을 했지만&lt;sup id=&quot;fnref3&quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, 강의 준비 자체는 무척 고되었다. 실제로 준비한 강의 자료 대부분은 수업 시간이 부족하기도 하고 수강자가 질문하지 않아서 활용되지 못하였다.&lt;/p&gt;

&lt;h4&gt;정리&lt;/h4&gt;

&lt;p&gt;초반 혼란기를 극복한 60% 수강자는 마지막 수업까지 남아 함께 했다. VirtualBox에 Ubuntu Linux를 설치하면서 Linux를 제대로 접한 한 수강자는 아예 자신의 랩탑에 Linux를 설치하여 다루었고, 굉장히 사소한 오타나 실수로 Python 인터프리터 오류를 일으켜 어쩔 줄 몰라하던 수강자는 내가 힌트를 주는 것만으로도 문제 원인을 파악해 스스로 해결할만큼 성장했다. 놀랍고 기뻤다.&lt;/p&gt;

&lt;p&gt;잔존율 50%를 목표로 두었는데 예상보다 높은 잔존율을 달성한 점도, 질문 수준이 나날이 높아진 점도 보람찼다. 질문과 답변이 왕성하게 오간 교육 과정이라는 패스트캠퍼스측 피드백도 기분 좋았다. 누군가 성장하는 데 기여하는 건 정말 뿌듯하다. 그리고, 다른 이가 성장하도록 돕는 과정에서 나 역시 성장하는 것도 좋은 경험이다.&lt;/p&gt;

&lt;p&gt;곧 &lt;a href=&quot;http://www.fastcampus.co.kr/camp_wpa/&quot;&gt;웹 서비스 개발 2기&lt;/a&gt;를 시작한다. 1기 때 구축한 수업 자료도 있고 내 강의량을 좀 줄였기에 1기 때에 비해 좀 더 수월하길 바라본다.&lt;/p&gt;

&lt;p&gt;아참, 애초 강의의 목적이었던 집필에 대해 조금 언급하자면, 목차 작업을 얼추 마쳐가고 있다. :)&lt;/p&gt;

&lt;hr&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;이 말은 연재 중인 강좌에 필요한 기반 마련은 진작 끝냈다는 뜻이다. 단지 너무 바빠서 강좌 글 자체를 작성하지 못하고 있다.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;당시 우리 회사 CTO이자 공동창업자인 Spike^ekipS님이 도입했는데, IPython을 비롯해 내가 접한 개발 도구나 라이브러리, 기술 상당 수는 그가 알려준 것이며, 코드도 그에게서 영향을 받았다. 개발자로서 내게 영향을 준 사람은 두 명(Spike^ekipS, cpascal)인데, 두 사람 모두 뛰어난 해커이다.&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;Django 1.8판에 반영되었다.&amp;nbsp;&lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 09 Mar 2015 04:33:40 +0900</pubDate>
        <link>http://blog.hannal.com//2015/03/devlife-s1-04/</link>
        <guid isPermaLink="true">http://blog.hannal.com//2015/03/devlife-s1-04/</guid>
        
        <category>Python</category>
        
        <category>SMTP</category>
        
        <category>Jinja2</category>
        
        <category>Celery</category>
        
        <category>Mailjet</category>
        
        <category>Sentry</category>
        
        <category>Upstart</category>
        
        
        <category>devlife</category>
        
      </item>
    
  </channel>
</rss>
