<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kay on the rails</title>
    <description>Kay as known as Hannal walks on the rails
</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 28 Nov 2016 02:47:21 +0900</pubDate>
    <lastBuildDate>Mon, 28 Nov 2016 02:47:21 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>시트로엥 C4 칵투스 한 달 소감.</title>
        <description>&lt;p&gt;올해 한국에 출시한 시트로엥 C4 칵투스를 샀다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;운행 기간 : 두 달&lt;/li&gt;
  &lt;li&gt;운행 거리 : 약 1,600km&lt;/li&gt;
  &lt;li&gt;평균 연비 : 리터 당 18~19km&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;총평&quot;&gt;총평&lt;/h3&gt;

&lt;p&gt;재밌는 차다. 개성이 강해서 호불호가 극명하게 갈릴 것 같다. 난 선호에 가깝다. 점수를 매기자면 5점 만점에 4점. 30대 3~4인 가정에 추천한다.&lt;/p&gt;

&lt;h3 id=&quot;특성&quot;&gt;특성&lt;/h3&gt;

&lt;h4 id=&quot;1-연비&quot;&gt;1. 연비&lt;/h4&gt;

&lt;p&gt;도심 내 평속 40~60km 정도일 때 연비는 리터 당 17~18km정도로 측정된다. 고속도로 타서 평속 80~90km로 달리면 연비는 22~25km까지 찍는다. 2016년 11월 기준으로 서울 시내 버스 요금이 기본 요금 1,200원에 10km 초과 시 5km 마다 100원씩 가산되고 경유가 리터 당 대략 1,200~1,300원이니까 연비만 놓고 보면 버스 요금보다 저렴하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2016/11/c4-cactus-fuel-efficient.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;연비 효율을 높이려는 노력이 곳곳에서 보인다. 먼저 차가 멈추면 엔진을 껐다가 출발할 때 다시 켜는 기능을 들 수 있다. 차량 동작을 완전히 끈 게 아니라 엔진만 끄고, 제동 페달에 발을 떼는 순간 빠르게 다시 시동을 건다. 반응성이 좋아서 불편하진 않다. 하루에 두세 시간 정도 운전하면 에코 유지 시간이 몇 십 분 정도 된다. 몇 십 분 주행을 안 한 셈이니 꽤 연류를 아낀 것이다.&lt;/p&gt;

&lt;h4 id=&quot;2-디자인&quot;&gt;2. 디자인&lt;/h4&gt;

&lt;p&gt;눈에 띄는 디자인이다. 선이 또렷하고 야무지게 생겼다. 특히 얼굴이 재밌게 생겨서 사람들이 흘깃 눈길 한 번씩은 보낸다. (｀^´) 이렇게 생겼달까?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2016/11/c4-cactus-front.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자동차 외관에 플라스틱류 소재가 이렇게 많이 사용된 건 처음 본다. 그 유명한(?) 옆면 에어범퍼도 그렇고, 차 전면부나 후면부 곳곳에도 다소 말랑한 플라스틱 소재가 붙어 있다. 좋고 나쁘고를 떠나서 특이하긴 하다. 색깔도 다양하고 강렬한데, 외형이 워낙 특이해서 난 무난하게 흰색을 골랐다. 흰색이 예쁘다.&lt;/p&gt;

&lt;p&gt;내부 인테리어도 아늑하고 귀여운 편이다.&lt;/p&gt;

&lt;h4 id=&quot;3-공간-크기&quot;&gt;3. 공간, 크기&lt;/h4&gt;

&lt;p&gt;차체는 작은 편이다. 키나 덩치가 큰 사람에겐 다소 좁게 느껴질 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2016/11/c4-cactus-size.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그런데 안쪽 공간은 생각보다 여유롭다. 넓다기 보다는 여유감이 있어 답답하지 않다는 뜻이다. 앞좌석은 자잘한 조작 장치를 버튼식으로 바꾸고 대시보드 디스플레이에 몰아 넣어서 변속 레버 부근 공간이 여유롭다. 보조석은 에어백을 상단으로 옮기고, 앞쪽 가방식 수납 공간에 소지품을 넣을 수 있다.&lt;/p&gt;

&lt;p&gt;뒷좌석은 다소 좁게 느껴질 여지가 있는데, 자잘한 장치를 쳐내서 공간이 깔끔하고(휑하고) 전방과 상향 시야가 탁 트여서 심리상 편안함을 준다. 하지만 키가 큰 사람이 앉기엔 좁은 건 어쩔 수 없다. 뒷좌석엔 유아 카시트를 isofix 방식으로 장착하는 고리가 두 개 있으며, 고리 구멍이 표시되어 있어 연결하기 쉽다. 카시트 두 개 놓으면 뒷좌석은 사실상 공간이 남지 않는다.&lt;/p&gt;

&lt;p&gt;트렁크는 생활 물품을 담고 다니기 괜찮은 정도이며 넓은 편은 아니다. 나는 유모차, 자동차 용품, 꼬맹이 식판 정도를 넣고 다니며, 장 본 물품을 상자 하나에 담아서 트렁크에 담을 정도는 된다. 유모차를 넣고 다니기엔 괜찮지만, 유모차를 싣고 장을 많이 본 날엔 좁다.&lt;/p&gt;

&lt;p&gt;뒷좌석 창문은 바깥쪽으로 살짝 열린다. 싫어하는 사람이 꽤 있을 것 같은데, 난 오히려 마음에 든다. 뒷좌석엔 유아 카시트 장착하고 꼬맹이를 앉히기 때문에 아예 꼬맹이가 활짝 열지 못하는 게 마음 편하다. 아이가 타지 않을 때에는 대부분 나 혼자 차를 타거나 동승자 한 명이 보조석에 앉기 때문에 뒷좌석 창문 열 일이 없다. 뒷좌석 창문이 아래로 열리지 않아서 뒷좌석 문짝 안쪽의 수납 공간이 넓다. 어느 정도로 넓냐면 하루 외출하는 데 쓸 아이 기저귀, 소형 우유팩, 간식통을 담을 수 있다. 아이가 용변을 봐서 돌돌 만 기저귀 서너 개는 넉넉히 들어간다.&lt;/p&gt;

&lt;h4 id=&quot;4-에어범퍼&quot;&gt;4. 에어범퍼&lt;/h4&gt;

&lt;p&gt;예쁜 외관에 눈에 띄게 전혀 다른 재질로 된 에어범퍼가 차 옆면에 꽤 넓게 자리잡고 있다. 내 차는 흰색이고 에어범퍼는 검정색인데, 흰색 몸체는 유광이고 에어범퍼는 무광이라 더 이질감이 크다. 딱 문콕 당할 위치에 에어범퍼가 있어서 문콕 스트레스가 거의 사라진다. 실제로 문콕을 몇 번 당한 것 같은데, 에어범퍼와 바퀴 부근 플라스틱류 소재에 찍힌 자국이 생겼더라. 차체 철판 면은 깨끗하고.&lt;/p&gt;

&lt;p&gt;차 옆면이 어딘가에 닿을 때 가장 먼저 에어범퍼가 닿아서 차체 흠집에 대응할 여지가 있다. 좁은 공간을 우회전하며 들어가다 차 오른쪽 부위가 입구 기둥에 닿는 사고(?)가 발생한 적이 있다. 차체가 뭔가에 닿는 느낌이 들자마자 더 진입하지 않고 후진해서 차를 뺐는데, 에어범퍼가 닿아서 차체엔 아무런 흠집이 생기지 않았다. 에어범퍼가 없었다면 흠집이 생겼거나 최악의 경우 찌그러졌을 것이다.&lt;/p&gt;

&lt;h4 id=&quot;5-편의-기능&quot;&gt;5. 편의 기능&lt;/h4&gt;

&lt;p&gt;크루즈 기능을 처음 써봤는데 설명으로 들었을 때보다 편했다. 일정 속도로 꾸준히 달리는 장거리 이동 중에 무척 유용했지만, 피곤한 운전 상황은 도심 운전인데 도심 안에서는 쓸모가 없어서 아쉬웠다. 크루즈 기능을 쓰면서 자동운전 기능을 더 기대하게 됐다. 다음 차는 자동운전 기능이 있는 걸로 사야겠다.&lt;/p&gt;

&lt;p&gt;주유구는 차 열쇠로 열어야 한다. 실내에서 원격으로 열지 못한다. 이건 호불호가 갈리지 않을 것 같다. 매우 불편하다. 열쇠를 빼서 주유원에게 주면 시동이 꺼졌으므로 창문을 닫지 못한다. 그래서 직접 주유하는 셀프 주유소를 이용하는 편인데, 그래도 싫다.&lt;/p&gt;

&lt;p&gt;하드웨어 조작 장치가 몇 개 없다. 대부분 대시보드에 터치 방식으로 옮겨 넣었다. 그래서 공간이 여유로운데, 날씨가 추워지면 터치를 제대로 인식 못하는 경우가 있다. 운전 중엔 가능한 다른 조작을 해서는 안 되긴 하지만 그래도 운전 중에 냉난방을 조절하는 등 뭔가를 조작하는 경우가 왕왕 있는데, 화면 터치로 해야해서 불편한 경우가 생기곤 한다.&lt;/p&gt;

&lt;p&gt;변속 관련 하드웨어 조작 장치도 마찬가지여서 변속 막대가 아예 없다. 대신 운전(D), 후진(R), 정차(N)이 큼직한 버튼 세 개로 존재한다. 발렛 파킹하는 사람들이 당황하곤 한다.&lt;/p&gt;

&lt;p&gt;벤치식 좌석과 패브릭 시트가 꽤 편안하다. 몸이 푹 잠기는 편안함은 아니고 어디 배기는 부위 없이 안정된 편안함이다.&lt;/p&gt;

&lt;p&gt;창문을 세척할 때 분무액은 와이퍼에서 직접 분사하는 방식인데, 세척액이 시야를 가리는 시간이 매우 짧다. 처음엔 세척액이 제대로 분무되지 않은 줄 알 정도이다.&lt;/p&gt;

&lt;p&gt;Apple Carplay 기능이나 Android Auto 기능을 지원하지 않는다. 아쉽다.&lt;/p&gt;

&lt;h4 id=&quot;6-주행&quot;&gt;6. 주행&lt;/h4&gt;

&lt;p&gt;내가 좋아하는 소리를 내진 않는다. 난 조용하고 얌전한 차를 좋아하며, 다소 묵직한 운전감을 선호한다. 이 차는 가볍다. 차체가 가벼운 편이기도 하지만, 엔진 소리나 운전감이 좋게 말하면 경쾌하고 나쁘게 말하면 가볍다. 차가 가볍다보니 고속 주행 시 바닥에서 올라오는 진동과 소리가 크다. 더욱이 정차 시 에코 상태로 전환되어 엔진이 꺼져서 아주 조용한 상황을 경험하게 되기 때문에 더 비교된다.&lt;/p&gt;

&lt;p&gt;완전 자동 변속 장치가 아니고, 수동 변속을 기반으로 자동 변속을 해주는 변속 방식이다. 연비는 좋은데, 변속될 때 차가 꿀렁거리는 수동 변속의 단점을 안고 있다. 잘 운전하면(?) 꿀렁거림을 줄일 수 있지만, 변속 중 꿀렁거리는 상황을 피하기 힘든 경우도 있다. 1단으로 오르막길 오르는데 RPM이 상승해서 2단으로 바뀌면 순간 꿀렁, 그런데 힘이 부쳐서 다시 1단으로 바뀌면 또 꿀렁. 고속도로에서 6단으로 달리던 중 추월하려고 가속 페달을 밟으면 RPM이 부족해서 5단으로 변속되어 꿀렁, 근데 평지라서 RPM이 진정되면 다시 6단으로 바뀌어서 또 꿀렁. 수동 변속 차량을 오래 운전해서 수동 변속을 좋아하는데도 이 멍청한 변속 패턴은 짜증나곤 한다.&lt;/p&gt;

&lt;p&gt;보기보다 힘이 괜찮다. 수동 변속 특유의 RPM 장난질로 튀어나가는 힘도 제법이고, 시속 130km까지는 뻗어나가는 힘도 괜찮다. 근데 고속 주행에 적합한 차는 아니긴 하다.&lt;/p&gt;

&lt;p&gt;방향 전환과 제동하는 느낌도 묵직해서 밀리지 않아 안전감 있다. 급곡선을 돌 때는 차 중안 부근이, 급제동을 걸 때는 차 엉덩이 부근이 땅으로 꾹 눌리는 느낌이 든달까? 주행감은 상당히 가벼워서 과속 방지턱도 퉁퉁 튀듯 넘는 기분이 드는데, 방향 전환과 제동은 묵직해서 비교되어 재밌다. 상대적으로 묵직한 게 아니라 정말 묵직하다. 새 차라 그런가? 마음에 든다.&lt;/p&gt;

&lt;p&gt;사람은 자신의 몸이 움직이는 공간을 인지하고 있다. 부딪히지 않고 좁은 틈을 지나갈 수 있는지, 줄넘기를 하는 저 사람과 어느 정도 떨어져야 안전한지 무의식 중에 파악한다. 운전석에 앉으면 자신의 몸을 기준으로 인식된 개인 공간이 차체만큼 확장된다. 마치 차체가 내 몸이 된 것처럼. 이 인지와 실제 차체와 동기화되는 비율이 높을수록 마음이 편하고 안정되는데, 동기화 수준을 떨어뜨리는 요소가 몇 가지 있다. 운전석 기준으로 사각, 후사경에서 인식되는 차 뒷쪽 공간과 실제 차 엉덩이 위치의 위치 차이, 운전석에서 보이는 후드(보닛) 거리와 실제 후드 길이 차이 등이다. 이 차는 내 체형에 잘 맞아서 시야가 좋다. 차체가 SUV에 비해선 낮고, 세단보다는 아주 조금 더 높아서 운전석 높이가 적당하다. 그리고 사각(죽은 시야각)이 거의 없다.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Nov 2016 02:00:00 +0900</pubDate>
        <link>http://localhost:4000//2016/11/citroen-c4-cactus/</link>
        <guid isPermaLink="true">http://localhost:4000//2016/11/citroen-c4-cactus/</guid>
        
        <category>citroen</category>
        
        <category>시트로엥</category>
        
        <category>칵투스</category>
        
        <category>cactus</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>책, Flask 기반의 파이썬 웹 프로그래밍 소감</title>
        <description>&lt;p&gt;Flask 입문서가 국내 집필서로 나왔다. &lt;a href=&quot;http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=83637353&quot;&gt;Flask 기반의 파이썬 웹 프로그래밍&lt;/a&gt;인데 국내 집필서로는 처음으로 보인다.&lt;/p&gt;

&lt;p&gt;Flask는 경량 웹 프레임웍이다. 경량이라지만 꼭 필요한 건 갖춰져 있어서 바퀴 재발명하는 재미(?)를 만끽하기에도 좋고, 유연해서 확장하기도 좋다. 나도 애용하는데, 한 가지 아쉬운 점이 있고 한 가지 궁금한 점이 있다.&lt;/p&gt;

&lt;p&gt;아쉬운 점은 공식 문서가 불친절하다는 것이다. 방향 제시 수준으로만 설명하고 나머지는 알아서 하라는 식이다. 그래서 종종 flask 소스 코드를 까보곤 하며, 내가 VIM이나 Sublime text를 쓰다가 PyCharm을 쓰게 된 것도 구현체 이동 기능으로 Flask 소스 코드를 편하게 까보기 위해서이다. 문서 보다 Flask 소스 코드 보는 경우가 더 많다. 그래서 Python으로 웹 프로그래밍에 입문하려는 사람에겐 Django를 추천한다. 도구 자체를 익히기엔 Flask가 간결해서 좋지만, 입문자가 독학하는 데 도움이 될 만한 친절한 문서가 많지 않다.&lt;/p&gt;

&lt;p&gt;궁금한 점은 다른 사람은 어떻게 구조를 잡고 쓰고 있는가 이다. 자기 입맛대로 쓰면 그만인 웹 프레임웍이긴 하지만, 그래도 궁금하긴 하다. &lt;a href=&quot;https://github.com/teampopong/pokr.kr&quot;&gt;팀 포퐁의 pokr 소스 코드&lt;/a&gt;를 본 뒤로는 더 궁금해졌다. Django는 구조가 그래도 고만고만한 경향이 있는데, Flask는 정말 다양하겠다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;이 책은 두 가지 중 하나는 꽤 충족시켜 준다. 공식 문서보다 친절한데 그렇다고 막 장황하지도 않다. 공식 문서를 보고 “설명이 이게 끝?”이라 생각이 든다면, 이 책은 거기서 한 수준 정도 더 설명한다. 설명을 하는 기반 코드가 대체로 공식 문서에 나온 예제이고 거의 동일한데, 그래서 좋은 점은 공식 문서를 볼 때 좀 더 친근하게 느낄 것이고 정석(?) 활용을 학습한다는 점이다. 아쉬운 점은 내가 궁금해하는 걸 해소하진 않는다는 점이다.&lt;/p&gt;

&lt;p&gt;Flask이든 Django이든 잘 활용하려면 각 도구가 지향하는 철학이나 방향을 공감하고 이해해야 한다고 본다. 이 책은 그런 공감을 일으키기엔 얕지만, 얕아서 편하게 읽기에 좋다. 자취생을 위한 간편 요리법을 다루는 책 같다. 입문자를 위한 책인지는 잘 모르겠고, 웹 프로그래밍을 해본 사람이 Flask에 얼른 입문해서 써먹을 때 더 유용해 보인다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이 책은 출판사 &lt;a href=&quot;http://www.jpub.kr&quot;&gt;제이펍&lt;/a&gt;에서 내게 증정해준 것이다. 내게 리뷰 같은 걸 요구하지 않고 보내준 것이지만, 국내에 Flask를 다루는 국내 집필서가 없어서 반가운 마음에 나 스스로 쓴 비대가성 글이다.&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Jul 2016 01:00:00 +0900</pubDate>
        <link>http://localhost:4000//2016/07/book-python-web-programming-with-flask/</link>
        <guid isPermaLink="true">http://localhost:4000//2016/07/book-python-web-programming-with-flask/</guid>
        
        <category>python</category>
        
        <category>flask</category>
        
        <category>책리뷰</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>프로그램 짜는 세탁소집 첫째 아들.</title>
        <description>&lt;p&gt;오프라인 영역에서 이뤄지던 세차, 세탁, 주차, 배달 등 다양한 서비스가 O2O(online to offline) 서비스로 등장하고 있다. 창업자나 창업팀을 보면 자신이 하던 오프라인 직업에 IT 기술을 접목하거나 창업자가 IT 분야 개발자인데 특정 오프라인 분야의 덕후인 경우가 많다. 온라인과 오프라인을 함께 이해하고 활용할 줄 알고 접목하기 때문에 기존 온라인에서만 혹은 오프라인에서만 일을 하던 사람과 다른 접근을 하거나 좀 더 빠른 실행이 가능한 것이라 본다.&lt;/p&gt;

&lt;p&gt;스스로 판과 규칙을 짜는 주도성을 갖는 경향이 강한 온라인 분야와는 달리 오프라인 영역은 오랜 세월 쌓인 사용자 경험칙이 강하다. 오프라인 특유의 사용자 경험칙은 대를 이어온 손맛과 비슷하다. 감성 영역이란 얘기다. 그 감성은 세대나 정서 차이로 취향에 안 맞기도 하지만, 요는 기계가 엄청나게 많은 차원으로 학습해도 파악하기 어려운 미세한 감성 영역을 이해하고 접근한다는 데 있다.&lt;/p&gt;

&lt;p&gt;그래서 나는 다음 세대 O2O 서비스는 세탁소집 아들, 자동차 정비소 딸, 미용실 둘째 아들이 일으키는 모습을 기대한다. 단, 조건이 있다. 이들은 소프트웨어를 이해하고 당연히 활용한다는 사고 체계를 갖춰야 한다. 무선인 전화기, 터치 인터페이스, 사회 관계는 온라인에서도 지속된다는 당연한 인식이 기본으로 깔려 있으며, 기계가 할 일을 쉽게 시키는 사고 방식과 체계를 갖춘 세대. 세탁소에서 바삐 움직이는 &lt;strong&gt;콤퓨타&lt;/strong&gt; 세탁기를 보며 콤퓨타와 세탁 너머를 상상할 수 있는 세대.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jun 2016 07:00:00 +0900</pubDate>
        <link>http://localhost:4000//2016/06/who-starts-up-o2o-service/</link>
        <guid isPermaLink="true">http://localhost:4000//2016/06/who-starts-up-o2o-service/</guid>
        
        <category>경험</category>
        
        <category>가업</category>
        
        <category>startup</category>
        
        <category>o2o</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>프로그래밍 입문자를 위한 몇 가지 조언</title>
        <description>&lt;p&gt;2014년 11월 4일부터 &lt;a href=&quot;http://www.fastcampus.co.kr/&quot;&gt;패스트캠퍼스&lt;/a&gt;에서 웹 서비스 개발을 주제로 강의하여 얼마 전에 네 번째 기수를 마쳤다. Python과 Django를 이용해 웹 서비스 개발 공정을 겪는 것이 커리큘럼 주제인데, 1기에 대한 이야기는 &lt;a href=&quot;http://blog.hannal.com/2015/03/devlife-s1-04/&quot;&gt;Python과 Django 강의&lt;/a&gt;라는 글로 작성했다. 이번 글에선 어떻게 Python과 Django를 공부하면 좋을 지 1년 간 강의하며 고민했고 몇 가지 원리에 대해서는 정리되어 공유해 본다. 내가 강의한 주제가 Python과 Django, 그리고 웹 프로그래밍이어서 그렇지, 프로그래밍에 대한 공부 방법이라고 해도 무방하다고 생각한다.&lt;/p&gt;

&lt;h3 id=&quot;강의-개요&quot;&gt;강의 개요&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이름 : &lt;a href=&quot;http://www.fastcampus.co.kr/dev_camp_wsd/&quot;&gt;웹 서비스 개발 캠프&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;주제
    &lt;ul&gt;
      &lt;li&gt;Python과 Django를 강사의 경험을 담아 심도있게 다룬다.&lt;/li&gt;
      &lt;li&gt;웹 서비스를 개발하는 공정을 Back-end 중심으로 경험하며 웹 프로그램을 개발하여 배치(deployment)한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;수강 대상자
    &lt;ul&gt;
      &lt;li&gt;다른 언어나 프레임워크를 써봤고, Django에 입문하려는 사람&lt;/li&gt;
      &lt;li&gt;Python이나 웹 프로그래밍 중급 과정에 진입하려는 사람&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;강의 시간
    &lt;ul&gt;
      &lt;li&gt;1기 : 90시간&lt;/li&gt;
      &lt;li&gt;2기 : 64시간&lt;/li&gt;
      &lt;li&gt;3기 : 48시간&lt;/li&gt;
      &lt;li&gt;4기 : 40시간&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;손으로-반복-반복-그리고-또-반복&quot;&gt;손으로 반복, 반복, 그리고 또 반복&lt;/h3&gt;

&lt;p&gt;뭔가 만들려 하면 막막해서 시작을 떼지 못하겠다는 입문자가 무척 많다.&lt;/p&gt;

&lt;p&gt;책을 보거나 강의를 듣는 중엔 다 안다. 물어보면 대답도 한다. 근데 막상 코드를 짜라고 하면 힘겨워한다. 질문하며 코드 흐름을 자연스레 유도하면 대답은 하는데, 그 대답을 코드로 옮기질 못하기도 한다. 커리큘럼 초반엔 잘 따라오는데, 중반에 접어들어 학습하는 주제와 범위가 늘면 눈에 띄게 힘들고 어려워 하는 경우도 있다.&lt;/p&gt;

&lt;p&gt;그에 반해 빈 파일에 코드를 채워넣는 걸 주저하지 않는 사람도 있다. 원래 다른 분야에서 프로그래밍을 했거나 다른 언어로 웹 프로그래밍을 한 사람이야 그렇다 쳐도, 사실상 입문자여서 이 강의를 듣기엔 다소 무리하는 수강자인데도 곧잘 코드를 작성한다. 입문자여서 프로그래밍이나 Python, Django에 대한 지식과 경험이 부족하여 이론을 설명하면 이해는 못하는데 코드는 어쨌든 작성해 간다. 심지어 자신이 무슨 코드를 짰는지 이해하지 못하면서도 말이다.&lt;/p&gt;

&lt;p&gt;이런 차이는 반복량에 있다. 눈으로는 코드와 이론을 알지만, 손은 모른다. 프로그래밍 언어도 언어의 한 종류이다. 아무리 영어 단어나 문법을 외워도 말을 하지 않고 글을 쓰지 않으면 표현하기 어렵다. 마찬가지로 눈으로 이론을 공부하고 코드를 읽어도 손으로 코드를 짜지 않으면 코딩은 되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://scienceon.hani.co.kr/34106&quot;&gt;시시하고 아는 코드라도 직접 손으로 쳐야 한다. 한 번 쳐보고 넘어가지 말고, 다양하게 응용하며 여러 번 쳐봐야 한다&lt;/a&gt;. 손에도 코드를 새겨야 한다. 코드를 손에 새기는 가장 쉽고 좋은 방법은 딱 세 개이다. 반복, 반복, 그리고 또 반복하는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;복습&quot;&gt;복습&lt;/h3&gt;

&lt;p&gt;학습한 건 가능한 빨리 복습해야 학습 효과가 크다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우선 배운 걸 그대로 따라하는 복습을,&lt;/li&gt;
  &lt;li&gt;시간이 있다면 응용하는 복습을&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하는 게 좋다. 나는 첫 번째 복습 방법을 교재에 반영하여 수강자가 수업 내용을 떠올리도록 유도한다. 큰 주제 별로 교재를 구성하되, 작은 주제는 강의 흐름에 맞추어 배치하여 스토리텔링을 하려 한다. 중요한 내용은 몇 번 반복 등장하고, 가끔 다른 주제가 먼저 등장하기도 하는데 교재를 한 장 한 장 읽어 나가도록 구성하여 교재를 그대로 따라 복습하면 강의를 떠올리도록 한 것이다.&lt;/p&gt;

&lt;p&gt;두 번째 복습 방법은 과제를 내서 유도한다. 아무리 의지가 가득해도 입문자에게 독학이 어려운 이유 중 하나는 학습한 내용을 응용하여 복습하기 어렵기 때문이다. 과제 풀이를 열심히 한 수강자는 커리큘럼 후반으로 가며 다루는 주제가 다양해 질수록 과제를 푼 효과를 보는데, 새 주제가 등장하더라도 이전 주제와 연계되거나 응용하기 때문이다. 책이나 교육 웹사이트로 학습하는데 실습 문제나 과제가 나오면 꼭 풀기를 권한다.&lt;/p&gt;

&lt;p&gt;강의 시간은 기수를 거듭할수록 줄어 들었는데, 수강자가 복습하지 않으면 강의 시간이 아무리 길어도 별 효과가 없었기 때문이다. 실제로 4기는 강의 시간이 1기의 반도 안 됐지만 진도와 강의 주제의 깊이는 별 차이가 없었다.&lt;/p&gt;

&lt;h3 id=&quot;질문&quot;&gt;질문&lt;/h3&gt;

&lt;p&gt;공부하고 있는 걸 머리에 선명하게 새기는 또 다른 방법은 학습자가 질문하는 것인데, 복습한 사람이 질문을 하는 편이었다. 내 경우는 과제에 함정(?)을 심어 놓는데, 과제를 제출한 사람 중 함정에 대해 질문한 사람 없이 문제를 잘 해결했다면 수강자들이 진도를 잘 따라오고 있다고 판단하여 수업에서 좀 더 깊은 내용을 다루거나 더 많은 양을 다룬다. 함정에 빠진 피해자는 질문을 하게 되는데, 함정에 빠진데다 질문을 하여 답변을 받기 때문에 기억에 남을 가능성이 높다고 본다.&lt;/p&gt;

&lt;p&gt;독학할 때엔 이러한 피드백 과정을 겪기 어렵다. 혼자서 웹에서 검색하여 문제를 해결해도 문제의 앞뒤 맥락을 이해하기 보다는 답에 초점을 맞추어 넘어가기 십상이기 때문이다. 나는 문제에 부딪혀서 스스로 해결하지 못하여 웹에서 해결 방법을 찾으면 반드시 따로 갈무리 하여 쌓아놓고, 일정 시간 뒤에 갈무리 한 자료들의 범주를 나누고 복기한다. 갈무리 당시엔 개별 문제이지만, &lt;a href=&quot;http://scienceon.hani.co.kr/33793&quot;&gt;시간이 흘러 쌓인 문제들을 분류해놓고 보면 각 문제가 서로 연결되어 문제 상황과 맥락을 이해&lt;/a&gt;하게 된다.&lt;/p&gt;

&lt;p&gt;질문과 답변을 주고 받는 소통은 피드백 과정이기도 하다. &lt;a href=&quot;http://scienceon.hani.co.kr/33829&quot;&gt;피드백을 받지 못하면 실력은 늘지 않는다&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;질문하고 답을 찾자. 질문 하려면 질문할 준비가 돼야 한다. 그 준비란 바로 실습과 복습이다.&lt;/p&gt;

&lt;h3 id=&quot;함께-공부하기&quot;&gt;함께 공부하기&lt;/h3&gt;

&lt;p&gt;팀은 1기 때부터 계속 조성하려 애썼다. 1기 때는 강사 입장에선 운좋게도 수강자들이 스스로 팀을 짜서 팀 프로젝트를 수행했었다. 2기 때는 권유를 해봤고, 3기 때는 오리엔테이션 때 아예 팀 조성 시간을 갖고 팀 프로젝트를 정해주었으며 팀장에겐 작은 사례(?)를 하기도 했다. 4기 때는 3기 때와 거의 같으나 수시로 팀 프로젝트를 상기시키며 좀 더 독려했다. 하지만 팀 운영은 잘 안 됐다. 복습과 과제 수행도 버거운데 팀 활동은 더 시간 내기 어려웠다는 수강자가 많았다.&lt;/p&gt;

&lt;p&gt;하지만 여전히 팀 조성과 활동을 하도록 관심을 투자할 가치가 있다. 팀은 아니지만 지인과 나란히 앉아 공부하거나 서로 도우며 공부한 수강자는 혼자서 수업에 참여한 수강자에 비해 실패나 난관에 흔들리는 정도가 덜했다. 질문도 왕성하게 하고 붙임성 있게 다른 수강자와 교류하며 수업에 왕성하게 참여하는 수강자는 그 자신이 수업에서 거둬가는 게 많기도 하지만, 다른 수강자에게도 영향을 많이 끼친다. 그런 참여 활동이 &lt;a href=&quot;http://scienceon.hani.co.kr/33907&quot;&gt;당사자 뿐만 아니라 동료 수강자에게 피드백을 주고 받는 과정&lt;/a&gt;이기 때문이다.&lt;/p&gt;

&lt;p&gt;입문자일 수록 함께 공부할 동료를 구하라고 권하고 싶다.&lt;/p&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;재작년에 &lt;a href=&quot;http://blog.hannal.com/2014/5/principles_for_efficient_training/&quot;&gt;근거기반훈련 워크샵에 참석해 효과적 훈련의 원리&lt;/a&gt;를 배웠다. 막상 내게 제대로 활용하지 않았는데, 1년 여 강의하며 몇 가지 원리는 뚜렷하게 효과를 체험했다. &lt;a href=&quot;http://www.fastcampus.co.kr/dev_camp_wpb/&quot;&gt;웹 프로그래밍 입문&lt;/a&gt;과 &lt;a href=&quot;http://www.fastcampus.co.kr/dev_camp_wsd/&quot;&gt;웹 서비스 개발&lt;/a&gt;을 주제로 강의하긴 하지만, 꼭 내 강의가 아니더라도 혼자 공부하거나 지인과 공부하며 활용하면 충분히 효과를 볼 것이라 생각한다.&lt;/p&gt;

</description>
        <pubDate>Wed, 13 Jan 2016 10:45:00 +0900</pubDate>
        <link>http://localhost:4000//2016/01/how-to-study-programming/</link>
        <guid isPermaLink="true">http://localhost:4000//2016/01/how-to-study-programming/</guid>
        
        <category>python</category>
        
        <category>django</category>
        
        <category>강의</category>
        
        <category>패스트캠퍼스</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>2016년을 맞이하며 20년 전 판을 생각하다</title>
        <description>&lt;h3 id=&quot;게임-개발&quot;&gt;게임 개발&lt;/h3&gt;

&lt;p&gt;20년 전에 첫 게임을 만들었다. 내 &lt;a href=&quot;http://blog.hannal.com/profile/&quot;&gt;필명인 한날은 이 게임 이름에서 비롯&lt;/a&gt;된 것이다. 어설프고 재미없고 허섭했지만, 내 게임을 만들어 친구들과 내 게임 얘기를 나누었다. 내 고교 시절 생활기록부를 보니 장래 희망이 컴퓨터 프로그래머라 적혀 있었다. 당시엔 게임 개발이라는 직업이 사회에 인식되기 전이라서 편의상 게임 개발자 대신 컴퓨터 프로그래머라 적은 것인데, 20년이 지난 지금은 정말 게임 개발자가 아니라 컴퓨터 프로그래머가 되어 있다.&lt;/p&gt;

&lt;p&gt;가끔 언제 다시 게임 업계에 돌아오냐는 안부성 질문을 받곤 한다. 게임 업계에 돌아갈 지 안 갈 지 아직은 모르겠다. 하지만 난 게임을 만들어 왔고, 앞으로도 게임을 만들 것이다.&lt;/p&gt;

&lt;h3 id=&quot;홈페이지&quot;&gt;홈페이지&lt;/h3&gt;

&lt;p&gt;20년 전에 내 홈페이지를 처음 열었다. 1997년부터는 게임 개발, 프로그래밍 등을 주제로 운영하다 &lt;a href=&quot;https://web.archive.org/web/19991012051013/http://dimanche.co.kr/index-kr.html&quot;&gt;1998년에 도메인을 사서 나 나름대로 브랜드&lt;/a&gt;를 만들고 유지하려 했다. 꾸준하진 않지만 완전히 놓지 않고 계속 운영해 온 지난 20년을 스스로 대견하게 여긴다.&lt;/p&gt;

&lt;p&gt;나를 표현하는 익숙한 방법이 내 홈페이지 또는 블로그이다. 앞으로도 내 공간에 글을 쓸 것이다.&lt;/p&gt;

&lt;h3 id=&quot;판&quot;&gt;판&lt;/h3&gt;

&lt;p&gt;작더라도 내 판을 만들어야 한다는 생각을 해왔다. 아무리 잘하고 위협스러워도 남의 판에서는 승산이 없다. 판의 주인이 판을 엎고 새 규칙을 짜면 그만이다. 주인이 판 엎지 않게 아양 떨고 비위 맞추고, 규칙을 바꾸면 바꿀 규칙을 예측하며 그 판에 길들여지면 더이상 희망이 없다. 차라리 판의 주인이 한 짓에 삐쳐서 그 판을 떠나는 게 낫다. 내 판을 만들어 사람들이 내 판에 들어오고, 그 판을 키워야 한다. 그래야 내가 바라는 진정한 독립이 이뤄진다.&lt;/p&gt;

&lt;p&gt;하지만 난 그동안 준비되지 않았으며 진심으로 독립을 갈망한 것이 아니었을지도 모른다는 생각을 했다. 내 판을 만들어야 한다고 주창했지만 정작 말로만 고민했을 뿐, 실행할만큼 고민하지 않았다. 여전히 남의 판에 기대어 마이너 버전 수준에서 내 몸뚱아리를 업그레이드 하려 아둥바둥거렸다.&lt;/p&gt;

&lt;p&gt;앞으로 3~4년 뒤부터는 갈수록 내 판을 만드는 데 들이는 노력이 비싸질 것이라 예상한다. 내 판을 만드는 비용이 비싸질수록 포기할 가능성이 커지고, 포기하는 그때부터 남의 판에서 움직이는 장기말이자 노예가 될 것이다.&lt;/p&gt;

&lt;p&gt;20년 전에 막연히 내 판을 만들어야 한다는 생각을 한 것 같다. 능력도 없으면서 게임 만들자며 사람들 꼬셔 게임개발팀을 만들었고, 하루 방문자가 몇 명이더라도 내 홈페이지에 내 글을 남기려 했다. 내 스토리를 갖고 싶었고 만들려 애썼다. 길들여지지 말자. 내 판의 20년 전 원시형을 잊지 말고 포기하지 말자.&lt;/p&gt;

&lt;p&gt;그렇게 다짐하며 각오를 세운다.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jan 2016 16:00:49 +0900</pubDate>
        <link>http://localhost:4000//2016/01/hello_2016/</link>
        <guid isPermaLink="true">http://localhost:4000//2016/01/hello_2016/</guid>
        
        <category>2016년</category>
        
        <category>판</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>내 개발 환경.</title>
        <description>&lt;p&gt;프로그래밍 입문자, 또는 새로 프로그래밍이나 도구에 입문하는 사람과 얘기를 나누다 보면 다른 사람, 기왕이면 그 언어나 도구에 익숙한 사람이 사용하는 개발 환경을 무척 궁금해 한다는 걸 느꼈다. 그냥 공식 홈페이지에 있는 걸 내려 받아서 설치하면 되는 거 아닌가? 생각하며 관련 자료를 찾아보니 사람들은 공식 홈페이지에 소개되지 않은 방법으로 개발 환경을 꾸린다는 걸 발견하면 더 혼란이 빠져서 아예 입문 자체를 부담스러워 하는 사람도 많다.&lt;/p&gt;

&lt;p&gt;그래서 내가 쓰는 개발 환경을 정리해 본다.&lt;/p&gt;

&lt;h3 id=&quot;공통-환경&quot;&gt;공통 환경&lt;/h3&gt;

&lt;h4 id=&quot;pc&quot;&gt;PC&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Macbook Pro 13인치 (2015년 early)&lt;/li&gt;
  &lt;li&gt;Macbook Pro 15인치 (2014년 early)&lt;/li&gt;
  &lt;li&gt;iMac 20인치 (2011년 mid)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;운영체제&quot;&gt;운영체제&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;주 환경 : OS X. 내가 주로 활동하는 분야는 윈도우 보다는 리눅스나 OS X에서 개발하기 더 편하다.&lt;/li&gt;
  &lt;li&gt;보조 환경 : Ubuntu. 주로 실 서버에 올리기 전에 시험 동작하려고 사용하거나 라즈베리 파이용 뭔가를 만들 때 쓰는 환경이지만, 집에 있는 리눅스 박스가 저사양이라서 평소엔 잘 안 쓴다.&lt;/li&gt;
  &lt;li&gt;쉘(shell) : bash를 주로 써왔지만, 2015년 11월부터 zsh을 쓰고 있다. &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;oh-my-zsh&lt;/a&gt;을 쓰고 설정은 기본값으로 쓰고 있으며, plugin만 git, virtualenv, virtualenvwrapper를 설정했다.&lt;/li&gt;
  &lt;li&gt;터미널은 OS X에 기본 내장된 것을 사용한다.&lt;/li&gt;
  &lt;li&gt;맥 패키지는 &lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt;로 관리한다.&lt;/li&gt;
  &lt;li&gt;파일, 디렉터리 구조는 &lt;a href=&quot;http://mama.indstate.edu/users/ice/tree/&quot;&gt;tree&lt;/a&gt;을 쓴다. OS X는 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install tree&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;원격에 있는 파일은 &lt;a href=&quot;https://www.gnu.org/software/wget/&quot;&gt;wget&lt;/a&gt;로 받는다. OS X는 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install wget&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;글꼴&quot;&gt;글꼴&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://sourcefoundry.org/hack/&quot;&gt;Hack&lt;/a&gt;을 사용한다.&lt;/p&gt;

&lt;h4 id=&quot;vcs-client&quot;&gt;VCS client&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; : 기본 클라이언트를 터미널에서 쓴다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;sourcetree&lt;/a&gt; : 커밋이 복잡하게 꼬였을 때 쓰지만, 느려서 가끔 쓴다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/karan/joe&quot;&gt;joe&lt;/a&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 파일을 다룰 때 쓴다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;python&quot;&gt;Python&lt;/h3&gt;

&lt;h4 id=&quot;에디터&quot;&gt;에디터&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot;&gt;PyCharm&lt;/a&gt; : 2015년 11월부터 쓰고 있다. 아직 익숙하지 않다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime text 3&lt;/a&gt; : 평소에 주로 써왔는데, 최근엔 조금씩 빈도를 줄이고 있다.
    &lt;ul&gt;
      &lt;li&gt;SublimeLinter + Python Flake8 lint : 코드 검사기는 &lt;a href=&quot;https://flake8.readthedocs.org&quot;&gt;Flake8&lt;/a&gt;을 SublimeLinter에 연동해 쓴다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;VIM : 급히 간단히 편집할 때 쓴다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;python-관련&quot;&gt;Python 관련&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Python 3, 2.7 : 최근엔 3 버전으로 시작하는 프로젝트가 늘고 있지만, 아직은 2.7로 동작하는 게 더 많다.&lt;/li&gt;
  &lt;li&gt;PyPy : 실 사용 환경에서 사용하고 있긴 한데, 여전히 제한되게 쓰고 있다.&lt;/li&gt;
  &lt;li&gt;virtualenv/virtualenvwrapper : 주로 사용하는 Python 환경 격리 도구.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;golang&quot;&gt;Golang&lt;/h3&gt;

&lt;h4 id=&quot;에디터-1&quot;&gt;에디터&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; : 2015년 11월부터 쓰고 있다. 느려서 답답한데, 편하긴 하다. golang 정식 plugin이 출시되었다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime text 3&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;plugin : Goimports, GoSublime, SublimeLinter-contrib-golint&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;문서와-자료&quot;&gt;문서와 자료&lt;/h3&gt;

&lt;h4 id=&quot;편집&quot;&gt;편집&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;markdown : 로컬에서 문서를 작성하는 경우엔 대부분 markdown으로 작성한다. 편집은 &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;으로 하는데, 한글이 많으면 어느 에디터든 무척 느려지기 때문에 코딩 할 땐 사용하지 않는 Atom을 markdown 문서 편집용으로 쓴다.&lt;/li&gt;
  &lt;li&gt;google drive : 다른 사람과 협업하거나 공유해야 하는 경우에 사용한다. 주로 google docs, spreadsheet.&lt;/li&gt;
  &lt;li&gt;dropbox paper : 베타판부터 쓰고 있긴 한데, dropbox의 최근 선택과 집중 행보를 보자니 오래 유지 안 하고 종료할 것 같아서 이젠 별로 사용하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;자료-관리&quot;&gt;자료 관리&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;웹 스크래핑 : 모바일 환경에선 &lt;a href=&quot;https://getpocket.com/&quot;&gt;pocket&lt;/a&gt;, PC 환경에선 pocket과 &lt;a href=&quot;http://www.devontechnologies.com/products/devonthink/overview.html&quot;&gt;devonthink&lt;/a&gt;로 스크랩한다. evernote + clearly를 썼는데, 갈수록 구려져서 안 쓴다.&lt;/li&gt;
  &lt;li&gt;PDF : devonthink에 담아서 관리하며, dropbox에도 올려서 모바일 환경에서 접근한다.&lt;/li&gt;
  &lt;li&gt;bookmark : 구글 크롬에 북마크한다. 구글 계정 동기화를 해놔서 내가 사용하는 장비 모두와 북마크 동기화가 늘 되어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;이외&quot;&gt;이외&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Google chrome : 느리고 뚱뚱하지만, 구글 계정 연동이 편해서 여전히 쓴다.&lt;/li&gt;
  &lt;li&gt;이외 도구는 가장 기본 설정대로 사용한다.
    &lt;ul&gt;
      &lt;li&gt;R Studio, Apache spark, React, Jupyter, …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 18 Dec 2015 14:45:00 +0900</pubDate>
        <link>http://localhost:4000//2015/12/my-dev-envs/</link>
        <guid isPermaLink="true">http://localhost:4000//2015/12/my-dev-envs/</guid>
        
        <category>python</category>
        
        <category>golang</category>
        
        <category>개발환경</category>
        
        <category>os X</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>10. 이용자가 올린 사진 목록 보기</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;마지막 갱신일시 : 2015년 10월 2일 12시 45분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사진을 게시하였으니 저장된 사진을 가져와 나열하는 기능이 필요합니다. 로그인한 이용자가 사진을 게시하는 기능을 만들었으니 이용자 단위로 사진을 가져와 보여주는 개인 프로필 공간을 만들어 보겠습니다. 이번 편은 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체를 이용해 데이터를 찾는 방법을 다룹니다.&lt;/p&gt;

&lt;p&gt;아참, 강좌를 연재하는 중에 Django 1.8판이 출시되었습니다. 그래서 &lt;a href=&quot;http://blog.hannal.com/2014/9/start_with_django_webframework_03/&quot;&gt;3편 Photo 앱과 모델 만들기&lt;/a&gt;과 &lt;a href=&quot;http://blog.hannal.com/2014/11/start_with_django_webframework_05/&quot;&gt;5편 url에 view 함수 연결해서 사진 출력하기&lt;/a&gt;, &lt;a href=&quot;http://blog.hannal.com/2015/05/start_with_django_webframework_07/&quot;&gt;7편 사진 게시물 제출하여 게시하기&lt;/a&gt;에 관련 내용을 추가 반영했습니다.&lt;/p&gt;

&lt;h3 id=&quot;개인-프로필-기능용-앱-만들기&quot;&gt;개인 프로필 기능용 앱 만들기&lt;/h3&gt;

&lt;p&gt;강좌 &lt;a href=&quot;http://blog.hannal.com/2014/8/start_with_django_webframework_01/&quot;&gt;1편 Pystagram 기획&lt;/a&gt;에서 개인 프로필 공간(이하 프로필 페이지)은 다음 기능을 포함합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;간단한 소개&lt;/li&gt;
  &lt;li&gt;팔로잉, 팔로워&lt;/li&gt;
  &lt;li&gt;이용자가 올린 사진&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로필 페이지를 비롯해서 이용자의 대외 노출 기능은 모두 별도 Django 앱을 만들어 다루겠습니다. 꼭 앱으로 나누지 않아도 되지만, 같은 목적이나 맥락끼리 기능을 구분하여 앱으로 묶어 관리하는 게 낫습니다. 터미널 쉘에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;manage.py&lt;/code&gt; 파일을 이용해 앱을 추가합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(pystagram) $ python manage.py startapp profiles
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;url-패턴-만들기&quot;&gt;URL 패턴 만들기&lt;/h3&gt;

&lt;p&gt;이번 편에서는 “이용자가 올린 사진”을 나열하는 기능을 구현하는데, 페이지 URL은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/user/&amp;lt;이용자 ID&amp;gt;/&lt;/code&gt; 패턴입니다. 이전 편까지는 URL 패턴을 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 파일이 있는 시작 패키지의 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;에 등록하였는데, 프로필 공간에 들어가는 기능이나 페이지에 필요한 URL은 따로 분리하여 연결하는 방식을 쓰겠습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;profiles&lt;/code&gt; 앱 디렉터리에 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; 파일을 만들어서 이 모듈에 프로필 관련 URL을 등록하고, 시작 패키지의 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;에서는 앱 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;include()&lt;/code&gt; 함수로 포함시키는 방식입니다. Django Admin에 사용하는 URL 패턴을 이 방식으로 포함시켜 사용합니다.&lt;/p&gt;

&lt;p&gt;먼저 시작 패키지, 그러니까 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 파일이 있는 디렉터리에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; 파일을 열고 다음 내용을 추가합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    url(
        r'^user/',
        include(profile_urls, namespace='profiles'),
    ),
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 내용을 추가한 &lt;code class=&quot;highlighter-rouge&quot;&gt;urlpatterns&lt;/code&gt; 변수는 다음과 같습니다&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;urlpatterns = [
    url(
        r'^photo/(?P&amp;lt;photo_id&amp;gt;\d+)/$',
        'photo.views.single_photo',
        name='view_single_photo'
    ),
    # 중략
    url(
        r'^user/',
        include(profile_urls, namespace='profiles'),
    ),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;user/&lt;/code&gt;로 시작하는 URL인 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;profile_urls&lt;/code&gt; 객체를 포함시켜 연결(매핑)하고, 이 영역의 이름공간(&lt;code class=&quot;highlighter-rouge&quot;&gt;namespace&lt;/code&gt;)을 &lt;code class=&quot;highlighter-rouge&quot;&gt;profiles&lt;/code&gt;으로 명명하였습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;profile_urls&lt;/code&gt;가 뜬금없이 나타났는데, 이 객체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;profiles&lt;/code&gt; 앱의 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;urlpatterns&lt;/code&gt; 객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;profile_urls&lt;/code&gt; 이름으로 가져온 것입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;urlpatterns&lt;/code&gt; 위에 다음 코드를 추가합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from profiles.urls import urlpatterns as profile_urls

urlpatterns = [
    # 중략
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이와 같은 방식은 &lt;code class=&quot;highlighter-rouge&quot;&gt;patterns()&lt;/code&gt; 함수를 이용해 &lt;code class=&quot;highlighter-rouge&quot;&gt;prefix&lt;/code&gt;를 지정하여 특정 URL 이하에 대해 뷰 함수를 연결하는 방식과 같습니다.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;profile_urls&lt;/code&gt;로 import 할 프로필 앱의 &lt;code class=&quot;highlighter-rouge&quot;&gt;urlpatterns&lt;/code&gt;를 만듭니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;profiles&lt;/code&gt; 디렉터리에 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; 파일을 만들고 URL 패턴을 추가합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.conf.urls import url

from . import views

urlpatterns = [
    url(
        r'^(?P&amp;lt;username&amp;gt;[\w.@+-]+)/$',
        views.profile,
        name='profile'
    ),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;URL 정규표현식 패턴은 &lt;code class=&quot;highlighter-rouge&quot;&gt;[\w.@+-]+)/$&lt;/code&gt;인데, 영문자, 공백, &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 문자가 하나 이상인 문자열입니다. 이 정규표현식은 Django에 내장된 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;에 사용되는 패턴과 동일합니다. 이 정규표현식에 해당하는 문자열을 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;으로 받아 뷰 함수에 인자로 전달합니다. 이 URL은 &lt;code class=&quot;highlighter-rouge&quot;&gt;user/&lt;/code&gt;로 시작하는 경우에 해당되니 종합하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;/user/[\w.@+-]+)/&lt;/code&gt;인 경우에 &lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt; 뷰 함수를 호출합니다. 이 URL 패턴의 이름은 &lt;code class=&quot;highlighter-rouge&quot;&gt;url()&lt;/code&gt; 함수에 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; 인자로 &lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;이라 명명하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; 파일이 있는 현재 경로(&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;)에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;views&lt;/code&gt; 모듈을 읽어온 뒤 이 객체에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt; 속성을 뷰 함수로 연결합니다. 즉, 현재 앱의 &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;를 사용하는 것이며, 사용할 뷰 함수를 직접 읽어와(&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;) 함수 객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;url()&lt;/code&gt; 함수에 인자로 직접 전달합니다.&lt;/p&gt;

&lt;h3 id=&quot;뷰-함수와-템플릿-뼈대-만들기&quot;&gt;뷰 함수와 템플릿 뼈대 만들기&lt;/h3&gt;

&lt;p&gt;이번엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;profiles&lt;/code&gt; 앱의 &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt; 파일에 &lt;code class=&quot;highlighter-rouge&quot;&gt;profile()&lt;/code&gt; 뷰 함수를 추가합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# coding: utf-8

from __future__ import unicode_literals

from django.shortcuts import render

def profile(request, username):
    return render(request, 'profile.html', {})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt;에서 이용자 이름(ID) 문자열을 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;으로 받아내어 뷰 함수로 전달하도록 하였으므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;profile()&lt;/code&gt; 함수에서도 두 번째 인자로 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;을 지정해야 합니다.&lt;/p&gt;

&lt;p&gt;뷰 함수는 뼈대부터 만들 것이므로 뷰 함수에서 사용할 뷰 함수 템플릿을 &lt;code class=&quot;highlighter-rouge&quot;&gt;'profile.html'&lt;/code&gt;로 지정합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;profile.html&lt;/code&gt; 템플릿 파일은 앱용 템플릿 디렉터리(&lt;code class=&quot;highlighter-rouge&quot;&gt;APP_DIRS&lt;/code&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;)에 만듭니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;profiles&lt;/code&gt; 앱 디렉터리 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;templates&lt;/code&gt; 디렉터리를 새로 만들고, 그 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;profile.html&lt;/code&gt; 템플릿 파일을 만든 뒤 다음 내용을 추가합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'layout.html'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endblock&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;드디어 뼈대를 만들었습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;manage.py runserver&lt;/code&gt;로 개발용 내장 웹서버를 구동하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8000/user/hannal/&lt;/code&gt;과 같은 URL로 접근하면 프로필 페이지가 나타납니다.&lt;/p&gt;

&lt;p&gt;하지만, 이 글 내용 그대로 수행했다면 반갑지 않은 화면이 나타납니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/10/10-not_exist_template_file_error.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;profile.html&lt;/code&gt; 템플릿 파일이 존재하지 않는다는 내용입니다. 이 파일이 분명히 있는데 저 오류가 발생한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;INSTALLED_APPS&lt;/code&gt; 설정에 우리가 새로 생성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;profiles&lt;/code&gt; 앱을 추가하지 않아서 그렇습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;profile.html&lt;/code&gt; 템플릿 파일은 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;profiles&lt;/code&gt; 앱 디렉터리&lt;/strong&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;templates&lt;/code&gt; 디렉터리에 있습니다. 앱 디렉터리에 있다는 의미는 Django가 앱 디렉터리라는 걸 인식해야 한다는 의미입니다. 그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;INSTALLED_APPS&lt;/code&gt;에 추가하는 것입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;INSTALLED_APPS&lt;/code&gt; 항목에 &lt;code class=&quot;highlighter-rouge&quot;&gt;'profiles'&lt;/code&gt; 문자열을 추가하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'photo',
    'profiles',
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/10/10-profile_page_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;접속한-페이지의-이용자-정보-가져오기&quot;&gt;접속한 페이지의 이용자 정보 가져오기&lt;/h3&gt;

&lt;p&gt;접속한 프로필 페이지의 이용자 이름은 뷰 함수에 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; 인자로 전달됩니다. 우리는 Django에서 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델을 사용하므로 이 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; 모델 필드를 검색(lookup)하는 데 사용하여 이용자를 찾습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.shortcuts import get_object_or_404
from django.contrib.auth import get_user_model

def profile(request, username):
    User = get_user_model()
    user = get_object_or_404(User, username=username)

    return render(request, 'profile.html', {
        'current_user': user,
    })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get_user_model()&lt;/code&gt; 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 모듈의 &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTH_USER_MODEL&lt;/code&gt; 설정 항목을 기준으로 Django 프로젝트가 사용하는 이용자 모델을 가져옵니다. 자세한 내용은 &lt;a href=&quot;http://blog.hannal.com/2015/06/start_with_django_webframework_08/&quot;&gt;8편 로그인, 로그아웃 하기&lt;/a&gt; 편을 참고하세요.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get_object_or_404()&lt;/code&gt; 함수는 지정한 모델과 검색 조건으로 데이터를 가져오려 해보고 없으면 HTTP 404 오류를 일으키는 함수입니다. 두 종류 인자를 필요로 하는데, 첫 번째 인자는 데이터를 찾고 가져올 대상 모델 클래스를 받고, 나머지 인자는 검색에 사용합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;get_object_or_404(User, username=username)&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; 모델 필드의 값이 뷰 함수에 인자로 전달된 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;과 같은 것을 찾는 내용입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;/user/hannal/&lt;/code&gt; URL로 접근하면 뷰 함수의 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; 인자의 값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;'hannal'&lt;/code&gt; 문자열이므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;get_object_or_404(User, username='hannal')&lt;/code&gt;을 실행합니다. 이 함수는 데이터 하나를 특정 지어 반한하므로 여러 데이터가 조건에 해당되선 안 됩니다. 데이터가 없는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.http&lt;/code&gt; 모듈에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Http404&lt;/code&gt; 예외 오류를 일으킵니다.&lt;/p&gt;

&lt;p&gt;데이터가 있는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;에 할당하고, 이 객체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;profile.html&lt;/code&gt; 템플릿에 템플릿 맥락 요소(context)로 전달하며, 템플릿 안에서 템플릿 변수로 사용할 이름은 &lt;code class=&quot;highlighter-rouge&quot;&gt;current_user&lt;/code&gt;입니다.&lt;/p&gt;

&lt;p&gt;이번엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;profile.html&lt;/code&gt; 템플릿 파일을 수정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'layout.html'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;님의&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;프로필&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;페이지&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;current_user.photo_set.all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;li&amp;gt;게시한&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;사진이&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;없습니다.&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endblock&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;눈여겨 볼 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;current_user.photo_set.all&lt;/code&gt;입니다. 이 부분은 Python 코드로 표현하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;current_user.photo_set.all()&lt;/code&gt;입니다. Django 템플릿 엔진은 Python의 함수나 클래스와 같이 호출 가능한(callable) 객체를 템플릿 안에서 소괄호를 쳐서 직접 호출하는 걸 허용하지 않습니다. 객체 이름이나 메서드 이름만 명시하면 Django가 대상의 자료형을 검사해서 호출 가능한 객체인 경우 대신 호출하여 수행합니다. 소괄호를 사용하지 못하므로 함수나 메서드에 인자를 전달하지도 못합니다. 인자를 전달하려면 Django 템플릿 필터나 태그를 직접 만들어 사용해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/10/10-profile_page_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;queryset-객체&quot;&gt;QuerySet 객체&lt;/h3&gt;

&lt;h4 id=&quot;연관-객체-참조-related-objects-reference&quot;&gt;연관 객체 참조 (related objects reference)&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;current_user.photo_set.all()&lt;/code&gt;는 접속한 프로필 페이지의 이용자(&lt;code class=&quot;highlighter-rouge&quot;&gt;current_user&lt;/code&gt;)가 소유한(own) 모든 사진 게시물을 가져오는 코드입니다. 하나씩 살펴 보겠습니다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;current_user&lt;/code&gt;는 뷰 함수에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; &lt;strong&gt;모델&lt;/strong&gt; 클래스로 데이터를 가져와 연결시켜(mapping) Python 인스턴스 객체로 생성한 것입니다. 그런데 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델은 우리가 앞서 만든 &lt;code class=&quot;highlighter-rouge&quot;&gt;photo&lt;/code&gt; 앱의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델이 &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt;로 연결되어 있습니다. 이용자 한 명이 사진을 여러 개 가지므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델이 1, &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델은 다수(n) 관계라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델 기준으로는 1:N(OneToMany) 관계입니다.&lt;/p&gt;

&lt;p&gt;이 관계가 중요한데요. Django는 모델이 관계(relationship)를 맺고 있으면 연결 당한 쪽에 &lt;strong&gt;연관 객체 참조 속성&lt;/strong&gt;이라는 특별한 속성을 만듭니다. 연결하는 쪽은 모델 필드로 연결하는 대상 모델을 가리키고 있지만, 연결 당하는 쪽은 Python 코드상으로는 알 도리가 없습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델을 놓고 보면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;user = models.ForeignKey(settings.AUTH_USER_MODEL)&lt;/code&gt; 모델 필드를 만들어서 연결하는 모델이 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델이라는 것이 드러나지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델엔 아무런 조치를 취하지 않으므로 Python 코드만으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델이 자신을 연결하는지는 알지 못합니다. 하지만 Django는 모델 관계를 파악하여 연결 당하는 쪽에 연결하는 모델에 대한 접근 경로를 객체 속성(attribute)으로 만들어 줍니다.&lt;/p&gt;

&lt;p&gt;일 대 다(&lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt;)나 다 대 다(&lt;code class=&quot;highlighter-rouge&quot;&gt;ManyToManyField&lt;/code&gt;) 관계는 연결 당하는 특정 데이터에 연결하는 쪽의 여러 데이터가 관계를 맺습니다. 이처럼 &lt;strong&gt;1&lt;/strong&gt;쪽에 &lt;strong&gt;N&lt;/strong&gt;으로 연결되는 경우, &lt;strong&gt;1&lt;/strong&gt;쪽에 N쪽 모델 이름을 참조하여 속성을 만듭니다. 이 속성은 따로 지정하지 않으면 N쪽 모델 이름을 소문자 Snake case 표기로 만들고 &lt;code class=&quot;highlighter-rouge&quot;&gt;_set&lt;/code&gt;을 덧붙인 이름을 갖습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델로 놓고 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델의 인스턴스 객체에 &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_set&lt;/code&gt; 속성이 만들어 집니다.&lt;/p&gt;

&lt;h4 id=&quot;queryset-객체-1&quot;&gt;QuerySet 객체&lt;/h4&gt;

&lt;p&gt;연관 객체 참조 속성은 Django 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;은 이름에서 드러나듯이 Query 집합(set)입니다. Django model manager는 크게 두 종류 객체를 반환하는데, 하나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체이고 다른 하나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체가 아닌 객체입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;엔 다음과 같은 특징이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Model manager의 API를 포함 (정확히는 QuerySet API를 manager가 상속 받아 사용)&lt;/li&gt;
  &lt;li&gt;꼬리에 꼬리를 무는 연산(evaluation). 일명 chaining 연산.
    &lt;ul&gt;
      &lt;li&gt;단 QuerySet(또는 model manager)의 메서드가 반환하는 객체가 QuerySet이어야 함.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;지연 평가 연산과 캐쉬 처리&lt;/li&gt;
  &lt;li&gt;순서열(&lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tuple&lt;/code&gt;) 연산 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 특성은 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;의 역할에 기인합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;은 사용자의 요청을 받아 질의(query)를 생성합니다. 이 요청이 데이터베이스에서 데이터를 가져와야만 하는 것이면 생성한 질의를 데이터베이스로 보냅니다. 그렇지 않으면 생성한 질의는 그대로 보관한 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체를 복제하여 새로 반환합니다. 이 경우 반환한 객체도 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체이므로 또 다시 model manager API를 이용해 요청을 보낼 수 있습니다. 이런 과정을 반복합니다. 데이터베이스에 질의를 보내 데이터를 가져오면 그 데이터를 보관해두며, 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체의 데이터를 사용하는 경우 보관된 데이터를 사용합니다. 몇 번을 접근하더라도 보관된 데이터를 그대로 재사용합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;지연 평가 연산 : 데이터베이스에 접근해야 할 때까지 질의를 보내지 않고 질의를 생성해 조합하며 쌓는 동작&lt;/li&gt;
  &lt;li&gt;캐쉬 처리 : 보관한 데이터를 재사용해 데이터에 접근할 때마다 데이터베이스에 질의를 요청하지 않음&lt;/li&gt;
  &lt;li&gt;chaining : &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체를 반환하는 경우, 그 객체를 이용해 요청을 이어나감&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우리가 앞서 만든 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델 클래스로 예를 들겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;qs = Photo.objects.filter(pk__in=(1, 2, 3, 4, ))  # 첫 번째 요청.
qs = qs.filter(description__contains='te')  # 두 번째 요청.
qs.count()  # 세 번째 요청.
qs.count()  # 네 번째 요청.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;총 네 번 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체의 메서드를 호출했습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;첫 번째 요청은 &lt;code class=&quot;highlighter-rouge&quot;&gt;pk&lt;/code&gt; 모델 필드(기본키, primary key)가 1, 2, 3, 4인 데이터를 가져오라는 질의를 만듭니다. SQL 질의문으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM &quot;photo_photo&quot; WHERE &quot;photo_photo&quot;.&quot;id&quot; IN (1, 2, 3, 4)&lt;/code&gt;을 생성한 채 일단 기다립니다.&lt;/li&gt;
  &lt;li&gt;두 번째 요청은 &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt; 모델 필드로 &lt;code class=&quot;highlighter-rouge&quot;&gt;te&lt;/code&gt; 문자열을 포함하는 데이터를 가져오라는 질의를 만듭니다. 기존 질의문을 조합한 만드므로 질의문은 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM &quot;photo_photo&quot; WHERE (&quot;photo_photo&quot;.&quot;id&quot; IN (1, 2, 3, 4) AND &quot;photo_photo&quot;.&quot;description&quot; LIKE %te% ESCAPE '\')&lt;/code&gt;가 됩니다. 여전히 데이터베이스에 질의를 보내지 않고 기다립니다.&lt;/li&gt;
  &lt;li&gt;세 번째 요청은 여태까지 누적한 탐색(lookup) 조건에 해당하는 모든 데이터의 개수를 가져오는 &lt;code class=&quot;highlighter-rouge&quot;&gt;count()&lt;/code&gt; 메서드입니다. 데이터베이스에 질의를 보내야만 확인 가능한 데이터입니다. 여태까지 만든 질의문을 비로소 데이터베이서에 요청합니다.&lt;/li&gt;
  &lt;li&gt;네 번째 요청도 &lt;code class=&quot;highlighter-rouge&quot;&gt;count()&lt;/code&gt; 메서드입니다. 이미 캐쉬된 데이터가 있어서 데이터베이스에 질의하지 않고 보관하고 있는 데이터에서 개수를 가져와 반환합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;count()&lt;/code&gt; 메서드는 개수를 숫자로 반환하며, 숫자는 정수형(&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;) 객체여서 더이상 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체의 특성을 사용하지 못합니다. 이렇게 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체를 반환하지 않는 model manager API는 다음과 같습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;메서드&lt;/th&gt;
      &lt;th&gt;반환하는 객체&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
      &lt;td&gt;조건에 해당하는 특정 데이터를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;first()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;에 보관된 데이터 중 첫 번째 데이터를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;last()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;에 보관된 데이터 중 마지막 데이터를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;earliest()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
      &lt;td&gt;인자로 전달해 지정한 모델 필드를 기준으로 가장 첫 번째 데이터를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;latest()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
      &lt;td&gt;인자로 전달해 지정한 모델 필드를 기준으로 가장 마지막 데이터를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;count()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; 객체&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;에 보관된 질의를 기준으로 개수를 가져오거나 보관된 데이터의 개수를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exists()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt; 객체&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;에 보관된 질의 또는 보관된 데이터를 기준으로 데이터가 존재하는 지 여부를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get_or_create()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
      &lt;td&gt;조건에 해당하는 특정 데이터를 가져오고 없으면 인자로 전달한 내용으로 데이터를 저장한 후 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;update_or_create()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;모델 클래스의 인스턴스 객체&lt;/td&gt;
      &lt;td&gt;특정 데이터를 수정하고, 그 데이터가 없으면 인자로 전달한 내용으로 데이터를 저장한 후 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이외에도 몇 가지 더 있는데 강좌 진행 중 사용하면 자세히 다루겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체를 반환하는 메서드도 살펴 보겠습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;메서드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;all()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;전체 데이터를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;인자로 전달한 조건에 해당하는 데이터를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exclude()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;인자로 전달한 조건에 해당하지 않는 데이터를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;order_by()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;지정한 모델 필드로 정렬하여 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reverse()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;에 저장된 데이터를 뒤집어서 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;select_related()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;N:1(ManyToOne, &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeginKey&lt;/code&gt;)으로 연결된 데이터를 함께 가져온다. 데이터베이스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt; 처리.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prefetch_related()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;N:N(&lt;code class=&quot;highlighter-rouge&quot;&gt;ManyToManyField&lt;/code&gt;)으로 연결된 함께 데이터를 가져온다. 데이터베이스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt; 처리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;using()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;지정한 데이터베이스에서 데이터를 가져온다. 기본은 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;로 지정된 데이터베이스.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이번 편에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;all()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;order_by()&lt;/code&gt;을 다루며, 다른 메서드는 사용할 때 자세히 다루겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;filter-메서드&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt; 메서드&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;photo_set&lt;/code&gt;을 설명하려고 먼 길 다녀왔네요. &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_set&lt;/code&gt; 속성은 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체입니다. 그냥 객체는 아니고 조건이 걸려있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_set&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델의 인스턴스 객체에서 사용하는데, 이 말은 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델로 가져온 이용자 데이터를 담고 있는 인스턴스 객체, 즉 특정 이용자에 연결된 &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_set&lt;/code&gt;입니다. 이를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델로 풀어쓰면 다음 코드와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;current_user = User.objects.get(username='hannal')
photos = Photo.objects.filter(user=current_user)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;'hannal'&lt;/code&gt;인 이용자를 &lt;code class=&quot;highlighter-rouge&quot;&gt;current_user&lt;/code&gt;에 할당하고, 소유주(&lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;)가 &lt;code class=&quot;highlighter-rouge&quot;&gt;current_user&lt;/code&gt;인 모든 사진 게시물(&lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt;)을 찾아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;photos&lt;/code&gt;에 할당합니다. 간단히 말해 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;'hannal'&lt;/code&gt;인 이용자의 모든 사진 게시물을 가져오는 것이지요.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt; 메서드는 검색(lookup) 조건을 &lt;a href=&quot;http://blog.hannal.com/2015/03/keyword-only-arguments_and_annotations_for_python3/&quot;&gt;키워드 인자&lt;/a&gt;를 받습니다. 인자 이름(key)는 모델 필드의 탐색 방식이고 전달하는 객체(value)는 검색할 값입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;filter(description='hannal')&lt;/code&gt;로 키워드 인자를 전달하면 모델 필드 &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt;의 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;hannal&lt;/code&gt;과 일치하는 데이터를 찾습니다.&lt;/p&gt;

&lt;p&gt;하지만 검색 방식이 이렇게 단순하진 않습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;hannal&lt;/code&gt; 문자열과 일치하는 게 아니라 &lt;code class=&quot;highlighter-rouge&quot;&gt;hannal&lt;/code&gt; 문자열을 포함한다든지 지정한 숫자보다 큰 값을 갖는 데이터를 찾는 식으로 다양한 검색 방식이 필요한데, Django는 모델 필드 이름에 &lt;code class=&quot;highlighter-rouge&quot;&gt;__탐색키워드&lt;/code&gt;를 덧붙인 인자 이름으로 이러한 검색을 지원합니다. 예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;hannal&lt;/code&gt; 문자열을 포함하는 데이터를 찾는 조건이라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter(description__contains='hannal')&lt;/code&gt;와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;__contains&lt;/code&gt;를 모델 필드인 &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt;에 덧붙입니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;탐색 키워드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contains&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;지정한 문자열을 포함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;리스트나 튜플에 담긴 값들에 해당&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;지정한 값을 &lt;strong&gt;초과&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gte&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;지정한 값 &lt;strong&gt;이상&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;지정한 값 &lt;strong&gt;미만&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lte&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;지정한 값 &lt;strong&gt;이하&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;year&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;지정한 연도. &lt;code class=&quot;highlighter-rouge&quot;&gt;DateField&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTimeField&lt;/code&gt; 필드에 한함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;month&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;지정한 월. &lt;code class=&quot;highlighter-rouge&quot;&gt;DateField&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTimeField&lt;/code&gt; 필드에 한함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;day&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;지정한 일. &lt;code class=&quot;highlighter-rouge&quot;&gt;DateField&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTimeField&lt;/code&gt; 필드에 한함&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;탐색 키워드 역시 자주 쓰는 것만 소개하였으며, 이외 탐색 키워드는 사용할 때 자세히 다루겠습니다.&lt;/p&gt;

&lt;p&gt;여러 탐색 조건을 지정해도 되는데, 함수에 키워드 인자 여러 개를 넣는 방법과 동일합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Photo.objects.filter(user=current_user, description__contains='te')
Photo.objects.filter(user=current_user).filter(description__contains='te')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;두 코드는 동일한 역할을 합니다. 이 코드는 사진 게시물의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;current_user&lt;/code&gt;이고(AND), &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;'te'&lt;/code&gt; 문자열이 포함된 모든 데이터를 가져옵니다. 쉼표로 구분해 여러 키워드 인자를 전달하든 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt; 메서드를 체인으로 반복해서 부르든 동일하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt; 조합으로 데이터를 찾습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;OR&lt;/code&gt; 조합으로 찾으려면 별도 조치를 취해야 하는데, 나중에 다루겠습니다.&lt;/p&gt;

&lt;p&gt;정리하면, &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델 클래스의 인스턴스 객체에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_set&lt;/code&gt; 속성은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델 클래스와 연결되어 만들어졌으며, &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체로 만들어졌는데 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_set&lt;/code&gt; 속성이 속한 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 인스턴스 객체의 데이터를 기반으로 합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_set&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; 객체이므로 체인 연결하듯이 후속 &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;의 메서드를 사용할 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;current_user.photo_set.all()&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;all()&lt;/code&gt; 메서드를 쓴 것입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo.objects.filter(user=current_user).all()&lt;/code&gt;과 동일한 역할을 합니다.&lt;/p&gt;

&lt;h3 id=&quot;사진-정렬하여-나열하기&quot;&gt;사진 정렬하여 나열하기&lt;/h3&gt;

&lt;p&gt;프로필 페이지에서 사진은 저장된 등록된 순서대로 나열됩니다. 별도로 지정하지 않으면 기본키(primary key)를 기준으로 하여 순서대로 나열되기 때문입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt;으로 가져오는 데이터를 정렬하는 방법은 크게 두 가지입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;order_by()&lt;/code&gt; 메서드로 정렬할 모델 필드 이름 지정&lt;/li&gt;
  &lt;li&gt;모델에 정렬할 기본(default) 기준을 지정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;order_by()&lt;/code&gt;는 &lt;a href=&quot;http://blog.hannal.com/2015/03/keyword-only-arguments_and_annotations_for_python3/&quot;&gt;위치 인자&lt;/a&gt;로 정렬 기준으로 삼을 모델 필드 이름을 문자열로 받습니다. 여러 개를 지정하면 정렬 우선순위에 따라 정렬합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Photo.objects.order_by('created_at')  # created_at 순서대로.
Photo.objects.order_by('-created_at')  # created_at 역순으로.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;첫 번째 구문은 전체 사진 게시물을 &lt;code class=&quot;highlighter-rouge&quot;&gt;created_at&lt;/code&gt; 모델 필드 기준으로 하여 순서대로 가져옵니다. 역순으로 가져오려면 모델 필드 이름 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;를 덧붙이면 되며 두 번째 구문이 &lt;code class=&quot;highlighter-rouge&quot;&gt;created_at&lt;/code&gt; 역순으로 정렬하는 것입니다. 만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;created_at&lt;/code&gt;, 즉 생성일시가 완전히 동일한 경우에는 기본키 역순으로 정렬하도록 하려면 인자를 추가하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Photo.objects.order_by('-created_at', `-pk`)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;무작위 순서로 정렬하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo.objects.order_by('?')&lt;/code&gt;처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;'?'&lt;/code&gt;를 인자로 전달하면 되는데, 주의할 점은 상당히 느립니다. 되도록이면 쓰지 않길 권합니다.&lt;/p&gt;

&lt;p&gt;모델에 정렬할 기본 기준을 정하려면 모델에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Meta&lt;/code&gt; 클래스를 만들고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Meta&lt;/code&gt; 클래스 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ordering&lt;/code&gt; 속성을 만들어 정렬할 모델 필드 이름을 나열하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Photo(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL)
    image_file = models.ImageField(upload_to='%Y/%m/%d')
    filtered_image_file = models.ImageField(
        null=True,
        upload_to='static_files/uploaded/%Y/%m/%d'
    )
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)

    class Meta:
        ordering = ('-created_at', '-pk', )

    # 후략
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;나중에 자세히 다루겠지만, 템플릿에서는 함수 호출하듯이 소괄호(&lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;)&lt;/code&gt;)를 사용하여 객체 호출을 직접 하지 못합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;profile.html&lt;/code&gt; 템플릿 파일에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;current_user.photo_set.all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;와 같은 구문을 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;current_user.photo_set.order_by('-created_at',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'-pk')&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;와 같이 쓰지 못합니다. 그래서 정렬하려면 뷰 함수에서 정렬한 데이터를 별도 변수에 할당하여 이 변수를 템플릿에 전달해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# photo/views.py

def profile(request, username):
    User = get_user_model()
    user = get_object_or_404(User, username=username)
    photos = user.photo_set.order_by('-created_at', '-pk')

    return render(request, 'profile.html', {
        'current_user': user,
        'photos': photos,
    })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;photo/templates/profile.html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;photos&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;img&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;li&amp;gt;게시한&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;사진이&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;없습니다.&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;또는 모델에서 정렬 기준을 정의하여 따로 &lt;code class=&quot;highlighter-rouge&quot;&gt;order_by()&lt;/code&gt; 메서드를 쓰지 않더라도 기본으로 지정한 기준대로 정렬되도록 처리해도 됩니다.&lt;/p&gt;

&lt;p&gt;이 강좌에서는 명시한 정렬 기준이 코드에 드러나는 차원에서 뷰 함수에서 정렬하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;강좌 10편을 마칩니다. 정말 오랜만에 연재했네요. 이제 몇 회만 더 연재하면 강좌 1부가 끝납니다. 강좌 분량이 많아지면서 처음 계획을 바꿨습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1부 : Django 전반을 두루 겪기&lt;/li&gt;
  &lt;li&gt;2부 : 1부에서 다루지 않은 내용을 더 자세히 다루기&lt;/li&gt;
  &lt;li&gt;3부 : 앞단 만들고 배포하기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;올해 안에 1부를 마치도록 노력하겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/10-fullsource/pystagram&quot;&gt;10편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://blog.hannal.com/2014/11/start_with_django_webframework_05/&quot;&gt;5편 url에 view 함수 연결해서 사진 출력하기&lt;/a&gt; 부록에 변화한 &lt;code class=&quot;highlighter-rouge&quot;&gt;urlpatterns&lt;/code&gt;에 대한 내용을 2015년 10월에 추가하였습니다. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Django 1.8판부터 템플릿 설정 정책이 바뀌었으며, 이에 대한 내용은 &lt;a href=&quot;http://blog.hannal.com/2014/9/start_with_django_webframework_03/&quot;&gt;3편 Photo 앱과 모델 만들기&lt;/a&gt; 부록으로 2015년 10월에 추가하였습니다. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 02 Oct 2015 12:45:00 +0900</pubDate>
        <link>http://localhost:4000//2015/10/start_with_django_webframework_10/</link>
        <guid isPermaLink="true">http://localhost:4000//2015/10/start_with_django_webframework_10/</guid>
        
        <category>django</category>
        
        <category>queryset</category>
        
        <category>ordering</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
      <item>
        <title>Celery의 Subtask 기능을 이용하여 Chord와 Chain로 작업 분산해서 다루기</title>
        <description>&lt;h3 id=&quot;웹페이지-긁어오기&quot;&gt;웹페이지 긁어오기&lt;/h3&gt;

&lt;p&gt;Python으로 웹페이지 열 곳을 긁어와서 하나로 합쳐 보겠습니다. Python HTTP library인 &lt;a href=&quot;http://docs.python-requests.org/en/latest/&quot;&gt;requests&lt;/a&gt;를 쓰면 아주 간단합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import requests

def fetch_page_by_url(url):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text

merged_text = []
for i in range(0, 10):
    result = fetch_page_by_url(
        'http://localhost:8000/{}.html'.format(i)
    )

    if result is not None:
        merged_text.append(result)

do_something(merged_text.join(''))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;celery를-이용해-비동기-방식으로-긁어오기&quot;&gt;Celery를 이용해 비동기 방식으로 긁어오기&lt;/h3&gt;

&lt;p&gt;차례대로 긁어오니 열 개 페이지를 모두 가져오기 전까지는 결과를(&lt;code class=&quot;highlighter-rouge&quot;&gt;do_something(merged_text.join(''))&lt;/code&gt;) 확인하지 못합니다. &lt;a href=&quot;https://docs.python.org/3/library/multiprocessing.html&quot;&gt;multiprocessing&lt;/a&gt;을 이용해 여러 프로세스로 동시성을 확보해도 되지만, 분산 작업 큐 시스템인 &lt;a href=&quot;http://celery.readthedocs.org/en/latest/&quot;&gt;Celery&lt;/a&gt;로 쉽고 간편하게 비동기 처리하기도 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from celery import Celery

app = Celery(__name__)

@app.task
def fetch_page_by_url(url):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text

merged_text = []
for i in range(0, 10):
    result = fetch_page_by_url.apply_async(
        'http://localhost:8000/{}.html'.format(i)
    )

    if result is not None:
        merged_text.append(result)

do_something(merged_text.join(''))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 코드에는 문제가 있습니다. Celery 작업 수행 객체로 장식된(decorated) &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url&lt;/code&gt; 객체의 &lt;code class=&quot;highlighter-rouge&quot;&gt;apply_async()&lt;/code&gt; 메서드를&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 이용하여 &lt;strong&gt;비동기&lt;/strong&gt;로 작업을 수행하는데, 이 메서드가 반환하는 객체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;res.text&lt;/code&gt;가 아니라 Celery 결과 작업을 다루는 객체입니다. 게다가 비동기로 작업을 수행하고 바로 프로그램 수행 제어권을 호출자에게 반환하므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url.apply_async(...)&lt;/code&gt; 호출이 되자마자 바로 다음 구문을 수행하는데, 웹 페이지를 가져오는 작업이 끝났는지 여부는 알지 못 합니다.&lt;/p&gt;

&lt;p&gt;이 문제를 피하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt; 메서드를 이용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    if result.get() is not None:
        merged_text.append(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt; 메서드는 비동기로 수행하는 작업 객체(&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url()&lt;/code&gt;)가 작업을 마치고 값을 반환하기를 &lt;strong&gt;동기식&lt;/strong&gt;으로 기다려서 반환합니다. 어?! 이렇게 할 거라면 굳이 Celery를 쓸 필요가 없지요. Celery에게 여러 작업을 맡겨서 비동기로 처리하고, 비동기로 처리한 결과를 받아다 뭔가를 하려면 다른 방법을 써야 합니다. 이 글에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;chain&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;chord&lt;/code&gt;을 사용하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;chain-기능&quot;&gt;chain 기능&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chain&lt;/code&gt; 기능은 이름에서 전해지듯이 작업을 체인처럼 줄줄이 수행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from celery import chain

@app.task
def fetch_page_by_url(url, append_text=None):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        if append_text is None
            return res.text
        else:
            res.text + append_text

tasks = []
for i in range(0, 10):
    tasks.append(
        fetch_page_by_url.subtask(
            'http://localhost:8000/{}.html'.format(i)
        )
    )

result = chain(tasks)()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;subtask()&lt;/code&gt;는 Celery 작업 객체를 하위 작업으로 수행하는 메서드입니다&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url&lt;/code&gt; 객체를 하위 작업으로 수행하는 작업 열 개를 담아 &lt;code class=&quot;highlighter-rouge&quot;&gt;chain()&lt;/code&gt;에 전달하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;chain()&lt;/code&gt;은 순서대로 작업을 수행합니다. 각 작업이 반환하는 객체는 다음 작업자에게 인자로 전달합니다. 첫 번째 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url()&lt;/code&gt; 함수가 반환하는 웹페이지 문자열을 두 번째 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url()&lt;/code&gt;는 두 번째 인자로 받는 것이죠. 그래서 두 번째 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url()&lt;/code&gt;부터는 앞 작업자가 반환하는 결과를 넘겨 받는 것이지요.&lt;/p&gt;

&lt;p&gt;다른 예를 들어 보겠습니다. 숫자 두 개를 인자로 전달하면 두 숫자를 더하는 작업자를 쓰겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;첫 번째 셈은 1 + 1 입니다.&lt;/li&gt;
  &lt;li&gt;두 번째 셈은 첫 번째 덧셈 결과를 받아서 10을 더합니다.&lt;/li&gt;
  &lt;li&gt;세 번째 셈은 두 번째 덧셈 결과를 받아서 100을 더합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이걸 &lt;code class=&quot;highlighter-rouge&quot;&gt;chain()&lt;/code&gt;을 이용하면 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;do_chain_tasks = chain(add.s(1, 1), add.s(10), add.s(100))
do_chain_tasks()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chain()&lt;/code&gt;도 바로 작업을 수행하는 게 아니라 Celery 작업 객체를 반환하며&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, 이 작업 객체를 실행해야 합니다. 바로 위 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;chain(...)()&lt;/code&gt;라는 구문을 나눈 것입니다.&lt;/p&gt;

&lt;p&gt;재밌는 점은 Celery는 비트 연산으로도 &lt;code class=&quot;highlighter-rouge&quot;&gt;chain()&lt;/code&gt; 작업 객체를 만들어 준다는 점입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(
    fetch_page_by_url.s('http://localhost:8000/0.html') |
    fetch_page_by_url.s('http://localhost:8000/1.html') |
    fetch_page_by_url.s('http://localhost:8000/2.html') |
    fetch_page_by_url.s('http://localhost:8000/3.html')
).apply_async()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;참 꼼꼼하게 만들어 놨어요. :)&lt;/p&gt;

&lt;h3 id=&quot;chord-기능&quot;&gt;chord 기능&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chain()&lt;/code&gt;을 이용해 비동기로 열 개 작업을 수행하고 그 결과를 합쳤는데, 아쉬운 마음이 듭니다. 전체 작업 자체는 분명 비동기로 시작한 게 맞지만, 웹페이지를 긁어오는 작업도 동시에 분산해서 처리하면 더 효율이 좋을 겁니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;chord()&lt;/code&gt;는 하위 작업을 동시에 수행하고, 각 작업자가 반환하는 값을 callback 실행 객체로 전달해줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from collections import MutableSequence
from celery import chord

@app.task
def fetch_page_by_url(url):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text

@app.task
def merge_text(texts):
    assert(isinstance(texts, MutableSequence))
    return texts.join('')

tasks = []
for i in range(0, 10):
    tasks.append(
        fetch_page_by_url.s('http://localhost:8000/{}.html'.format(i))
    )

do_chain_tasks = chord(tasks)
do_chain_tasks(merge_text.s())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url()&lt;/code&gt; 함수가 원래대로(?) 돌아왔고, &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_text()&lt;/code&gt; 함수가 새로 추가됐습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_text()&lt;/code&gt;는 전달받은 인자 &lt;code class=&quot;highlighter-rouge&quot;&gt;texts&lt;/code&gt;를 합치는 일을 하는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url()&lt;/code&gt;가 반환하는 문자열을 담은 리스트형(&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;) 객체입니다. 맨 처음에 비동기로 작성한 코드에서 웹페이지 문자열을 리스트로 담은 &lt;code class=&quot;highlighter-rouge&quot;&gt;merged_text&lt;/code&gt;와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chord()&lt;/code&gt;는 각 작업자(&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url()&lt;/code&gt;)가 반환하는 값을 리스트형으로 모아서 callback 객체에게 인자로 전달합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;chord()&lt;/code&gt;로 만든 Celery 작업 객체로 callback 객체를 전달할 때 인자를 지정하지 않아도 됩니다. 알아서 넣어 줍니다.&lt;/p&gt;

&lt;p&gt;근데 이 코드엔 사소하다면 사소하고 심각하다면 심각한 문제가 있습니다. 작업들을 비동기로 수행하다보니 웹페이지 문자열이 우리가 원하는 순서대로 담겨져 &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_text()&lt;/code&gt;로 전달된다는 보장이 없습니다. 작업이 먼저 끝나는 순서대로 결과가 담기니 0 - 1 - 2 - 3 … 순서가 될 지 9 - 4 - 7 - 1 순서가 될 지는 아무도 모릅니다.&lt;/p&gt;

&lt;p&gt;여러 해결책이 있겠지만, 각 작업자마다 순번을 주고, &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_text()&lt;/code&gt;는 이 순번대로 문자열을 합치면 되겠네요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@app.task
def fetch_page_by_url(url, num):
    res = requests.get(url)

    if int(res.status_code / 100) == 2:
        return res.text, num

@app.task
def merge_text(texts):
    assert(isinstance(texts, MutableSequence))
    texts.sort(key=lambda x: x[1])
    return texts.join('')

tasks = []
for i in range(0, 10):
    tasks.append(
        fetch_page_by_url.s(
            'http://localhost:8000/{}.html'.format(i), i
        )
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;각 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url()&lt;/code&gt;에 두 번째 인자로 순번(&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;)을 전달하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url()&lt;/code&gt;는 받은 순번을 웹페이지 문자열과 함께 그대로 반환합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;merge_text()&lt;/code&gt;가 전달받은 &lt;code class=&quot;highlighter-rouge&quot;&gt;texts&lt;/code&gt;엔 각 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch_page_by_url()&lt;/code&gt; 결과가 &lt;code class=&quot;highlighter-rouge&quot;&gt;[(문자열, 0), (문자열, 3), ...]&lt;/code&gt; 형태로 담깁니다. 그래서 각 항목의 두 번째(&lt;code class=&quot;highlighter-rouge&quot;&gt;[1]&lt;/code&gt;) 값으로 정렬하고 나서 한 문자열로 합친 것입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://celery.readthedocs.org/en/latest/userguide/canvas.html#the-primitives&quot;&gt;Canvas: Designing Workflows : The primitives&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://celery.readthedocs.org/en/latest/userguide/tasks.html#avoid-launching-synchronous-subtasks&quot;&gt;Tasks : Avoid launching synchronous subtasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;대개는 &lt;code class=&quot;highlighter-rouge&quot;&gt;delay()&lt;/code&gt;라는 메서드로 줄여서 수행합니다. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;대개는 &lt;code class=&quot;highlighter-rouge&quot;&gt;s()&lt;/code&gt;로 줄인 메서드 이름을 씁니다. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chain&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;chord&lt;/code&gt;는 함수처럼 생겼지만 클래스입니다. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 08 Jul 2015 17:25:00 +0900</pubDate>
        <link>http://localhost:4000//2015/07/celery_chord_and_chain/</link>
        <guid isPermaLink="true">http://localhost:4000//2015/07/celery_chord_and_chain/</guid>
        
        <category>python</category>
        
        <category>celery</category>
        
        <category>asynchronous</category>
        
        <category>distributed</category>
        
        
        <category>devlife</category>
        
      </item>
    
      <item>
        <title>9. 로그인한 이용자만 사진 게시물 게시하기</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;마지막 갱신일시 : 2015년 6월 28일 1시 20분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;지난 편에서는 Django 이용자 인증 체계을 알아봤으니 이번 편에서는 인증 기능을 이용하여 로그인한 이용자만 사진 게시물을 게시하는 기능을 만들어 보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-사진-게시물에-이용자-정보-연결&quot;&gt;1. 사진 게시물에 이용자 정보 연결&lt;/h3&gt;

&lt;h4 id=&quot;1-기본키-primary-key&quot;&gt;(1) 기본키 (Primary Key)&lt;/h4&gt;

&lt;p&gt;로그인한 이용자만 사진 게시물을 게시한다면 각 사진 게시물엔 사진을 게시한 이용자 정보를 담아야 합니다. 누가 게시한 사진인지 알아야 하니까요. 이용자 ID(&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;)을 문자열로 담아도 되지만, 대개는 고유하며 변하지 않을 정보인 기본키(Primary Key)를 담습니다.&lt;/p&gt;

&lt;p&gt;이용자가 따로 기본키 역할을 하는 모델 필드를 지정하지 않으면 Django는 관례대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;라는 모델 필드를 알아서 만들고 이를 기본키로 사용합니다. 사진 모델인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt;로 사진 게시물 데이터를 &lt;code class=&quot;highlighter-rouge&quot;&gt;photo01&lt;/code&gt;이라는 인스턴스 객체로 할당하면 이 객체엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;라는 멤버 변수가 속성으로 존재하고 이 속성에 정수(&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;) 값이 할당되어 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; photo01 = Photo.objects.last()
&amp;gt;&amp;gt;&amp;gt; print(photo01.id)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;모델의 인스턴스 객체엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;pk&lt;/code&gt; 속성도 존재하는데, 이 속성은 기본키를 가리키고 있습니다. 이용자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; 모델 필드를 기본키로 하지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;uuid&lt;/code&gt;라는 모델 필드를 만들어 이 필드를 기본키로 지정하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;pk&lt;/code&gt;는 이 모델 필드를 가리킵니다. 우리는 각 모델의 기본키로 설정된 모델 필드의 이름이 무엇인지 신경쓰지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;pk&lt;/code&gt; 속성을 사용하면 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;2-모델-관계-필드-relationship-fields&quot;&gt;(2) 모델 관계 필드 (relationship fields)&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델로 데이터베이스에 저장할 데이터에 이용자 모델의 기본키 값을 저장하려면 다음과 같이 하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Photo(models.Model):
    user_id = models.IntegerField()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;그런 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델로 데이터를 저장하는 과정에서 이용자의 기본키 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;에 할당하면 됩니다. 각 게시물을 게시한 이용자가 누구인지 아니까 각 사진 게시물 정보를 가져오면서 이용자 정보도 함께 가져오면 좋겠군요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.contrib.auth import get_user_model
User = get_user_model()

class Photo(models.Model):
    # 중략
    def get_user(self):
        return User.objects.get(pk=self.user_id)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 코드들엔 문제가 있습니다. 모델의 기본키 모델 필드가 &lt;code class=&quot;highlighter-rouge&quot;&gt;IntegerField&lt;/code&gt;가 아닌 경우에 제대로 대응하지 못하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;get_user()&lt;/code&gt; 메서드를 호출할 때마다 매번 이용자 모델에서 이용자 데이터를 탐색해 반환하며, 이용자 모델과 연결하는 모델마다 매번 저런 구현을 중복 적용해야 합니다. 이런 문제들에 대응하는 구현체를 만들어야 하는데, Django는 &lt;a href=&quot;https://docs.djangoproject.com/en/1.8/ref/models/fields/#module-django.db.models.fields.related&quot;&gt;관계 모델 필드&lt;/a&gt;로 제공합니다. 총 세 종류입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt; : 1 대 다(1 to n) 관계&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OneToOneField&lt;/code&gt; : 1 대 1 관계&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ManyToManyField&lt;/code&gt; : 다 대 다(n to n) 관계&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이용자와 사진 게시물 관계로 세 관계 필드를 살펴 보겠습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;OneToOneField&lt;/code&gt;는 이용자는 오직 사진 게시물을 하나만 게시하고 소유합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;ManyToManyField&lt;/code&gt;는 이용자가 사진 게시물을 여러 개 올릴 수 있는데, 각 사진 게시물을 여러 이용자가 소유하는 게 가능합니다. 1번 사진을 Hannal 이용자 뿐만 아니라 Kay, Yuna 이용자가 소유하는 관계가 맺어지므로 소유한 누구나 사진 게시물을 변경하거나 지울 수 있습니다. 마지막으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt;는 한 이용자가 여러 사진 게시물을 게시하고 소유하는 관계입니다. 우리에게 필요한 모델 관계군요. &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt;에 대한 건 본 편 “2. &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt; 모델 필드”를 참고하시고, 연결부터 해보겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;3-photo-모델에-이용자-기본키-정보-연결하기&quot;&gt;(3) &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델에 이용자 기본키 정보 연결하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.conf import settings

class Photo(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL)
    # 후략
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt; 모델 필드(클래스)는 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.db.models&lt;/code&gt; 모듈에 있어서 다른 모델 필드처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;models&lt;/code&gt; 객체에서 접근하여 사용하면 됩니다. 첫 번째 인자로 관계 지을 모델을 모델 객체나 경로를 문자열로 전달합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;settings&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTH_USER_MODEL&lt;/code&gt; 설정 항목은 현재 프로젝트에서 사용하는 인증용 이용자 모델이 위치한 경로를 문자열로 지정하고 있습니다. &lt;a href=&quot;http://blog.hannal.com/2015/06/start_with_django_webframework_08/&quot;&gt;8. 로그인, 로그아웃 하기&lt;/a&gt;편에서 이에 대한 내용을 참조하세요.&lt;/p&gt;

&lt;h5 id=&quot;마이그레이션-수행&quot;&gt;마이그레이션 수행&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델이 변경됐으니 데이터베이스에 반영해야 합니다. 마이그레이션을 수행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python manage.py makemigrations photo
You are trying to add a non-nullable field 'user' to photo without a default;
we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows)
 2) Quit, and let me add a default in models.py
Select an option:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;긴 영어 문장이 나오며 뭔가를 물어 보는데 당황하지 말고 내용을 잘 살펴 보세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;당신은 Null(&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;)을 허용하지 않는(non-nullable) &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;라는 필드를 추가하려 하는데, 값이 주어지지 않는 경우에 기본으로 저장될 기본값(default)이 없다.&lt;/li&gt;
  &lt;li&gt;데이터베이스가 기존에 저장된 데이터(populate existing rows)에 Null 외 값을 필요로 해서 우린(Django) 이 작업을 바로 수행하지 못한다.&lt;/li&gt;
  &lt;li&gt;그러니 뭔가 조치를 취해달라.
    &lt;ol&gt;
      &lt;li&gt;이 자리에서 기본값을 제공해주든&lt;/li&gt;
      &lt;li&gt;마이그레이션 수행 과정에서 빠져 나간 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;에 기본값 지정 인자(&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;)를 추가해달라.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그 자리에서 기본값을 제공해줄테니 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;을 입력합니다. Django가 뭔가를 요구하네요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Please enter the default value now, as valid Python
The datetime module is available, so you can do e.g. datetime.date.today()
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;기본값으로 유효한 Python의 객체를 입력하라는 말입니다. 일단 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;을 입력합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Migrations for 'photo':
  0006_photo_user.py:
    - Add field user to photo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이제야 마이그레이션 수행에 필요한 마이그레이션 작업 파일이 만들어 졌습니다. 두 번째 입력한 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;은 이용자 모델의 기본키 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;을 뜻합니다. 기존에 저장한 사진 게시물의 이용자를 기본키 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;인 이용자로 지정한 것입니다. 만약, 기존에 소유자가 없는 사진 게시물을 위해 별도 이용자를 만들어서 연결하고자 한다면, 그 이용자를 만들어서 그 이용자의 기본키 숫자값을 지정하면 됩니다.&lt;/p&gt;

&lt;p&gt;왜 기본키 값을 넣는지 첫 번째 이유는 앞서 설명을 하였고, 두 번째 이유는 “(2) ForeignKey 모델 필드”에서 설명하겠습니다.&lt;/p&gt;

&lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;makemigrations&lt;/code&gt; 명령어로 만든 마이그레이션 작업 내용을 데이터베이스에 반영합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python manage.py migrate photo
Operations to perform:
  Apply all migrations: photo
Running migrations:
  Applying photo.0006_photo_user... OK
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2-로그인한-이용자만-사진-게시물-게시하기&quot;&gt;2. 로그인한 이용자만 사진 게시물 게시하기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델에 이용자 모델 연결을 마쳤으니 이번엔 사진 게시물을 저장하는 과정에 로그인한 이용자 정보를 적용하겠습니다. 간단히 말해서 로그인한 이용자만 사진 게시물을 게시하는 것이지요.&lt;/p&gt;

&lt;h4 id=&quot;1-현재-이용자를-사진-게시물에-적용&quot;&gt;(1) 현재 이용자를 사진 게시물에 적용&lt;/h4&gt;

&lt;p&gt;현재 웹 서비스에 연결된(requested) 접속 정보는 &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; 객체에 담겨 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;는 뷰(view) 함수가 첫 번째 인자로 전달받는 객체입니다. 개별 사진을 보는 &lt;code class=&quot;highlighter-rouge&quot;&gt;single_photo&lt;/code&gt; 뷰 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;def single_photo(request, photo_id):&lt;/code&gt;와 같이, 사진 게시물을 새로 저장하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo&lt;/code&gt; 뷰 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;def new_photo(request):&lt;/code&gt;와 같이 첫 번째 인자로 &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;를 전달 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reuqest&lt;/code&gt; 객체엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 속성이 존재하는데, 이 속성은 접속한 이용자에 정보가 담겨 있습니다. 로그인한 이용자라면 이용자 모델 클래스로 생성한 인스턴스 객체가, 로그인하지 않은 이용자라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;AnonymousUser&lt;/code&gt; 모델 클래스로 생성한 인스턴스 객체가 할당됩니다. 먼저 코드부터 작성해 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def new_photo(request):
    if request.method == &quot;GET&quot;:
        edit_form = PhotoEditForm()
    elif request.method == &quot;POST&quot;:
        edit_form = PhotoEditForm(request.POST, request.FILES)

        if edit_form.is_valid():
            new_photo = edit_form.save(commit=False)
            new_photo.user = request.user
            new_photo.save()

            return redirect(new_photo.get_absolute_url())

    # 후략
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;한 줄은 조금 바뀌었고, 두 줄이 추가됐습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if edit_form.is_valid():
    new_photo = edit_form.save(commit=False)
    new_photo.user = request.user
    new_photo.save()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;두 번째 줄 &lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo = edit_form.save(commit=False)&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;edit_form&lt;/code&gt; 객체는 사진 게시물 생성과 관련된 폼(Form)인 &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoEditForm&lt;/code&gt; 폼 클래스입니다. 첫 번째 줄에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;is_valid()&lt;/code&gt;로 웹에서 전달받은 자료를 검증한 그 객체입니다. 이 객체가 모델 폼인 경우, 그러니까 &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelForm&lt;/code&gt; 클래스를 상속받아 만든 폼인 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; 인스턴스 메서드를 포함하고 있는데, 이 메서드는 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; 메서드와 동일한 역할을 합니다. 데이터를 모델에 연결된 데이터베이스 테이블에 저장하는 것이지요. 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; 메서드와 마찬가지로 저장한 내용이 반영된 모델의 인스턴스 객체를 반환합니다. 즉, &lt;code class=&quot;highlighter-rouge&quot;&gt;edit_form.save()&lt;/code&gt;로부터 반환받은 객체를 할당한 &lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo&lt;/code&gt;는 폼과 관련된 객체가 아니라 &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoEditForm&lt;/code&gt; 모델 폼 클래스에 연결되어 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델로 생성한 인스턴스 객체입니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; 메서드에 인자로 전달한 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;은 실제로 데이터베이스에 반영할 것인지 여부를 정합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;를 전달하면 바로 데이터베이스에 저장하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;라고 하면 모델 클래스로 생성한 인스턴스 객체만 반영하고 데이터베이스에 실제로 반영하진 않습니다. 따로 반영 여부를 정해주지 않으면 기본값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;이어서 바로 데이터베이스에 반영합니다. 데이터베이스에 저장하지 않을 거면서 뭐하러 &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; 메서드를 호출했으며, &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; 메서드엔 실제로 반영할 것인지 여부를 정하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt; 인자가 필요한 이유는 무엇일까요? 답은 그 바로 다음에 나오는 두 줄에 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo.user = request.user&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo&lt;/code&gt; 객체의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 속성에 현재 로그인한 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.user&lt;/code&gt; 속성을 할당하는 것입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoEditForm&lt;/code&gt; 폼 클래스는 웹에서 폼 양식 자료가 담긴 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.POST&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.FILES&lt;/code&gt;만 전달 받았지, 현재 이용자 정보가 담긴 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.user&lt;/code&gt;를 전달받은 적이 없습니다. 그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; 메서드가 반환한 &lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo&lt;/code&gt; 인스턴스 객체의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;에는 이용자 정보가 없습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델에 &lt;code class=&quot;highlighter-rouge&quot;&gt;auth.User&lt;/code&gt;에 있는 이용자 모델을 &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt; 관계로 연결했는데, 뷰 함수에서는 관련 정보를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;에 반영하지 않았습니다.&lt;/p&gt;

&lt;p&gt;만약, &lt;code class=&quot;highlighter-rouge&quot;&gt;edit_form.save()&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;edit_form.save(commit=True)&lt;/code&gt;처럼 바로 데이터베이스에 반영하려고 하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;IntegrityError&lt;/code&gt; 예외 오류가 발생하며, &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT NULL constraint failed: photo_photo.user_id&lt;/code&gt;라 안내 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-IntegrityError.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;겁먹지 말고 오류 안내말을 잘 보세요. 정확히 이해하지 않은 채 추측만 하려는 태도는 안 좋지만, 여러분은 이 강좌 나머지 내용을 그냥 건너뛰지 않을테니 예외 오류 내용을 보고 상황을 추측해 보겠습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT NULL&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;failed&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_photo.user_id&lt;/code&gt; 이 세 가지 표현이 눈에 들어오지요? “photo”가 두 번 반복된 &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_photo&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델과 연관되어 보이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;는 우리가 만든 적이 없지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 모델 필드와 관련되어 보입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 모델 필드에 &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT NULL&lt;/code&gt;과 관련된 문제가 발생하여 진행하던 작업(&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;)이 실패했다는 뜻이군요. &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT NULL&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;이면 안 된다는 의미니까 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 모델 필드에 &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;이 들어가서 오류가 생긴 겁니다.&lt;/p&gt;

&lt;p&gt;웹페이지의 폼 양식에서 이용자 모델의 기본키 값을 직접 전달하면 안 됩니다. 예를 들어, &lt;code class=&quot;highlighter-rouge&quot;&gt;hannal&lt;/code&gt; 이용자의 기본키 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;1023&lt;/code&gt;이고 이 값을 웹 폼 양식에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;로 담아서 서버로 전달한다면, 이용자는 기본키 값 숫자를 고쳐서 마치 다른 이용자가 사진 게시물을 올린 것처럼 왜곡할지도 모릅니다. 이런 정보는 서버에서 알아내서 다뤄야 합니다. 그게 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.user&lt;/code&gt;입니다. 아하, &lt;code class=&quot;highlighter-rouge&quot;&gt;request.user&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoEditForm&lt;/code&gt; 폼 클래스에 전달하면 되겠구나.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;edit_form = PhotoEditForm(request.POST, request.FILES, request.user)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;request.POST&lt;/code&gt;처럼.&lt;/p&gt;

&lt;p&gt;아닙니다. 그렇게 알아서 동작(magic behaviour)해주지 않고, 그래서도 안 됩니다. 추측해야 하는 코드와 기능은 좋지 않다고 봅니다. 이용자 정보가 필요한 폼 클래스라면 이용자 정보를 따로 전달받도록 처리해야 합니다. Python 클래스는 실행 가능한(callable) 객체이므로 함수처럼 소괄호를 사용하여 실행하고 실행 결과로 인스턴스 객체를 반환 받는데, 인스턴스 초기화를 수행하는 메서드가 &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__()&lt;/code&gt;입니다. 이용자 정보인 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.user&lt;/code&gt;를 인자로 전달 받는 &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__()&lt;/code&gt; 메서드를 &lt;code class=&quot;highlighter-rouge&quot;&gt;PhotoEditForm&lt;/code&gt; 폼 클래스에 만들면 됩니다. 이건 Class based view를 다룰 때 살펴보기로 하고, 이번 편에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; 메서드에 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt; 인자를 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;로 전달하여 처리합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 모델 필드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;user = models.ForeignKey(settings.AUTH_USER_MODEL)&lt;/code&gt;로 만들었고, 이 모델 필드는 NULL을 허용하지 않습니다. 데이터베이스 테이블에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT NULL&lt;/code&gt;로 정의되어 있습니다. 그래서 데이터베이스에 실제로 반영하지 말고 우선 모델로 생성한 인스턴스 객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;edit_form&lt;/code&gt; 객체로부터 받으려고 &lt;code class=&quot;highlighter-rouge&quot;&gt;save(commit=False)&lt;/code&gt; 메서드를 수행했습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EditPhotoForm&lt;/code&gt;이 반환하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델의 인스턴스 객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo&lt;/code&gt;에 할당받고, 이 객체의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 속성에 이용자 정보인 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.user&lt;/code&gt;를 할당합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo.user = request.user&lt;/code&gt; 코드입니다. 이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo.save()&lt;/code&gt;를 수행하여 데이터베이스에 저장합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo.save(commit=True)&lt;/code&gt;와 동일합니다.&lt;/p&gt;

&lt;p&gt;이제 로그인한 이용자 정보가 사진 게시물에 반영되어 저장됩니다.&lt;/p&gt;

&lt;h4 id=&quot;2-new_photo-뷰-함수에-로그인한-이용자만-접근하도록-제한&quot;&gt;(2) &lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo&lt;/code&gt; 뷰 함수에 로그인한 이용자만 접근하도록 제한&lt;/h4&gt;

&lt;p&gt;로그인하지 않은 이용자가 사진 게시물을 저장하려 하면 오류가 발생할 겁니다. 로그인하지 않은 이용자는 이용자 모델로 생성한 인스턴스 객체에 기본키 값이 없을테니 &lt;code class=&quot;highlighter-rouge&quot;&gt;IntegrityError&lt;/code&gt; 예외 오류가 발생할 것 같습니다. 이렇게 예상하셨다면 훌륭합니다. 한 번 시도해보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-anonymous_user_exception.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제로 발생하는 예외는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ValueError&lt;/code&gt;가 발생하며, 안내말은 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델 클래스로 만든 인스턴스여야 한다는 내용입니다. 앞서 설명드린 바와 같이 로그인하지 않은 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.user&lt;/code&gt;엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;AnonymousUser&lt;/code&gt; 모델 클래스로 생성한 인스턴스 객체가 할당되어 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.models&lt;/code&gt;에 있는데, 코드를 보면 아시겠지만 껍데기 역할을 할 뿐입니다.&lt;/p&gt;

&lt;p&gt;로그인한 이용자인지 여부는 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.user&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;is_authenticated()&lt;/code&gt; 메서드를 실행하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt; 객체를 반환받아 구분합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;이면 로그인한 이용자, &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;이면 로그인하지 않은 이용자입니다. 코드도 아주 간단합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.conf import settings

def new_photo(request):
    if not request.user.is_authenticated():
        return redirect(settings.LOGIN_URL)
    # 후략
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;로그인하지 않은 이용자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;new_photo&lt;/code&gt; 뷰 함수로 접근하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.LOGIN_URL&lt;/code&gt;에 지정되어 있는 URL로 이동(redirect) 시킵니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;LOGIN_URL&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;global_settings&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;/accounts/login/&lt;/code&gt;으로 기본 지정되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@login_required&lt;/code&gt; 장식자(decorator)를 사용하면 더 명확하고 간결합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.contrib.auth.decorators import login_required

@login_required
def new_photo(request):
    # 후략
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-login_required.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;더 친절하게도 로그인한 후 이동할 도착지도 &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; 인자로 지정됩니다. 로그인 주소를 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.LOGIN_URL&lt;/code&gt;에 따로 지정해주면 자동으로 변경한 주소로 이동해 줍니다.&lt;/p&gt;

&lt;h3 id=&quot;3-모델-관계에-더-자세히-알아보기&quot;&gt;3. 모델 관계에 더 자세히 알아보기&lt;/h3&gt;

&lt;p&gt;우리는 이용자 모델을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 모델 필드에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt; 관계로 연결했습니다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 모델 필드에 이용자 모델로 생성한 인스턴스 객체(&lt;code class=&quot;highlighter-rouge&quot;&gt;request.user&lt;/code&gt;)를 할당하지 않자 &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_photo.user_id&lt;/code&gt;에 NULL을 저장하려 해서 저장하지 못했다는 예외 오류도 접했습니다. 이 중에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt; 정체를 살펴 보겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;1-foreignkey-모델-필드&quot;&gt;(1) ForeignKey 모델 필드&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt;, 그러니까 Many to one 관계는 “One”쪽에 “Many”쪽 데이터 여러 개가 연결되는 구조입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-ManyToOne.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;한 이용자가 여러 게시물을 남기거나, 한 글갈래(category)에 여러 글이 속하는 관계입니다. Django 모델로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt; 모델 필드로 모델 클래스를 지정한 것인데, 이 관계 정보를 데이터베이스엔 어떻게 저장할까요?&lt;/p&gt;

&lt;p&gt;일단 각 모델은 데이터베이스에 Django 앱 이름과 모델 이름을 조합하여 테이블로 만듭니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_photo&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;photo&lt;/code&gt; 앱에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델을 뜻합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt;라는 앱의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Hannal&lt;/code&gt; 모델은 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello_hannal&lt;/code&gt; 테이블을, &lt;code class=&quot;highlighter-rouge&quot;&gt;KayCha&lt;/code&gt; 모델은 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello_kay_cha&lt;/code&gt; 테이블을 만들어 연결합니다. 앞서 발생한 &lt;code class=&quot;highlighter-rouge&quot;&gt;IntegrityError&lt;/code&gt; 예외 오류에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;photo_photo&lt;/code&gt; 정체가 무엇인지 이제 아시겠죠?&lt;/p&gt;

&lt;p&gt;Django의 모델 필드는 데이터베이스의 컬럼(column)이 됩니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;image_file&lt;/code&gt; 모델 필드는 같은 이름을 갖는 테이블 컬럼이 됩니다. 모델 필드형(type)은 테이블 컬럼형을 결정합니다. 그런데 &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt;와 같은 모델 관계 필드는 컬럼 이름이 조금 다릅니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 모델 필드는 컬럼 이름이 &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt; 정체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 모델 필드가 맞습니다. 그런데 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;가 아니라 &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;인 이유는 무엇일까요? 질문 아니니 대답 안 하셔도 됩니다. :)&lt;/p&gt;

&lt;p&gt;이번 9회 초반에 모델 간 연결은 기본키로 한다고 설명했습니다. Django는 Many쪽이 One쪽을 연결하는 경우, Many쪽 모델 필드 이름에 One쪽의 기본키 이름을 덧붙입니다.&lt;/p&gt;

&lt;p&gt;기본키는 관례에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;라는 모델 필드가 되며, 모델 필드는 데이터베이스 테이블 컬럼과 이름이 같으므로 테이블 컬럼도 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 모델 필드는 이용자 모델을 Many to one으로 가리키는데, 이용자 모델의 기본키인 모델 필드도 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델 데이터가 Many쪽이고 이용자 모델이 One쪽이므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;Photo&lt;/code&gt; 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 모델 필드는 이용자 모델 필드의 기본키 모델 필드인 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; 이름을 덧붙여서 &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;가 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/09-foreign_key_db_table_schema.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만약 기본키 모델 필드 이름이 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;가 아니라 &lt;code class=&quot;highlighter-rouge&quot;&gt;uid&lt;/code&gt;라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;_uid&lt;/code&gt;가 덧붙게 됩니다. Django는 이 데이터베이스 컬럼 값을 참조하여 서로 분리된 모델의 데이터 연결 관계를 알아냅니다.&lt;/p&gt;

&lt;h4 id=&quot;2-모델-관계를-나중에-맺기-lazy-relation&quot;&gt;(2) 모델 관계를 나중에 맺기 (lazy relation)&lt;/h4&gt;

&lt;p&gt;모델 관계를 맺을 대상 모델 클래스 객체를 직접 전달해도 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.contrib.auth import get_user_model
User = get_user_model()

class Photo(models.Model):
    user = models.ForeignKey(User)
    # 후략
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;models.ForeignKey(User)&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt; 클래스에 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;라는 객체를 첫 번째 인자로 전달하여 호출(call)하고, 모델 필드의 인스턴스 객체를 반환받아 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;에 할당하는 것입니다. Python은 소스 파일 맨 윗 줄부터 아래로 실행하므로 저 구문을 실행하여 모델 필드를 만드는 시점에 실제로 존재하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 객체를 사용합니다.&lt;/p&gt;

&lt;p&gt;그렇다면 관계 맺을 모델이 있는 경로를 문자열로 담아 인자로 전달하는 경우는 언제일까요? 이용자 모델처럼 상황에 따라 연결할 모델이 바뀌는 경우가 있습니다. 지난 편에서 예를 든 것처럼 이용자 모델이 바꾸면 이 모델을 가져오는(&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;) 모든 코드에도 영향이 미칩니다. 그러나 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.AUTH_USER_MODEL&lt;/code&gt;에 이용자 모델이 있는 위치를 지정하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTH_USER_MODEL&lt;/code&gt; 내용을 참조하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;get_user_model()&lt;/code&gt; 함수로 이용자 모델을 가져오면 &lt;a href=&quot;http://blog.dahlia.kr/post/103101756957&quot;&gt;한 의도를 한 구현체로 정리&lt;/a&gt;할 수 있지요.&lt;/p&gt;

&lt;p&gt;관계 맺을 대상 모델이 아직 만들어지기 전에 연결하려는 경우에도 문자열로 지정합니다. A 모델이(from) B 모델을(to) 관계를 맺는다면 다음과 같이 B 모델을 먼저 만들고 그 &lt;strong&gt;이후&lt;/strong&gt;에 A 모델을 만들어야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class B(models.Model):
    pass

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;B 모델은 C 모델을 관계 맺는다면 C 모델을 B 모델에 앞서 만들어야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class C(models.Model):
    pass

class B(models.Model):
    c = models.ForeignKey(C)

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;그런데 C 모델은 A 모델에 관계를 지어야 한다고 가정하겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class C(models.Model):
    a = models.ForeignKey(A)

class B(models.Model):
    c = models.ForeignKey(C)

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;문제가 생깁니다. C 모델이 만들어지는 시점에 A라는 객체가 존재하지 않기 때문이죠. A 모델을 C 모델 코드 위로 올리면 안 됩니다. A 모델이 만들어지는 시점에 B 모델이 없기 때문이지요. 이런 경우에, C 모델에서 A 모델을 문자열 인자로 전달하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class C(models.Model):
    a = models.ForeignKey('A')

class B(models.Model):
    c = models.ForeignKey(C)

class A(models.Model):
    b = models.ForeignKey(B)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;문자열로 관계 맺을 대상 모델을 지정하면 관계 맺을 대상 모델이 만들어졌다는 신호가 오기 전까지 관계를 맺지 않은 채 관계 맺는 연산을 지연시켜 놓습니다. 비유가 아니라 정말로 대상 모델 클래스(예 : &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 모델)가 초기화 되면 모델 신호(&lt;code class=&quot;highlighter-rouge&quot;&gt;ModelSignal&lt;/code&gt;)인 &lt;code class=&quot;highlighter-rouge&quot;&gt;class_prepared&lt;/code&gt;를 일으키고(fire), 대상 모델을 바라보던 모델은(예 : &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; 모델) 이 신호을 받고선 비로소 실제 관계를 맺습니다.&lt;/p&gt;

&lt;p&gt;이런 연산 특성을 응용하여 관계 맺을 대상 모델로 자기 자신을 지정하는 것도 가능합니다. 순환 관계(recursive relationship)이라고 하는데, 문자열 &lt;code class=&quot;highlighter-rouge&quot;&gt;'self'&lt;/code&gt;을 지정하면 됩니다. 추후에 기회가 닿으면 순환 관계 모델을 만들어 보겠습니다.&lt;/p&gt;

&lt;p&gt;정리하면, 모델 관계 필드는 관계 맺을 대상을 세 가지 형태로 지정합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;관계 지을 모델 클래스 객체를 직접 인자로 전달&lt;/li&gt;
  &lt;li&gt;관계 지을 모델 클래스 객체가 있는 경로를 문자열로 전달
    &lt;ul&gt;
      &lt;li&gt;형식 : &lt;code class=&quot;highlighter-rouge&quot;&gt;Django앱이름.모델이름&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자기 자신을 가리키는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;'self'&lt;/code&gt; 문자열 전달&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;강좌 9편을 마칩니다. 그동안 강좌 연재 소식을 &lt;a href=&quot;https://www.facebook.com/hello.kaycha&quot;&gt;제 페이스북 개인 페이지&lt;/a&gt;, &lt;a href=&quot;https://www.facebook.com/groups/django/&quot;&gt;Django 페이스북 그룹&lt;/a&gt;, 제 페이스북 개인 계정, 제 트위터에서 알려 왔는데요. 10편부터는 제 페이스북 개인 페이지와 트위터에만 알릴 예정입니다. 제 블로그를 구독하지 않고 강좌 연재 소식을 보시려면 제 페이스북 개인 페이지나 트위터를 구독하시길 바랍니다. :)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/09-fullsource/pystagram&quot;&gt;9편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 28 Jun 2015 01:20:00 +0900</pubDate>
        <link>http://localhost:4000//2015/06/start_with_django_webframework_09/</link>
        <guid isPermaLink="true">http://localhost:4000//2015/06/start_with_django_webframework_09/</guid>
        
        <category>django</category>
        
        <category>model relationship</category>
        
        <category>foreignkey</category>
        
        <category>authentication</category>
        
        <category>many to one relationship</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
      <item>
        <title>8. 로그인, 로그아웃 하기</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.hannal.com/category/start-with-django-webframework/&quot;&gt;날로 먹는 Django 웹프레임워크 강좌 목차&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;마지막 갱신일시 : 2015년 6월 7일 7시 19분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 편에서는 Django 이용자 인증 체계을 알아보고, 이 인증 체계에서 로그인을 어떻게 처리하는지 살펴 보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-django-이용자-인증-체계&quot;&gt;1. Django 이용자 인증 체계&lt;/h3&gt;

&lt;p&gt;Django 이용자 인증 체계는 크게 두 가지 요소로 구분합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인증 (Authentication)&lt;/li&gt;
  &lt;li&gt;권한 (Authorization)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인증은 “나 누구인데 확인 좀…”이라면 권한은 “나 이거 해도 돼요?”라 보면 됩니다. 누구인지 신원이 확인되지 않은 존재에게 권한을 세밀하게 부여하진 못합니다. 신원이 확인된, 즉, 인증된 이용자인지 아닌지로 구분하는 정도로 권한을 부여합니다. 그래서, 권한 체계를 비롯하여 이용자 인증 체계 자체는 인증(Authetication)을 바탕으로 합니다.&lt;/p&gt;

&lt;h4 id=&quot;1-django-내장-인증-기능&quot;&gt;(1) Django 내장 인증 기능&lt;/h4&gt;

&lt;p&gt;Django는 이용자 인증 체계를 내장하고 있으며, 우리는 이미 이 기능을 사용해봤습니다. &lt;a href=&quot;http://blog.hannal.com/2014/10/start_with_django_webframework_04/&quot;&gt;4. Photo 모델로 Admin 영역에서 데이터 다루기&lt;/a&gt; 편에서 최고 권한 이용자로 Admin 영역에 로그인하여 사진 게시물을 입력 했었거든요.&lt;/p&gt;

&lt;p&gt;Django에 내장된 인증 체계는 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth&lt;/code&gt;라는 경로(name space)인 Python 패키지에 모여 있으며, Django 개념으로는 Django App입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 파일에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;INSTALLED_APPS&lt;/code&gt; 설정 항목을 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;'django.contrib.auth',&lt;/code&gt;가 있는데, 우리가 만드는 Pystagram에 사용할 Django App에 Django 인증 체계가 앱 형태로 기본 내장되어 있는 것입니다.&lt;/p&gt;

&lt;p&gt;Django webframework으로 제품을 만든다면 Django 인증 체계를 사용하는 게 좋습니다. 오랜 기간 개발되어 보안 수준은 성숙하고 안전하며, 확장 가능하게 유연합니다. Django에서 제공하는 다른 여러 기능이 내장된 인증 기능 구조를 따르기 때문에 Django가 제공하는 기능을 유기성 있고 풍부하게 쓰기에도 Django 인증 체계를 쓰는 게 좋습니다.&lt;/p&gt;

&lt;h4 id=&quot;2-django-내장-권한-기능&quot;&gt;(2) Django 내장 권한 기능&lt;/h4&gt;

&lt;p&gt;권한 검사 기능도 Django에 내장되어 있습니다. 뷰(View) 단위 행동(behaviour), 데이터 단위 행동에 권한을 부여하여 운용 가능하며, 권한을 그룹 단위로 묶어서(grouping) 이용자에게 지정하는 기능도 제공합니다. 자세한 내용은 권한 기능을 적용할 때 다루겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;2-로그인-기능-구현&quot;&gt;2. 로그인 기능 구현&lt;/h3&gt;

&lt;h4 id=&quot;1-url-패턴-추가&quot;&gt;(1) URL 패턴 추가&lt;/h4&gt;

&lt;p&gt;Django에서 제공하는 인증 기능을 이용하여 로그인, 로그아웃 기능을 구현 하겠습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 파일이 있는 시작패키지에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; 파일을 열고, 다음 URL 패턴을 &lt;code class=&quot;highlighter-rouge&quot;&gt;urlpatterns&lt;/code&gt;에 추가합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;urlpatterns = patterns(
    '',
    # 중략
    url(
        r'^accounts/login/',
        'django.contrib.auth.views.login',
        name='login',
        kwargs={
            'template_name': 'login.html'
        }
    ),
    url(
        r'^accounts/logout/',
        'django.contrib.auth.views.logout',
        name='logout'
    ),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r'^accounts/login/'&lt;/code&gt;은 로그인 하는 URL이고, 로그인 화면을 출력하거나 로그인 인증 처리를 하는 뷰 함수는 Django에 내장된 &lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt; 뷰 함수를 사용합니다. 이 함수 객체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.views&lt;/code&gt; 모듈에 존재합니다. 이 URL 패턴의 이름을 &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; 키워드 인자를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt;이라고 지었는데, 이 인자를 사용하지 않아도 무방합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;kwargs&lt;/code&gt;는 URL 패턴에 연결한 뷰 함수에 추가로 전달할 인자를 사전형(&lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt;) 객체로 전달합니다. 키가 &lt;code class=&quot;highlighter-rouge&quot;&gt;'template_name'&lt;/code&gt;이고 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;'login.html'&lt;/code&gt;인 사전형 객체인데, Django에서 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt; 뷰 함수에 &lt;code class=&quot;highlighter-rouge&quot;&gt;template_name&lt;/code&gt; 이름으로 키워드 인자를 지정하면 로그인 화면을 출력하는 데 사용할 템플릿으로 사용합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;'login.html'&lt;/code&gt;이라는 문자열을 지정했으니 우리가 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;TEMPLATE_DIRS&lt;/code&gt;에 지정한 템플릿 디렉터리 중 최상위 순위에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;login.html&lt;/code&gt; 파일을 찾아서 로그인 화면을 출력하는 데 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r'^accounts/logout/'&lt;/code&gt;은 로그아웃 하는 URL이며, 로그아웃 기능 역시 로그인 기능과 마찬가지로 Django에 내장된 뷰 함수를 사용합니다.&lt;/p&gt;

&lt;h4 id=&quot;2-로그인-템플릿-파일&quot;&gt;(2) 로그인 템플릿 파일&lt;/h4&gt;

&lt;p&gt;이번엔 로그인 화면에 사용할 &lt;code class=&quot;highlighter-rouge&quot;&gt;login.html&lt;/code&gt; 템플릿 파일을 만듭니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;templates&lt;/code&gt; 디렉터리에 &lt;code class=&quot;highlighter-rouge&quot;&gt;login.html&lt;/code&gt; 파일을 만들고 다음 내용을 담습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;layout.html&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;form.errors&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;p&amp;gt;ID나&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;비밀번호가&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;일치하지&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;않습니다.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;user.is_authenticated&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;p&amp;gt;권한이&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;없는&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;페이지에&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;접근하였으니,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;권한이&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;있는&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;계정으로&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;로그인하세요.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;p&amp;gt;이&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;페이지를&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;보려면&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;로그인을&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;해야&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;합니다.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{% url 'login' %}&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;csrf_token&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;form.username.label_tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;form.username&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;form.password.label_tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;form.password&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;로그인&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;next&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ next }}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endblock&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Django에서 견본으로 제공하는 &lt;a href=&quot;https://docs.djangoproject.com/en/1.8/topics/auth/default/#django.contrib.auth.views.login&quot;&gt;login.html 템플릿 파일&lt;/a&gt;에서 따와서 약간 고쳤습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;form.errors&lt;/code&gt;엔 입력한 폼 양식에 문제가 있는 경우에 문제 내용이 담겨 있습니다. ID(&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;)나 비밀번호를 입력하지 않거나 형식에 맞지 않는 등 여러 오류 종류가 있겠지만, 간결하게 ID와 비밀번호가 일치하지 않는다고만 안내합니다. 로그인에 대해서는 굳이 친절하게 뭐가 문제인지 자세히 알려줄 필요는 없습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;는 로그인을 한 후 이동할 URL을 뜻합니다. 예를 들어, 로그인을 하지 않은 채 사진에 달린 댓글을 삭제하려 하면 로그인하는 URL로 이동하고 로그인을 하고 나면 로그인하기 전에 접근하려는 URL으로 이동하는데, 이동할 URL이 GET이나 POST 방식으로 전달된 Query String 키인 &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt;에 담깁니다. 대개는 URL이 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://pystagram.com/accounts/login/?next=/redirect_to_here/&lt;/code&gt;와 같이 표현됩니다.&lt;/p&gt;

&lt;p&gt;이동할 곳이 있는데(&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;) 로그인한 상태에서 로그인 URL에 왔다는 건 무슨 뜻일까요? 현재 로그인한 이용자 인증이나 권한 상태로는 문제가 있으니 다른 계정으로 로그인하라는 의미입니다. 로그인을 하지 않았다면, 로그인을 해야 접근 가능한 페이지이니 로그인을 하라고 안내합니다.&lt;/p&gt;

&lt;p&gt;그외엔 &lt;a href=&quot;http://blog.hannal.com/2015/05/start_with_django_webframework_07/&quot;&gt;7. 사진 게시물 제출하여 게시하기&lt;/a&gt; 편 내용과 비슷합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;form&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.forms&lt;/code&gt; 모듈에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationForm&lt;/code&gt; 폼 클래스로 생성한 인스턴스 객체입니다. 이 폼에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; 폼 필드와 &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; 폼 필드를 사용한 것입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;은 이용자의 실명이나 필명이 아니라 이용자 ID라고 보면 됩니다.&lt;/p&gt;

&lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8000/accounts/login/&lt;/code&gt;에 접속하면 로그인 화면이 나옵니다. 잘못된 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;을 제출하면 이에 대한 안내도 나오고요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-login_form_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-login_form_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재 구현한 로그인 기능으로 로그인을 하면 “Page not found” 오류를 만나게 됩니다. 이에 대해서는 곧 처리하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-404_after_login.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-로그인-과정&quot;&gt;3. 로그인 과정&lt;/h3&gt;

&lt;p&gt;Django가 제공하는 로그인 뷰 함수가 어떤 과정을 거쳐 이용자 인증을 처리하는지 좀 더 살펴 보겠습니다. 이 부분을 몰라도 로그인 기능을 이용하는 데 문제 없습니다.&lt;/p&gt;

&lt;h4 id=&quot;1-form-검증&quot;&gt;(1) Form 검증&lt;/h4&gt;

&lt;p&gt;웹 페이지에서 폼 양식으로 넘어오는 값은 Form을 이용해 값을 검증합니다. Django는 로그인 절차에 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationForm&lt;/code&gt; 폼을 사용하며, 이 폼은 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.forms&lt;/code&gt; 모듈에 있습니다. 이쯤되면 눈치 채셨을텐데, Django는 인증 관련 모델, 폼, 뷰, 미들웨어 등을 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth&lt;/code&gt; 패키지 안에 담아 놨습니다. 인증과 관련된 소스 코드를 보려면 이 패키지를 살펴 보시면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationForm&lt;/code&gt; 폼은 현재 이용자 정보와 HTTP 요청 정보를 담은 &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; 객체도 함께 인자로 전달 받는데, 세션 처리에 필요하기 때문에 그렇습니다. 폼 양식 값이 유효하면(&lt;code class=&quot;highlighter-rouge&quot;&gt;is_valid()&lt;/code&gt;) 이용자가 로그인 후에 이동할 URL 문자열이 안전한 지 검사합니다. 그런 뒤 &lt;code class=&quot;highlighter-rouge&quot;&gt;auth_login()&lt;/code&gt; 함수를 이용해 로그인 인증 처리를 마무리하고 나서 이용자를 다음 URL로 이동(redirect) 시킵니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;auth_login()&lt;/code&gt; 함수는 이름과는 달리 실제로는 인증 과정 마무리 단계를 담당합니다. 로그인 양식을 토대로 이용자 정보를 가져와서 HTTP Request(&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;) 정보와 함께 사용해 서버 세션 정보를 만듭니다. 세션 정보를 만들지 않으면 로그인 정보는 유지되지 않아서 다른 페이지에 방문할 때마다 매번 로그인을 해야 합니다.&lt;/p&gt;

&lt;p&gt;로그인 양식, 그러니까 로그인 하려고 제출한 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;에 정확히 일치하는 이용자를 찾는 과정은 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationForm&lt;/code&gt; 폼에서 이뤄집니다. 이 폼의 &lt;code class=&quot;highlighter-rouge&quot;&gt;clean()&lt;/code&gt; 메서드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; 내용을 토대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate()&lt;/code&gt; 함수를 이용해 인증을 시도합니다. 일치하는 이용자가 없으면 Form 오류를 일으키고, 우리는 “ID나 비밀번호가 일치하지 않습니다.”라는 안내를 화면에서 만납니다. 일치하는 이용자가 있으면 이 이용자 계정이 활성화 된 상태인지(&lt;code class=&quot;highlighter-rouge&quot;&gt;is_active&lt;/code&gt;) 검사하는 걸로 폼 안에서 처리하는 인증 과정을 마칩니다.&lt;/p&gt;

&lt;h4 id=&quot;2-인증-체계-기반으로-처리&quot;&gt;(2) 인증 체계 기반으로 처리&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate()&lt;/code&gt; 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 항목에 등록된 인증 체계 기반 클래스를 하나씩 가져와서 &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate()&lt;/code&gt; 메서드를 호출하여 인증을 시도합니다. 우리가 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 파일에 따로 이 항목을 설정하지 않아도 문제가 없는 건, Django에 기본으로 내장된 &lt;code class=&quot;highlighter-rouge&quot;&gt;global_settings.py&lt;/code&gt;에 이 항목이 설정되어 있기 때문입니다. 이 항목에 있는 내용은 &lt;code class=&quot;highlighter-rouge&quot;&gt;'django.contrib.auth.backends.ModelBackend'&lt;/code&gt; 이름영역인 클래스가 튜플 객체로 담겨 있습니다.&lt;/p&gt;

&lt;p&gt;데이터베이스에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;로 이용자를 찾는 과정이 비로소 이 단계에서 이뤄집니다. 이용자 모델을 가져오고, 이 모델을 이용해 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;으로 먼저 이용자 데이터를 가져오고, 이 이용자 데이터에 저장된 비밀번호와 이용자가 로그인하며 제출한 &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;를 비교합니다. 비밀번호까지 일치하면 해당 이용자 데이터, 그러니까 이용자 모델로 생성한 인스턴스 객체를 반환하고, 그렇지 않으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;을 반환합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; 항목에 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.backends.ModelBackend&lt;/code&gt;이 튜플에 담겨져 있다는 말은 다음 두 가지를 의미합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Django 인증 체계 기반(backend)을 꼭 사용하지 않아도 된다.&lt;/li&gt;
  &lt;li&gt;인증 체계 기반을 여러 개 이상을 사용하는 게 가능하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;인증 체계 기반의 클래스 규칙대로 인터페이스를 만들기만 한다면 우리가 직접 만든 인증 체계를 사용하거나 Facebook, Twitter처럼 인증 API를 제공하는 서비스나 플랫폼을 기반으로 인증 체계를 운용해도 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;3-이용자-모델-가져오기&quot;&gt;(3) 이용자 모델 가져오기&lt;/h4&gt;

&lt;p&gt;인증 체계 기반을 Django에서 제공하는 기본 인증 &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelBackend&lt;/code&gt;를 다른 것으로 갈아끼우거나 추가한다면, 이용자 정보를 데이터베이스에서 다루는 이용자 모델도 대체하여 쓸 수 있습니다. Django에 내장된 이용자 모델은 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.models&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 모델 클래스입니다. 이 이용자 모델엔 모델 필드이 간결하게 담겨 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; : 이용자 ID 역할. 다른 값과 중복되지 않는 고유한 값만 허용합니다(&lt;code class=&quot;highlighter-rouge&quot;&gt;unique=True&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; : 비밀번호. &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordField&lt;/code&gt; 모델 필드.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;first_name&lt;/code&gt; : 성씨. &lt;code class=&quot;highlighter-rouge&quot;&gt;CharField&lt;/code&gt; 모델 필드이며 생략 가능.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;last_name&lt;/code&gt; : 이름. &lt;code class=&quot;highlighter-rouge&quot;&gt;CharField&lt;/code&gt; 모델 필드이며 생략 가능.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt; : 전자우편 주소. &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailField&lt;/code&gt; 모델 필드.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is_staff&lt;/code&gt; : 관리자 여부. &lt;code class=&quot;highlighter-rouge&quot;&gt;BooleanField&lt;/code&gt; 모델 필드.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is_active&lt;/code&gt; : 활성화 된 계정인지 여부. &lt;code class=&quot;highlighter-rouge&quot;&gt;BooleanField&lt;/code&gt; 모델 필드.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이외에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;is_superuser&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;groups&lt;/code&gt; 같은 모델 필드 몇 가지가 더 있지만, 이 모델 필드의 값을 직접 다룰 일은 드물고, 이 강좌 내용을 이해하시면 이런 모델 필드를 직접 찾아 다루는 건 어렵지 않으므로 이 강좌에선 다루지 않겠습니다.&lt;/p&gt;

&lt;p&gt;만약, 필명이나 사용하는 언어, 거주 지역처럼 정보를 추가로 이용자로부터 입력 받아 관리하려면 이용자 모델 클래스를 &lt;strong&gt;확장&lt;/strong&gt;해야 합니다. Django에서 제공하는 이용자 모델을 변경해도 되지만, Django 소스 파일을 직접 고쳐서 쓰지 않는 게 좋습니다. Django 판을 올릴 때마다 직접 수정한 부분을 매번 챙겨야 하고, 연계되어 동작하는 다른 기능에 부작용을 일으킬 여지도 있습니다. 그래서 변경하지 않고 &lt;strong&gt;확장&lt;/strong&gt;해야 합니다.&lt;/p&gt;

&lt;p&gt;확장하는 자세한 방법은 다른 편에서 따로 다루기로 하고&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, 여기에선 확장 방법 종류만 간단히 언급하겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;따로 이용자 모델을 만들고, Django의 이용자 모델에 연결(Model relationship).&lt;/li&gt;
  &lt;li&gt;이용자 모델과 모델 매니저, 이용자 폼 등을 모두 구현하여 이용자 모델 부분을 대체.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2번 방법에서 “모델 부분을 대체”한다는 표현을 눈 여겨 보세요. 일일이 Django 소스에서 이용자 모델 관련 부분, 가령, &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.models.User&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;pystagram_auth.models.User&lt;/code&gt;와 같이 교체하는 건 아닙니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;settings&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTH_USER_MODEL&lt;/code&gt; 항목에 지정하기만 하면 됩니다.&lt;/p&gt;

&lt;p&gt;이 항목 역시 우리가 따로 설정한 적이 없는데, Django의 &lt;code class=&quot;highlighter-rouge&quot;&gt;global_settings&lt;/code&gt;에 설정되어 있으며, 기본 값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;'auth.User'&lt;/code&gt; 문자열이 할당되어 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;auth&lt;/code&gt;는 Django 앱 이름(Python 패키지)이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;는 모델 클래스 이름입니다. Python 이름영역(name space)으로 풀어 쓰면 &lt;code class=&quot;highlighter-rouge&quot;&gt;auth.models.User&lt;/code&gt;인 셈입니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTH_USER_MODEL&lt;/code&gt; 설정 항목을 참조하여 이용자 모델을 실제로 가져오는 역할은 &lt;code class=&quot;highlighter-rouge&quot;&gt;get_user_model()&lt;/code&gt; 함수가 맡으며, &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth&lt;/code&gt;에 있습니다. 이 함수를 이용하면 이용자 모델이 어떤 것으로 바뀌든 코드를 일관되게 유지하게 됩니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTH_USER_MODEL = 'auth.User'&lt;/code&gt;라고 설정하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;get_user_model()&lt;/code&gt; 함수를 실행하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;auth.models.User&lt;/code&gt;를 반환하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;AUTH_USER_MODEL = 'pystagram_auth.MyUser'&lt;/code&gt;로 설정하고 실행하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;pystagram_auth.models.MyUser&lt;/code&gt;를 이용자 모델로 반환합니다. 그러므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;get_user_model()&lt;/code&gt; 함수로 이용자 모델을 가져오는 게 좋습니다.&lt;/p&gt;

&lt;p&gt;인증 체계 기반(backend)과는 달리 기본 이용자 모델은 하나만 가능합니다.&lt;/p&gt;

&lt;h4 id=&quot;4-정리하면&quot;&gt;(4) 정리하면&lt;/h4&gt;

&lt;p&gt;로그인 과정을 정리하면 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.views.login&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.forms.AuthenticationForm&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.authenticate()&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.AUTHENTICATION_BACKENDS&lt;/code&gt;에서 인증 기반 하나씩 가져옴&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.backends.ModelBackend&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate()&lt;/code&gt; 메서드로 인증 처리&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.auth_login&lt;/code&gt; (정확히는 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.contrib.auth.login&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;auth_login&lt;/code&gt;으로 import 한 것.)으로 인증 관련 세션 처리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;로그인 이후 이동할 URL로 이동 처리(redirect)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-로그인-관련-설정-항목&quot;&gt;4. 로그인 관련 설정 항목&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에 설정하는 로그인 관련 항목이 몇 가지 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;1-login_url&quot;&gt;(1) &lt;code class=&quot;highlighter-rouge&quot;&gt;LOGIN_URL&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOGIN_URL&lt;/code&gt;은 로그인 URL을 뜻합니다. Django에서 제공하는 장식자(decorator) 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;login_required&lt;/code&gt;는 뷰 함수에 접근할 때 로그인 여부를 검사하고, 로그인하지 않으면 로그인 URL로 이용자를 이동시키는데, 이 로그인 URL을 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.LOGIN_URL&lt;/code&gt;에서 가져 옵니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;global_settings&lt;/code&gt;에 설정된 기본값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/accounts/login/&lt;/code&gt;입니다.&lt;/p&gt;

&lt;h4 id=&quot;2-logout_url&quot;&gt;(2) &lt;code class=&quot;highlighter-rouge&quot;&gt;LOGOUT_URL&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOGIN_URL&lt;/code&gt;과 같은 역할을 합니다. 기본값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/accounts/logout/&lt;/code&gt;입니다.&lt;/p&gt;

&lt;h4 id=&quot;3-login_redirect_url&quot;&gt;(3) &lt;code class=&quot;highlighter-rouge&quot;&gt;LOGIN_REDIRECT_URL&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;로그인을 하고 나서 이동할 URL을 설정합니다. 로그인 하고나서 이동할 URL이 지정된 경우 그 URL로 이동하지만, 이동할 URL이 지정되지 않았거나 지정한 URL이 보안상 문제가 있는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.LOGIN_REDIRECT_URL&lt;/code&gt;를 사용합니다.&lt;/p&gt;

&lt;p&gt;현재 구현한 기능으로는 로그인을 마치면 “Page not found” 오류를 만납니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/06/08-404_after_login.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;웹 브라우저 주소입력란을 잘 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8000/accounts/profile/&lt;/code&gt;과 같이 전혀 본 적 없는 URL로 되어 있습니다. 이는 Django 기본 &lt;code class=&quot;highlighter-rouge&quot;&gt;LOGIN_REDIRECT_URL&lt;/code&gt; 설정값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;/accounts/profile/&lt;/code&gt;이라서 그렇습니다. 아직 우리는 프로필 페이지를 만들지 않았으니 임시로 &lt;code class=&quot;highlighter-rouge&quot;&gt;/photo/upload/&lt;/code&gt;로 이동하도록 설정하겠습니다. 시작패키지에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 파일을 열고 다음 코드를 추가합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOGIN_REDIRECT_URL = '/photo/upload/'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이제 로그인을 마치면 &lt;code class=&quot;highlighter-rouge&quot;&gt;/photo/upload/&lt;/code&gt;로 이동하여 사진을 올리라는 압박을 줍니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;강좌 8편을 마칩니다. 아직은 Django 1.7판을 기준으로 강좌를 진행하고 있는데, 조만간 1.8판을 기준으로 내용을 다듬어야 겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/08-fullsource/pystagram&quot;&gt;8편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;다른 편에서 다루겠다는 내용이 늘어가니 불안해지네요. 까먹고 다루지 않을까봐요. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 07 Jun 2015 02:45:00 +0900</pubDate>
        <link>http://localhost:4000//2015/06/start_with_django_webframework_08/</link>
        <guid isPermaLink="true">http://localhost:4000//2015/06/start_with_django_webframework_08/</guid>
        
        <category>django</category>
        
        <category>login</category>
        
        <category>logout</category>
        
        <category>authentication</category>
        
        <category>user model</category>
        
        
        <category>start-with-django-webframework</category>
        
      </item>
    
  </channel>
</rss>
