<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kay on the rails</title>
    <description>Kay as known as Hannal walks on the rails
</description>
    <link>http://blog.hannal.com//</link>
    <atom:link href="http://blog.hannal.com//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 11 Nov 2014 02:17:01 +0900</pubDate>
    <lastBuildDate>Tue, 11 Nov 2014 02:17:01 +0900</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>5. url에 view 함수 연결해서 사진 출력하기</title>
        <description>&lt;ul&gt;
&lt;li&gt;마지막 갱신일시 : 2014년 11월 10일 4시 31분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 편에서는 인터넷 주소에 접속하여 Photo 모델로 올린 사진 데이터를 가져와서 View 기능을 이용하여 웹 브라우저에 관련 내용을 출력해보겠습니다.&lt;/p&gt;

&lt;h3&gt;1. URL에 Photo View 연결&lt;/h3&gt;

&lt;h4&gt;(1) URL Resolver&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2014/11/05-urls_and_views.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;이용자가(client) 인터넷 주소(URL : Uniform resource locator, 이하 URL)로 접속하면 웹 서버는 접속한 주소에 해당하는 내용물을 보여줍니다. Django로 운용되는 서비스도 마찬가지여서, 이용자가 URL로 접근하여 뭔가를 요청하면 그 URL에 대한 정보를 &lt;code&gt;urls.py&lt;/code&gt;로 대표되는 URL dispatch에서 찾아서 연결된 구현부를 실행합니다. 구현부는 데이터를(Model) 가져와 출력물을 바로(?) 출력하기도 하고 Template을 거쳐서 출력물을 만들어낸 후 출력하기도 합니다. 이렇게 URL과 구현부을 연결해주는 역할을 Django의 View 영역인 &lt;code&gt;views.py&lt;/code&gt;가 합니다. 지난 &lt;a href=&quot;http://blog.hannal.net/start_with_django_webframework_03/&quot;&gt;3회 강좌&lt;/a&gt;에서 설명한 MTV 개념인데, View에서 URL로 요청받은 걸 이런저런 방법으로 처리하여 결과(출력물)를 내보낸다고 보면 됩니다.&lt;/p&gt;

&lt;p&gt;Django에서는 URL Resolver(&lt;code&gt;urlresolver&lt;/code&gt;)라는 모듈이 URL Dispatch 역할을 하며, &lt;code&gt;django/core/urlresolvers.py&lt;/code&gt;에 있습니다. 이 &lt;code&gt;urlresolvers&lt;/code&gt; 모듈에 있는 &lt;code&gt;RegexURLResolver&lt;/code&gt; 클래스가 요청받은 URL을 되부를 함수(callback function) 덩어리로 바꿔줍니다. 이 덩어리는 View 함수와 함수 인자로 된 tuple 자료형이며, HTTP Handler가 받아서 View 함수를 실행하고 그 결과를 응답(response)합니다. HTTP Handler는 &lt;code&gt;django/core/handlers/base.py&lt;/code&gt; 모듈에 있는 &lt;code&gt;BaseHandler&lt;/code&gt; 클래스를 뜻합니다. 정리하면 다음과 같이 진행됩니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;BaseHandler&lt;/code&gt; 클래스가 URL로 요청(request) 받음&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RegexURLResolver&lt;/code&gt;로 URL을 보냄&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RegexURLResolver&lt;/code&gt;가 URL에 연결된 View를 찾아서 callback 함수와 인자 등을 &lt;code&gt;BaseHandler&lt;/code&gt;로 반환&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BaseHandler&lt;/code&gt;에서 이 함수를 실행하여 결과값인 출력물을 받음.&lt;/li&gt;
&lt;li&gt;출력&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;중간 중간에 middleware 등과 같은 과정이 있지만 큰 흐름은 이러합니다.&lt;/p&gt;

&lt;p&gt;위 내용은 몰라도 Django를 다루는 데 아무 지장 없습니다. 저는 다음 두 문장을 쓰기 위해 위 설명을 쓴 겁니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Model이나 View에 기능을 구현&lt;/li&gt;
&lt;li&gt;이용자가 서버에 있는 자원에 접근하는 경로인 URL을 URL Dispatch 처리 모듈인 &lt;code&gt;urls.py&lt;/code&gt;에 등록하고 그 URL에 구현부를 연결&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;우리는 앞으로 이런 흐름으로 기능을 구현합니다.&lt;/p&gt;

&lt;h4&gt;(2) 개별 사진 보기 View - 1&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;photo&lt;/code&gt; 앱, 그러니까 &lt;code&gt;photo&lt;/code&gt; 디렉터리 안에 있는 views.py 파일을 엽니다. 별 내용은 없습니다. 세상에 인사하는 View부터 구현해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# coding: utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;3번...3번 사진을 보여 드릴게요.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번엔 &lt;code&gt;urls.py&lt;/code&gt; 파일이 있는 &lt;code&gt;pystagram&lt;/code&gt; 디렉터리에서 &lt;code&gt;urls.py&lt;/code&gt; 파일을 열어서 &lt;code&gt;url(r&amp;#39;^photo/$&amp;#39;, &amp;#39;photo.views.single_photo&amp;#39;, name=&amp;#39;view_single_photo&amp;#39;),&lt;/code&gt; 이 줄을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;view_single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;끝났습니다. 웹브라우저에서 &lt;code&gt;http://127.0.0.1:8000/photo/&lt;/code&gt;로 접속하면 &lt;code&gt;HttpResponse&lt;/code&gt;로 넘긴 문장이 출력되는 걸 보실 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;05-hello_world_by_views.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;(3) urls.py&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt;에는 Django의 &lt;code&gt;urls&lt;/code&gt; 모듈에 있는 &lt;code&gt;url&lt;/code&gt; 함수를 이용하여 URL 연결자를 만들어서 &lt;code&gt;urlpatterns&lt;/code&gt;에 넣습니다. &lt;code&gt;urlpatterns&lt;/code&gt;는 url 함수로 만든 객체를 담은 객체이며 그냥 &lt;code&gt;list&lt;/code&gt; 자료형입니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;patterns&lt;/code&gt; 함수는 두 종류 인자를 받습니다. 하나는 &lt;code&gt;prefix&lt;/code&gt;인데, 맨 앞에 있는 아무 내용이 없는 문자형 자료(객체)인 &lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt;가 &lt;code&gt;prefix&lt;/code&gt;입니다. &lt;code&gt;prefix&lt;/code&gt;는 따로 설명하겠습니다. &lt;code&gt;prefix&lt;/code&gt; 뒤에 나오는 부분은 &lt;code&gt;url&lt;/code&gt; 함수로 만든 URL 연결자들입니다. 그냥 쭈욱 나열한 것 뿐입니다.&lt;/p&gt;

&lt;p&gt;그럼 주소 연결자를 만드는 &lt;code&gt;url&lt;/code&gt; 함수 부분을 보겠습니다. 이 함수는 총 다섯 개 인자를 받습니다. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;regex : 주소 패턴 (정규표현식)&lt;/li&gt;
&lt;li&gt;view : 연결할 View&lt;/li&gt;
&lt;li&gt;prefix : 연결할 View 이름에 대한 접두사&lt;/li&gt;
&lt;li&gt;name : 주소 연결자 이름&lt;/li&gt;
&lt;li&gt;kwargs : &lt;code&gt;urls&lt;/code&gt;에서 View로 전달할 &lt;code&gt;dict&lt;/code&gt;형(사전형) 인자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;regex&lt;/code&gt;와 &lt;code&gt;view&lt;/code&gt;는 필수 인자이고, 나머지는 생략해도 됩니다. 우리가 &lt;code&gt;urls.py&lt;/code&gt;에 추가한 &lt;code&gt;url(r&amp;#39;^photo/$&amp;#39;, &amp;#39;photo.views.single_photo&amp;#39;, name=&amp;#39;view_single_photo&amp;#39;),&lt;/code&gt;를 기준으로 놓고 보면 이러합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;regex : &lt;code&gt;r&amp;#39;^photo/$&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;view : &lt;code&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;name : &lt;code&gt;name=&amp;#39;view_single_photo&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;name&lt;/code&gt; 인자는 생략해도 된다고 했으니, 한 번 생략해서 &lt;code&gt;urls.py&lt;/code&gt;를 저장한 후 웹브라우저에서 &lt;code&gt;/photo/&lt;/code&gt;로 접속해보세요. 아무 이상 없을 겁니다. 이 &lt;code&gt;name&lt;/code&gt; 인자는 템플릿에서 URL 연결자 이름으로 주소를 출력하는 등 몇 가지 편의에 쓰이며 유용합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;view&lt;/code&gt; 인자엔 실행할 함수의 이름경로를 문자열을 지정합니다. &lt;code&gt;photo.views.single_photo&lt;/code&gt;란 &lt;code&gt;photo&lt;/code&gt; 앱(패키지, 디렉터리) 안에 있는 &lt;code&gt;views&lt;/code&gt; 모듈(&lt;code&gt;views.py&lt;/code&gt;)의 &lt;code&gt;single_photo&lt;/code&gt; 함수를 뜻합니다. &lt;code&gt;single_photo&lt;/code&gt; 함수는 &lt;code&gt;views.py&lt;/code&gt;에서 “3번...3번 사진을 보여 드릴게요”라는 문자열을 반환하는 함수지요. 앞서 “4. &lt;code&gt;BaseHandler&lt;/code&gt;에서 이 함수를 실행하여 결과값인 출력물을 받음.”라고 설명한 부분이 바로 이 부분입니다. View 함수는 “3번...” 문자열을 반환하는데(&lt;code&gt;return&lt;/code&gt;) 그 반환받는 주체가 바로 &lt;code&gt;BaseHandler&lt;/code&gt;입니다. 물론 이 View 함수를 실행하는 주체이기도 하고요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;prefix&lt;/code&gt;는 &lt;code&gt;view&lt;/code&gt; 인자에 문자열로 지정하는 View 경로를 간결하게 줄여주는 편의 요소입니다. &lt;code&gt;photo&lt;/code&gt; 앱의 &lt;code&gt;views&lt;/code&gt; 모듈에 있는 여러 함수를 URL에 연결한다면 &lt;code&gt;urls.py&lt;/code&gt;가 이런 모양이 될 겁니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/2$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/3$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/4$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/5$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/6$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo6&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/7$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo7&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/8$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;어우, 기계가 할 일을 사람이 하고 있는 광경이네요. &lt;code&gt;prefix&lt;/code&gt;를 이용해서 View 명기되는 이름경로를 줄여보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/2$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/3$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/4$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/5$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/6$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo6&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/7$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo7&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/8$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;매번 &lt;code&gt;photo.views&lt;/code&gt;를 &lt;code&gt;prefix&lt;/code&gt;에 명기하고 이후에 붙는 URL 연결자의 View 지정 부분에선 생략했습니다. Django 내부에서도 이 &lt;code&gt;prefix&lt;/code&gt;는 되게 단순하게 처리합니다. (&lt;code&gt;django/conf/urls/__init__.py&lt;/code&gt; 참조)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉, &lt;code&gt;prefix&lt;/code&gt;가(가령, &lt;code&gt;&amp;#39;photo.view&amp;#39;&lt;/code&gt;) 있으면 &lt;code&gt;view&lt;/code&gt; 이름(가령, &lt;code&gt;&amp;#39;single_photo&amp;#39;&lt;/code&gt;) 앞에 덧붙이는 거지요. 그냥 덧붙이면 &lt;code&gt;&amp;#39;photo.viewsingle_photo&amp;#39;&lt;/code&gt;처럼 돼버리니 접두사와 이름 사이에 &lt;code&gt;.&lt;/code&gt;을 추가한 것이고요.&lt;/p&gt;

&lt;p&gt;그런데 &lt;code&gt;url&lt;/code&gt; 함수의 인자로 들어가는 &lt;code&gt;prefix&lt;/code&gt; 인자인데 &lt;code&gt;patterns&lt;/code&gt; 함수의 &lt;code&gt;prefix&lt;/code&gt; 인자에 접두사를 넣었네요? 실제로 우리에게 의미있게 쓰이는 &lt;code&gt;prefix&lt;/code&gt;는 &lt;code&gt;patterns&lt;/code&gt; 함수의 &lt;code&gt;prefix&lt;/code&gt;입니다. &lt;code&gt;patterns&lt;/code&gt; 함수로 &lt;code&gt;prefix&lt;/code&gt;를 지정하면, 이후에 지정된 URL 연결자인 &lt;code&gt;url&lt;/code&gt; 함수로 &lt;code&gt;prefix&lt;/code&gt;를 넘겨줍니다. 다시말해, &lt;code&gt;url&lt;/code&gt; 함수의 &lt;code&gt;prefix&lt;/code&gt;는 우리가 직접 쓰기 보다는 Django가 쓰는 데 필요한 겁니다.&lt;/p&gt;

&lt;p&gt;주의할 점은 &lt;code&gt;patterns&lt;/code&gt; 함수의 &lt;code&gt;prefix&lt;/code&gt;는 이 함수가 실행되면서 넘겨받는 URL연결자들 모두에 적용이 된다는 점입니다. 예를 들어, &lt;code&gt;single_photo5&lt;/code&gt;부터 &lt;code&gt;single_photo8&lt;/code&gt;은 &lt;code&gt;image&lt;/code&gt; 앱의 &lt;code&gt;views&lt;/code&gt;에 있는 함수라고 가정하지요. 이럴 경우 &lt;code&gt;prefix&lt;/code&gt;를 다시 지정해야 합니다. 어떻게 해야 할까요? 힌트는 &lt;code&gt;patterns&lt;/code&gt; 함수의 결과값을 담는 &lt;code&gt;urlpatterns&lt;/code&gt;가 그냥 &lt;code&gt;list&lt;/code&gt; 자료형이라는 점입니다. 힌트가 아니라 답이군요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/2$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/3$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/4$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;image.views&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/5$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo5&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/6$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo6&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/7$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo7&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/8$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다른 &lt;code&gt;prefix&lt;/code&gt;를 지정한 &lt;code&gt;patterns&lt;/code&gt; 함수를 실행하고, 그 결과값을 &lt;code&gt;urlpatterns&lt;/code&gt;에 덧이으면 됩니다. &lt;code&gt;urlpatterns&lt;/code&gt;가 &lt;code&gt;list&lt;/code&gt; 자료형이니 &lt;code&gt;urlpatterns.append( ... )&lt;/code&gt; 이렇게 추가해도 됩니다.&lt;/p&gt;

&lt;p&gt;기왕 기계가 할 일을 사람이 하지 않고 기계가 하도록 한 김에 좀 더 간결히 줄여보겠습니다. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/(?P&amp;lt;photo_id&amp;gt;\d+)$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;/photo/&lt;/code&gt; URL 뒤에 붙는 숫자를 정규표현식으로 패턴화하여 지정한 겁니다. &lt;code&gt;\d+&lt;/code&gt; 부분이 바로 숫자(Decimal)가 하나 이상 있다는 걸 뜻하며, URL이 이 패턴에 해당되면 &lt;code&gt;single_photo&lt;/code&gt; 함수로 연결됩니다. Pystagram 기획 내용에 따르면 개별 사진을 보는 URL은 &lt;code&gt;/photo/&amp;lt;사진 ID&amp;gt;/&lt;/code&gt;이니 &lt;code&gt;urls.py&lt;/code&gt;도 위 내용으로 정하겠습니다. 아참, &lt;code&gt;name&lt;/code&gt; 인자까지 덧붙이겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/(?P&amp;lt;photo_id&amp;gt;\d+)$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;view_single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 정도로 Django의 URL Dispatch 기능의 작동법과 사용법 설명을 마치고, 추가 기능은 필요하면 그때 그때 설명하겠습니다. 아참, &lt;code&gt;url&lt;/code&gt; 함수가 받는 마지막 인자인 &lt;code&gt;kwargs&lt;/code&gt;는 부록에서 설명하겠습니다. &lt;/p&gt;

&lt;h4&gt;(4) 개별 사진 보기 View - 2&lt;/h4&gt;

&lt;p&gt;웹브라우저에서 &lt;code&gt;/photo/&amp;lt;사진 ID&amp;gt;/&lt;/code&gt;, 예를 들어 &lt;code&gt;/photo/3&lt;/code&gt;으로 접근하면 “TypeError at /photo/3”이라는 오류가 뜹니다. 내용은 
“single&lt;em&gt;photo() got an unexpected keyword argument &amp;#39;photo&lt;/em&gt;id&amp;#39;”이고요. &lt;code&gt;single_photo&lt;/code&gt; 함수로 &lt;code&gt;photo_id&lt;/code&gt;라는 인자를 넘길려는데 &lt;code&gt;single_photo&lt;/code&gt; 함수가 받지 않아서 그렇습니다. &lt;code&gt;photo_id&lt;/code&gt;는 &lt;code&gt;urls.py&lt;/code&gt;에서 &lt;code&gt;(?P&amp;lt;photo_id&amp;gt;\d+)&lt;/code&gt; 바로 이 부분입니다. 정규표현식 패턴에 해당되는 문자열이 &lt;code&gt;?P&amp;lt;이름&amp;gt;&lt;/code&gt;에 지정된 &lt;code&gt;이름&lt;/code&gt;에 저장되어 View 함수의 인자로 넘겨집니다. &lt;code&gt;/photo/숫자&lt;/code&gt; URL에서 숫자가 &lt;code&gt;photo_id&lt;/code&gt;라는 이름을 갖는 인자에 저장되어 &lt;code&gt;single_photo&lt;/code&gt; 함수로 전달됩니다. 그래서 &lt;code&gt;single_photo&lt;/code&gt; 함수가 이 인자를 받도록 해야 합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;{0}번...{0}번 사진을 보여 드릴게요.&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫 번째로 받는 인자인 &lt;code&gt;request&lt;/code&gt;는 View 함수가 받는 기본 인자입니다. 요청(request)과 관련된 여러 정보와 기능을 수행합니다. 많은 일을 수행하는 객체이니 앞으로 그때 그때 설명하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt;에서 View 함수로 넘길 인자 이름을 지정하지 않아도 별 문제는 없습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;url(r&amp;#39;^photo/(\d+)$&amp;#39;, &amp;#39;photo.views.single_photo&amp;#39;, name=&amp;#39;view_single_photo&amp;#39;),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt;에서 위와 같이 &lt;code&gt;?P&amp;lt;photo_id&amp;gt;&lt;/code&gt;을 빼서 인자 이름을 없애면, 인자는 이름없이 배열 형태로 View 함수로 넘겨집니다. 인자를 받는 View 함수에서는 &lt;code&gt;*args&lt;/code&gt; 인자로 받으면 됩니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;{0}번...{0}번 사진을 보여 드릴게요.&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인자가 여러 개라면 넘겨받은 순서대로 &lt;code&gt;args&lt;/code&gt;에 인자들이 &lt;code&gt;args[0]&lt;/code&gt;, &lt;code&gt;args[1]&lt;/code&gt;, &lt;code&gt;args[2]&lt;/code&gt;, ... 이런 식으로 담깁니다. 하지만 코드를 알아보기 안 좋으니 어지간히 변수 이름 짓는 게 고통스러운 게 아니라면 인자 이름을 지정하길 권합니다.&lt;/p&gt;

&lt;p&gt;자, 넘겨받은 &lt;code&gt;photo_id&lt;/code&gt; 인자를 Python의 문자형 객체의 포맷 메서드를 이용해 출력하고 있으니, 웹브라우저에서 &lt;code&gt;/photo/&lt;/code&gt; 뒤에 여러가지 &lt;strong&gt;숫자&lt;/strong&gt;를 넣어서 접근해보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2014/11/05-view_with_photo_id.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;숫자없이 &lt;code&gt;/photo/&lt;/code&gt;로 또는 숫자가 아닌 문자가 포함된 주소(가령 &lt;code&gt;/photo/3-1023&lt;/code&gt;이나 &lt;code&gt;/photo/3번/&lt;/code&gt;)로도 접근해보세요. “Page not found (404)” 오류가 출력됩니다. &lt;code&gt;urls.py&lt;/code&gt;에 지정한 URL 패턴에 해당되는 게 없으면 &lt;code&gt;404&lt;/code&gt; 오류가 발생합니다. &lt;code&gt;urlresolver&lt;/code&gt;에서 일으키지요.&lt;/p&gt;

&lt;h3&gt;2. Photo 모델에서 사진 정보를 가져와 출력하기&lt;/h3&gt;

&lt;h4&gt;(1) Photo 모델로 객체 찾기(lookup)&lt;/h4&gt;

&lt;p&gt;코드부터 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;{photo_id}번...{photo_id}번 사진을 보여 드릴게요.&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;{photo_url}&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;photo_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 &lt;code&gt;from .models import Photo&lt;/code&gt;문으로 &lt;code&gt;photo&lt;/code&gt; 앱에 있는 &lt;code&gt;models&lt;/code&gt; 모듈에서 &lt;code&gt;Photo&lt;/code&gt; 모델을 가져옵니다. &lt;code&gt;.models&lt;/code&gt;는 &lt;code&gt;photo.models&lt;/code&gt;와 같은 내용인데, &lt;code&gt;views.py&lt;/code&gt; 파일과 같은 디렉터리(경로)에 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;그 다음에 &lt;code&gt;Photo&lt;/code&gt; 모델의 &lt;code&gt;objects&lt;/code&gt; 객체의 &lt;code&gt;get&lt;/code&gt; 메서드를 이용해 &lt;code&gt;photo_id&lt;/code&gt;에 해당하는 사진 데이터(Photo 모델의 객체(instance)) 가져와서 &lt;code&gt;photo&lt;/code&gt;라는 변수에 담습니다. &lt;code&gt;Photo&lt;/code&gt; 모델에 있는 &lt;code&gt;image_file&lt;/code&gt;이라는 필드에 접근해서 &lt;code&gt;url&lt;/code&gt; 속성(property)를 이용해 지정한 사진의 URL을 출력합니다.&lt;/p&gt;

&lt;p&gt;모델을 다루는 건 나중에 자세히 다루니, 이번 편에서는 모델을 이용해 데이터를 가져오는 것만 다뤘습니다.&lt;/p&gt;

&lt;h4&gt;(2) 찾는 객체가 없으면 404 오류 출력&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;/photo/숫자&lt;/code&gt; URL 중 숫자를 되게 큰 값, 예를 들어 1023을 넣어보세요. “DoesNotExist at /photo/1023”라는 오류가 출력됩니다. 사진 ID 중 1023번인 자료가 없어서 모델 영역에서 발생한 오류입니다. 이 오류 대신 “사진이 없다”는 안내를 하려면 이 오류에 대한 예외(exception) 처리를 해야 합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;사진이 없습니다.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;DoesNotExist&lt;/code&gt;라는 &lt;code&gt;Exception&lt;/code&gt;이 발생하면 이를 try/except 문으로 잡아내서 예외처리를 한 겁니다. 그런데 &lt;code&gt;Photo&lt;/code&gt; 모델로 사진 데이터를 가져오려는데 데이터가 없는 상황은 “없는 페이지”라고 봐도 됩니다. 그래서 이런 상황에선 &lt;code&gt;404&lt;/code&gt; 오류를 일으키고 &lt;code&gt;404&lt;/code&gt; 오류 안내 페이지를 따로 만들어 제공하는 게 낫습니다. 이걸 간편하게 해주는 것이 &lt;code&gt;get_object_or_404&lt;/code&gt; 함수입니다. 이 함수는 &lt;code&gt;django.shortcuts&lt;/code&gt; 모듈에 있습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_object_or_404&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_object_or_404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런 식으로 사용하면 됩니다. 첫 번째 인자로 모델을 넣고, 그 뒤로는 탐색 키워드 인자를 넣습니다. 탐색 키워드 인자란 &lt;code&gt;pk=photo_id&lt;/code&gt;와 같이 모델에서 객체를 찾는 데 쓰이는 내용을 뜻합니다.&lt;/p&gt;

&lt;p&gt;내용을 변경한 전체 코드를 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# coding: utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_object_or_404&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_object_or_404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;{photo_id}번...{photo_id}번 사진을 보여 드릴게요.&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;{photo_url}&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;photo_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/uploads/2014/11/05-view_data_from_model.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;photo&lt;/code&gt; 모델을 이용해 사진 데이터를 가져와 관련 정보를 웹 브라우저에 출력까지 했습니다. 관련 정보를 출력한다고 했지 사진을 출력한다고는 안 했습니다. ^^ 하지만, 이대로 끝마치기엔 서운하니 사진 출력까지만 하고 설명은 다른 편에서 다루겠습니다.&lt;/p&gt;

&lt;h4&gt;(3) 업로드한 파일을 URL로 접근하기&lt;/h4&gt;

&lt;p&gt;먼저 화면에 출력된 사진 파일 URL로 이미지를 출력하도록 HTML 태그를 출력할 내용에 추가하겠습니다. &lt;code&gt;img&lt;/code&gt; 태그를 쓰는 것이지요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;response_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;{photo_url}&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 줄을 기존 &lt;code&gt;response_text&lt;/code&gt; 변수가 있는 줄 아래에 추가합니다. 그런 뒤 웹브라우저에서 접속해보세요. 이미지가 출력되지 않습니다. 화면에 출력된 이미지 파일 URL을 서버 호스트 내용과 합쳐서, 그러니까 &lt;code&gt;http://localhost:8000/static_files/...&lt;/code&gt; 이렇게 만들어서 웹브라우저로 접근해보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2014/11/05-404_without_media_url.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;404&lt;/code&gt; 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;Django는 이용자가 업로드한 파일은 &lt;code&gt;MEDIA_URL&lt;/code&gt;과 &lt;code&gt;MEDIA_ROOT&lt;/code&gt;라는 설정값을 참조하여 제공(serve)합니다. 모델의 &lt;code&gt;FileField&lt;/code&gt; 필드 클래스나 &lt;code&gt;ImageField&lt;/code&gt; 필드 클래스로 지정하는 &lt;code&gt;upload_to&lt;/code&gt; 인자는 &lt;code&gt;MEDIA_URL&lt;/code&gt;과 &lt;code&gt;MEDIA_ROOT&lt;/code&gt; 경로 아래에 위치합니다. 이 두 설정값을 무시하는 것도 가능하지만 운영하는 데 번거롭고 보안에도 좋진 않습니다.&lt;/p&gt;

&lt;p&gt;자, 그럼 &lt;code&gt;MEDIA_URL&lt;/code&gt;과 &lt;code&gt;MEDIA_ROOT&lt;/code&gt;를 설정하겠습니다. &lt;code&gt;pystagram&lt;/code&gt; 패키지(디렉터리) 안에 있는 &lt;code&gt;settings.py&lt;/code&gt; 파일을 열고 맨 아래에 다음 두 줄을 추가합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;MEDIA_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;static_files&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;업로드된 파일은 &lt;code&gt;static_files&lt;/code&gt; 라는 URL을 따르므로 &lt;code&gt;urls.py&lt;/code&gt;에도 이와 관련된 내용을 등록해야 합니다. 원리는 이렇습니다. &lt;code&gt;static_files&lt;/code&gt; 뒤에 나오는 경로를 받은 뒤 지정된 경로에 있는 이미지 파일을 읽어온 후 웹브라우저에 보내는 겁니다. 경로에 없으면 &lt;code&gt;404&lt;/code&gt; 오류를 일으키고요. 아, 생각만 해도 귀찮습니다. 다행히 Django엔 이런 걸 처리해주는 기능이 이미 있습니다. &lt;code&gt;django.conf.urls.static&lt;/code&gt; 모듈에 있는 &lt;code&gt;static&lt;/code&gt; 함수지요. &lt;code&gt;urls.py&lt;/code&gt; 맨 아래에 다음 줄을 추가해보세요.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;static_files&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document_root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MEDIA_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자, 끝났습니다. 이제 다시 웹브라우저에서 개별 사진 URL로 접근해보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2014/11/05-view_photo_successfully.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;실은 업로드한 파일의 URL에 들어가는 &lt;code&gt;static_files&lt;/code&gt;은 모델에서 지정하지 않고 &lt;code&gt;settings.py&lt;/code&gt;에서 지정해야 합니다. 강좌 진행을 위해 &lt;code&gt;photo&lt;/code&gt; 모델의 &lt;code&gt;image_file&lt;/code&gt;과 &lt;code&gt;filtered_image_file&lt;/code&gt; 필드에 &lt;code&gt;static_files&lt;/code&gt; 경로를 넣은 것이지요. 나중에 이와 관련된 내용을 자세히 다루면서 손보도록 하겠습니다. :)&lt;/p&gt;

&lt;h3&gt;3. 부록&lt;/h3&gt;

&lt;h4&gt;(1) url 함수의 kwargs 역할&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;url&lt;/code&gt; 함수에 사용되는 인자인 &lt;code&gt;kwargs&lt;/code&gt;는 View 함수로 임의 인자를 건내는 데 사용됩니다. View 함수는 URL 패턴에서 지정된 값을 인자로 건내받는데, URL에는 어떤 상태나 정보를 나타내지 않으면서 상황에 따라 View 함수에 넘기는 값을 따로 지정하려면 &lt;code&gt;kwargs&lt;/code&gt; 인자를 활용해야 합니다. 예를 들어, 개별 사진을 &lt;code&gt;/photo/&amp;lt;숫자ID&amp;gt;/&lt;/code&gt;이나 &lt;code&gt;/hidden_photo/&amp;lt;숫자ID&amp;gt;/&lt;/code&gt; URL로 접근할 수 있고, 두 URL 모두 &lt;code&gt;single_photo&lt;/code&gt; 함수가 대응한다고 가정하겠습니다. 어떤 URL로 접근했는지 &lt;code&gt;single_photo&lt;/code&gt; 함수에서 알려면 접근한 URL을 분석해도 되지만, URL엔 보이지 않는 정보를 &lt;code&gt;single_photo&lt;/code&gt; 함수에 인자로 보내면 좀 더 편할 겁니다. 이 인자를 &lt;code&gt;hidden&lt;/code&gt;이라고 하겠습니다. 먼저 &lt;code&gt;urls.py&lt;/code&gt;에 &lt;code&gt;kwargs&lt;/code&gt; 인자를 정의합니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^photo/(?P&amp;lt;photo_id&amp;gt;\d+)$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;view_single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^hidden_photo/(?P&amp;lt;photo_id&amp;gt;\d+)$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;photo.views.single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;view_hidden_single_photo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;hidden&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번엔 &lt;code&gt;single_photo&lt;/code&gt; View 함수가 &lt;code&gt;hidden&lt;/code&gt; 인자를 받을 차례입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;single_photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# todo: 뭔가 은밀한 작업을 합시다&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;single_photo&lt;/code&gt; 함수는 따로 &lt;code&gt;hidden&lt;/code&gt; 인자를 넘기지 않으면 &lt;code&gt;False&lt;/code&gt; 값으로 &lt;code&gt;hidden&lt;/code&gt; 인자를 받습니다. 즉, &lt;code&gt;/photo/&amp;lt;숫자ID&amp;gt;/&lt;/code&gt;로 접근하는 경우입니다. 하지만, &lt;code&gt;/hidden_photo/&amp;lt;숫자ID&amp;gt;/&lt;/code&gt;로 접근하면 &lt;code&gt;hidden&lt;/code&gt; 인자는 &lt;code&gt;True&lt;/code&gt;로 &lt;code&gt;single_photo&lt;/code&gt; 함수에 넘겨집니다. &lt;code&gt;/hidden_photo/&amp;lt;숫자ID&amp;gt;/&lt;/code&gt; URL을 아는 사람만 &lt;code&gt;hidden&lt;/code&gt;이 &lt;code&gt;True&lt;/code&gt;인 상황을 만끽하게 되겠지요.&lt;/p&gt;

&lt;h4&gt;(2) render와 HttpResponse&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;views.py&lt;/code&gt;를 처음 열면 맨 위에 &lt;code&gt;from django.shortcuts import render&lt;/code&gt;라는 부분이 있습니다. 그런데 우리는 이 &lt;code&gt;render&lt;/code&gt; 함수를 한 번도 쓰지 않고, &lt;code&gt;HttpResponse&lt;/code&gt;를 따로 불러들여서 이를 이용해 화면에 뭔가를 출력했습니다. 이 둘의 차이는 뭘까요?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HttpResponse&lt;/code&gt;는 Django의 View가 HTTP handler로 보내는 출력물의 가장 기본 형태인 객체를 만드는 클래스입니다. HTTP handler가 건내받는 출력물의 가장 기본형이지요. 그래서 &lt;code&gt;HttpResponse&lt;/code&gt; 자체는 템플릿을 같은 걸 처리하는 기능을 담고 있지 않습니다. 그래서 템플릿을 따로 처리하여 그려낸(rendered) 출력물을 문자열 그 자체(plain text)로 받아서 출력해야 합니다. 이런 처리에 필요한 코드는 꽤 반복되므로 반복되는 부분을 별도 함수로 만들어서 편하게 템플릿으로 그려낸 출력물을 &lt;code&gt;HttpResponse&lt;/code&gt;로 보내는 함수가 바로 &lt;code&gt;render&lt;/code&gt;입니다. &lt;code&gt;render&lt;/code&gt; 함수를 보면 반환하는 최종 값도 결국은 &lt;code&gt;HttpResponse&lt;/code&gt; 클래스로 만든 객체입니다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpresponse_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;(3) 소스 파일에 한글을 입력하니 오류가 떠요!&lt;/h4&gt;

&lt;p&gt;혹시 &lt;code&gt;views.py&lt;/code&gt; 파일 맨 위에 &lt;code&gt;# coding: utf-8&lt;/code&gt; 내용을 넣지 않은 채 &lt;code&gt;views.py&lt;/code&gt; 파일 안에 한글을 직접 입력했다면 &lt;code&gt;SyntaxError&lt;/code&gt; 오류가 발생합니다. 오류 내용은 &lt;code&gt;Non-ASCII character &amp;#39;무엇&amp;#39; in file&lt;/code&gt;인데, 파일에 ascii 문자가 아닌 문자가 있다는 뜻입니다. Python 버전 2대를 쓰는 입문자라면 영원히(?) 고통 받는 상황입니다.&lt;/p&gt;

&lt;p&gt;이 문제는 Python 모듈(파일)에 ascii 문자의 표현 범위를 벗어나는 한글이나 한자 같은 문자가 포함되면 Python 인터프리터가 “어?! 이 문자 뭐임? 몰라, 무서워. 뱉어”라며 Syntax 예외를 일으켜서 발생합니다. 이 문제를 예방하려면 소스 파일에 ascii 문자만 입력하거나 &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0263/&quot;&gt;소스 파일이 어떤 문자형(charset)으로 작성됐는지 Python 인터프리터에게 알려줘야 합니다&lt;/a&gt;. 그 알려주는 방법이 소스 파일 상단에 &lt;code&gt;# coding: utf-8&lt;/code&gt;를 명기한 것이지요. Emacs 같은 편집기를 위해 &lt;code&gt;# -*- coding: utf-8 -*-&lt;/code&gt; 라고 명기하기도 합니다. &lt;/p&gt;

&lt;p&gt;Python 2의 기본 문자형(charset)이 ascii이기 때문에 Python 2를 쓰는 이상 유니코드와 관련된 고통은 감수해야 합니다. :) 아, 이런 문제는 Python 3에선 발생하지 않습니다.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;이것으로 강좌 5편을 마칩니다. 이번에도 늦어서 죄송합니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/05-fullsource/pystagram&quot;&gt;5편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 11 Nov 2014 12:00:49 +0900</pubDate>
        <link>http://blog.hannal.com//2014/11/start_with_django_webframework_05</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/11/start_with_django_webframework_05</guid>
        
        <category>django</category>
        
        <category>view</category>
        
        <category>url dispatch</category>
        
        
        <category>start_with_django_webframework</category>
        
      </item>
    
      <item>
        <title>유한한 기회</title>
        <description>&lt;p&gt;시간은 금이라고 하는데, 시간이 소중하다고 생각하지만 꽤 막연하게 느껴진다. 지구와 태양 간 평균 거리는 149,597,870,700 m인데 이를 1천문단위(au)라고 줄이듯이 나도 시간을 다른 단위로 바꿔 보기로 했다. 단위는 기회.&lt;/p&gt;

&lt;p&gt;내가 80세에 죽는다고 가정하면, 현재 내 생활 방식을 토대로 산정한 내게 남은 기회들과 횟수는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;아내랑 데이트 : 1,800회 (1년 40회)&lt;/li&gt;
&lt;li&gt;아내와 여행 : 45회 (1년 1회)&lt;/li&gt;
&lt;li&gt;식사 : 32,850회 (1일 2회)
&lt;ul&gt;
&lt;li&gt;아내가 해준 식사 : 9,385회 (일주일 중 2일)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/li&gt;
&lt;li&gt;게임
&lt;ul&gt;
&lt;li&gt;개발과 출시 : 15회 (3년에 한 개 개발, 출시, 운영)&lt;/li&gt;
&lt;li&gt;즐기기 : 7,020시간 (1주일 세 시간)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;독서 : 21,060시간, 1,642권 (1주일 아홉 시간, 10일에 한 권)&lt;/li&gt;
&lt;li&gt;운동 : 4,680회 (1주일 2회)&lt;/li&gt;
&lt;li&gt;아내랑 부비부비
&lt;ul&gt;
&lt;li&gt;뽀뽀 : 1,170회 (2주일 1회)&lt;/li&gt;
&lt;li&gt;포옹 : 4,680회 (1주일 2회)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커피 : 16,425회 (하루 한 잔)&lt;/li&gt;
&lt;li&gt;친구와 수다 : 585회 (한 달에 1회)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;생각보다 훨씬 적은 숫자가 나왔다. 오롯이 내 기대수명으로 기회를 계산할 수 없는 부모님과 갖는 기회 횟수는 대부분 두 자리 수이다.&lt;/p&gt;
&lt;p&gt;내가 내린 결론은, 횟수를 늘리는 데까지 늘리지만 한계가 명확하니 각 기회의 질을 높여야겠다는 점이다. 그리고 나이를 먹을수록 각 기회를 누리기 더 힘이 들테니 몸과 마음이 건강하도록 노력해야겠다는 점이다.&lt;/p&gt;
&lt;p&gt;개똥같은 커피를 마시는 데 16,500회도 안 남은 기회를, 15회도 안 남은 게임 개발 기회를 개똥같은 게임을 만드는 데 쓰지 않겠다. 유한한 기회를 낭비하지 않아야겠다.&lt;/p&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Oct 2014 01:47:21 +0900</pubDate>
        <link>http://blog.hannal.com//2014/10/the_time_that_remains</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/10/the_time_that_remains</guid>
        
        <category>시간</category>
        
        <category>기회</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>4. Photo 모델로 Admin 영역에서 데이터 다루기</title>
        <description>&lt;ul&gt;
&lt;li&gt;마지막 갱신일시 : 2014년 10월 5일 3시 15분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 편에서는 Django framework이 제공하는 Admin 기능을 이용하여 Photo 모델로 데이터를 추가하거나 내용을 고치거나 삭제해 보겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Photo 모델로 데이터 넣기&lt;/h3&gt;

&lt;h4&gt;(1) Admin에서 Photo 모델에 데이터 넣기&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델을 이용하여 데이터베이스를 넣겠습니다. View에 관련 기능을 구현해도 되지만, Django의 장점 중 하나인 Admin 기능을 이용해서 자료를 관리해 보겠습니다. &lt;code&gt;photo&lt;/code&gt; 앱에 있는 &lt;code&gt;admin.py&lt;/code&gt; 파일에 관련 코드를 작성해 넣으면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;# coding: utf-8

from django.contrib import admin

from photo.models import Photo

admin.site.register(Photo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Django framework에는 Admin 기능이 admin이라는 &lt;strong&gt;앱&lt;/strong&gt; 형태로 제공되는데, &lt;code&gt;contrib&lt;/code&gt; 패키지 안에 &lt;code&gt;admin&lt;/code&gt; 패키지로 존재합니다. &lt;code&gt;admin.site.register&lt;/code&gt;는 &lt;code&gt;admin&lt;/code&gt; 패키지에 있는 &lt;code&gt;sites&lt;/code&gt; 모듈에서 &lt;code&gt;AdminSite&lt;/code&gt; 클래스를 &lt;code&gt;site&lt;/code&gt;라는 이름을 갖는 인스턴스로 만들고, 이 &lt;code&gt;site&lt;/code&gt; 객체의 인스턴스 메서드인 &lt;code&gt;register&lt;/code&gt;로 지정한 모델을 Admin 영역에서 관리하도록 등록합니다. 즉, &lt;code&gt;sites.py&lt;/code&gt;에 이렇게 되어 있는 겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;class AdminSite(object):
    # code들
    pass

site = AdminSite()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;복잡하게 느껴지신다면 그냥 &lt;code&gt;admin.site.register&lt;/code&gt;라고 외우시면 됩니다. 따로 건드릴 일이 없거든요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;photo&lt;/code&gt;앱의 &lt;code&gt;admin.py&lt;/code&gt;를 저장하고 나면 Django의 개발용 내장 웹서버(이하 내장 웹서버)가 자동으로 재실행 됩니다. 재실행이 되고 나면 웹 브라우저에서 &lt;code&gt;http://127.0.0.1:8000/admin/&lt;/code&gt;로 접속해 보세요. 로그인에 필요한 ID와 비밀번호를 묻는데, 지난 3편에서 &lt;code&gt;manage.py&lt;/code&gt;로 만든 계정 정보로 접속하면 됩니다. 비밀번호가 기억이 나질 않는다면 &lt;code&gt;manage.py&lt;/code&gt;에 &lt;code&gt;changepassword&lt;/code&gt; 명령어로 비밀번호를 새로 생성하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/10/04-login_to_admin.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그인을 했다면 &lt;code&gt;Photo&lt;/code&gt;라는 영역이 있고 그 아래에 &lt;code&gt;Photos&lt;/code&gt;라는 항목이 보입니다. 그 항목이 바로 &lt;code&gt;Photo&lt;/code&gt; 모델입니다. &lt;code&gt;Photo&lt;/code&gt; 항목 오른쪽에 &lt;code&gt;Add&lt;/code&gt;를 눌러보세요. &lt;code&gt;Photo&lt;/code&gt; 모델에 데이터를 넣는 &lt;strong&gt;Form&lt;/strong&gt;이 나타납니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/10/04-add_photo_form_in_admin.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어차피 싹 지우고 다시 데이터는 채워 넣을 거니까 아무 자료나 넣어보세요. 사진이 아닌 파일도 지정해보고 본문(description) 입력란에 아무 내용도 넣지 말고 저장도 해보세요. 또 본문 입력란에 500글자가 넘는 글자를 넣어 보세요. 우리가 뭔가 따로 조치를 취한 게 없는데도 파일이 이미지 파일인지 아닌지, 본문이 채워져 있는지를 검사하고 본문에 500자 이상 입력이 안 되게 제한됩니다.&lt;/p&gt;

&lt;p&gt;Django의 &lt;code&gt;forms&lt;/code&gt; 기능(패키지)이 이런 처리를 하며, 이미지 파일이어야 하고 본문은 반드시 내용이 있어야 한다거나 본문 길이와 같은 검사 항목과 정보를 우리가 만든 &lt;code&gt;Photo&lt;/code&gt; 모델에서 참조합니다. &lt;code&gt;image_file&lt;/code&gt; 모델 속성을 &lt;code&gt;ImageField&lt;/code&gt;라는 필드 타입으로 지정해서 업로드 되는 파일이 이미지 파일인지 검사하는 것이며, &lt;code&gt;description&lt;/code&gt; 모델 속성을 최대 길이 500자로 지정한 &lt;code&gt;TextField&lt;/code&gt; 필드 타입으로 지정해서 문자열 길이가 500자 이하인지 검사합니다. 생성일시인 &lt;code&gt;created_at&lt;/code&gt;은 자동으로 값이 저장되는 옵션을 주어서 입력란으로 등장하지 않았습니다.&lt;/p&gt;

&lt;p&gt;몇 가지 실험해보죠. &lt;code&gt;photo&lt;/code&gt; 앱의 &lt;code&gt;Photo&lt;/code&gt; 모델에서 &lt;code&gt;created_at&lt;/code&gt;을 고치겠습니다. &lt;code&gt;auto_now_add&lt;/code&gt;와 &lt;code&gt;auto_now&lt;/code&gt; 필드 옵션을 모두 제거하겠습니다. 그리고 &lt;code&gt;description&lt;/code&gt;의 필드 타입에 &lt;code&gt;blank&lt;/code&gt;라는 필드 옵션을 &lt;code&gt;True&lt;/code&gt;로 추가 지정하겠습니다. 코드로 보면 이렇습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;class Photo(models.Model):
    image_file = models.ImageField()
    filtered_image_file = models.ImageField()
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;모델 모듈(파일)을 저장하여 내장 웹서버가 재실행되게 한 후, &lt;code&gt;Photo&lt;/code&gt; 모델에 데이터를 추가하는 입력란 영역으로 다시 가보거나 열어보세요. &lt;code&gt;Created at&lt;/code&gt;이라는 입력란이 추가 됐습니다. 이제 Save 버튼을 눌러보세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/10/04-modified_description_created_in_admin.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;뭔가 달라졌지요? 본문란에 아무 내용을 넣지 않았는데도 무섭게 시뻘건 경고 안내가 나타나지 않습니다. 그리고, 생성일시 정보를 넣지 않았다고 경고합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;blank&lt;/code&gt; 필드 옵션은 이름 그대로 빈칸을 뜻합니다. 즉 &lt;code&gt;blank=True&lt;/code&gt;는 빈칸을 허용하겠다는 뜻입니다. 이와 비슷한 옵션으로 &lt;code&gt;null&lt;/code&gt;이 있는데, &lt;code&gt;null&lt;/code&gt;은 Python의 &lt;code&gt;None&lt;/code&gt; 자료형 객체를 뜻합니다. &lt;code&gt;null=True&lt;/code&gt;는 &lt;code&gt;None&lt;/code&gt; 자료형을 허용하겠다는 뜻입니다. 빈칸과 &lt;code&gt;None&lt;/code&gt;(null)은 의미가 완전히 다른데, 빈칸은 내용이 비어있는 &lt;strong&gt;문자형&lt;/strong&gt; 객체입니다. 데이터베이스의 테이블 구성(schema)도 전혀 달라서, &lt;code&gt;null=True&lt;/code&gt;이라고 하면 해당 컬럼(column)은 &lt;code&gt;NULL&lt;/code&gt;을 허용하도록 지정되고, &lt;code&gt;blank=True&lt;/code&gt;만 있으면 &lt;code&gt;null=True&lt;/code&gt;가 없어서 기본값인 &lt;code&gt;null=False&lt;/code&gt;로 지정되어 데이터베이스 테이블의 컬럼도 &lt;code&gt;NULL&lt;/code&gt;이 허용되지 않는 &lt;code&gt;NOT NULL&lt;/code&gt;로 지정됩니다. 그래서 &lt;code&gt;description&lt;/code&gt;에 &lt;code&gt;blank=True&lt;/code&gt; 옵션만 설정한 상태에서 빈칸인 문자형 객체 조차 넣지 않으면 데이터베이스에 자료를 넣는 중에 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;대개는 Django framework이 알아서 처리해 줍니다. 우리가 &lt;code&gt;description&lt;/code&gt;에 &lt;code&gt;None&lt;/code&gt; 객체를 직접 지정해 넣지 않는 한 보통은 별 문제 없이 작동합니다. 또 정밀하게 자료형을 검사할 게 아니라면 굳이 &lt;code&gt;null&lt;/code&gt;과 &lt;code&gt;blank&lt;/code&gt; 모두를 &lt;code&gt;True&lt;/code&gt;라고 옵션을 설정할 필요는 없습니다. 만약 두 옵션을 &lt;code&gt;True&lt;/code&gt;라고 지정한다면 우리는 다음과 같이 자료형을 검사해야 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;if not isinstance(photo.description, type(None)):
  _description = photo.description.lower()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;description&lt;/code&gt;이 &lt;code&gt;None&lt;/code&gt; 자료형이 아닌 경우(즉 문자형인 경우), 모든 영문자를 소문자로 바꾸어서 &lt;code&gt;_description&lt;/code&gt;이라는 변수에 담는 코드입니다. &lt;code&gt;lower&lt;/code&gt;라는 함수는 Python의 문자형 객체에 존재하는 인스턴스 메서드이므로 &lt;code&gt;description&lt;/code&gt;이 &lt;code&gt;None&lt;/code&gt; 자료형이라면 &lt;code&gt;lower&lt;/code&gt;라는 속성이 &lt;code&gt;None&lt;/code&gt; 자료형에 없다는 &lt;code&gt;AttributeError: &#39;NoneType&#39; object has no attribute &#39;lower&#39;&lt;/code&gt; 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;자, 이제 다음과 같이 변경한 모델 내용을 데이터베이스에도 반영해 보겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;class Photo(models.Model):
    image_file = models.ImageField()
    filtered_image_file = models.ImageField()
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;데이터베이스에 반영하는 방법은 &lt;code&gt;manage.py&lt;/code&gt;의 &lt;code&gt;makemigrations&lt;/code&gt;과 &lt;code&gt;migrate&lt;/code&gt; 명령어를 이용하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py makemigrations
Migrations for &#39;photo&#39;:
  0002_auto_20141004_1518.py:
    - Alter field description on photo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0001은 &lt;code&gt;Photo&lt;/code&gt; 모델을 처음 데이터베이스에 반영할 때 만들었으니 0002라는 일련번호가 붙은 마이그레이션 파일이 생성됩니다. &lt;code&gt;photo&lt;/code&gt;에 &lt;code&gt;description&lt;/code&gt; 필드를 변경(alter)하는 내용이라고 나오네요. &lt;code&gt;./manage.py migrate&lt;/code&gt;를 실행하면 &lt;code&gt;makemigrations&lt;/code&gt;으로 만들어진 마이그레이션 파일을 실제로 반영합니다. 번거롭게 데이터베이스 테이블을 우리가 변경하지 않아도 되니 참 편합니다.&lt;/p&gt;

&lt;p&gt;자, Admin 영역에서 이제 실제로 이미지 파일을 지정하여 Photo 모델에 데이터를 실제로 넣어 보세요.&lt;/p&gt;

&lt;h4&gt;(2) 파일 업로드 경로 지정&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Photo&lt;/code&gt; 모델에 데이터를 추가하면 업로드한 이미지 파일은 &lt;code&gt;manage.py&lt;/code&gt; 파일이 있는 곳에 저장됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/10/04-uploaded_files_location.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;관리하기 편하게 업로드 되는 파일을 &lt;code&gt;static_files/uploaded/&lt;/code&gt;에 저장하겠습니다. &lt;code&gt;Photo&lt;/code&gt; 모델에서 &lt;code&gt;ImageField&lt;/code&gt; 필드 타입에 필드 옵션인 &lt;code&gt;upload_to&lt;/code&gt;를 이용하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;image_file = models.ImageField(upload_to=&#39;static_files/uploaded&#39;)
filtered_image_file = models.ImageField(upload_to=&#39;static_files/uploaded&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위와 같이 &lt;code&gt;Photo&lt;/code&gt; 모델을 고쳐서 저장한 후 Admin 영역에서 &lt;code&gt;Photo&lt;/code&gt; 모델에 데이터를 추가해 보세요. 업로드한 이미지 파일이 &lt;code&gt;static_files/uploaded&lt;/code&gt;에 저장되어 있습니다.&lt;/p&gt;

&lt;p&gt;파일이 저장되는 경로에 자동으로 내용이 채워지는 몇 가지 규칙이 있습니다. 예를 들어, 2014년도에 올라오는 파일은 &lt;code&gt;static_files/uploaded/2014&lt;/code&gt;에 넣고, 2015년도에 올라오는 파일은 &lt;code&gt;static_files/uploaded/2015&lt;/code&gt;에 넣고자 한다면, 따로 그런 기능을 구현하지 않아도 됩니다. 우리는 네 자리 년도, 두 자리 월, 두 자리 일로 디렉터리를 구분해서 업로드 되는 파일을 저장하겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;image_file = models.ImageField(upload_to=&#39;static_files/uploaded/%Y/%m/%d&#39;)
filtered_image_file = models.ImageField(upload_to=&#39;static_files/uploaded/%Y/%m/%d&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;%Y&lt;/code&gt;, &lt;code&gt;%m&lt;/code&gt;, &lt;code&gt;%d&lt;/code&gt;가 그런 역할을 하는데, 이 문자열은 &lt;a href=&quot;https://docs.python.org/2.7/library/time.html#time.strftime&quot;&gt;Python의 strftime&lt;/a&gt;의 포맷팅(formatting)에 사용되는 형태잡기 문자열(format string) 중에서 날짜와 시간과 같은 규칙을 따릅니다.&lt;/p&gt;

&lt;p&gt;자, 이제 마지막으로 원본 이미지 파일과 필터가 적용된 이미지 파일을 다른 디렉터리에 분리해 저장하도록 하겠습니다. 원본 이미지 파일은 &lt;code&gt;static_files/uploaded/original/...&lt;/code&gt;에, 필터가 적용된 이미지 파일은 &lt;code&gt;static_files/uploaded/filtered/...&lt;/code&gt;에 저장하겠습니다. 간단하겠죠?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;image_file = models.ImageField(upload_to=&#39;static_files/uploaded/original/%Y/%m/%d&#39;)
filtered_image_file = models.ImageField(upload_to=&#39;static_files/uploaded/filtered/%Y/%m/%d&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 코드를 반영하여 내장 웹서버가 재실행되면 Admin 영역에서 사진을 올려보세요. 새 경로로 파일이 저장됩니다.&lt;/p&gt;

&lt;h5&gt;업로드 경로를 중간에 변경해도 괜찮을까?&lt;/h5&gt;

&lt;p&gt;여기서 잠깐. 우리는 중간 중간 업로드 경로를 바꾸면서 이미지 파일을 업로드 했습니다. 이러면 혹시 이전 업로드 경로로 올린 이미지 파일에 접근하지 못하는 문제가 발생하지 않을까요? 발생하지 않습니다. &lt;code&gt;upload_to&lt;/code&gt;는 업로드 된 파일을 지정한 경로에 저장할 때 참조합니다. 그래서 해당 데이터 객체의 경로는 이전 업로드 경로를 포함하여 지정됩니다.&lt;/p&gt;

&lt;h4&gt;(3) 첨부 파일 삭제하기&lt;/h4&gt;

&lt;p&gt;혹시 Admin 영역에서 추가한 &lt;code&gt;Photo&lt;/code&gt; 모델의 객체를 지워보셨나요? Admin 영역에서는 모델 객체를 추가하는 것 뿐만 아니라 기존 모델 객체를 수정하거나 지우는 기능을 기본 제공합니다. 한 번 모델 객체를 지워 보세요.&lt;/p&gt;

&lt;p&gt;이상한 점 발견하셨나요? 모델 객체를 지우면 객체 자체는 지워지는데 그 객체에 연결된 파일들, 그러니까 업로드한 두 개 파일은 지워지지 않고 여전히 남아 있습니다. Django의 모델 기능은 모델 객체가 삭제되어도 그 모델 객체의 파일 필드에 연결된 파일을 지우지 않습니다. 그래서 삭제할 모델 객체를 먼져 가져와서 연결된 파일을 일일이 지워준 후에 모델 객체를 지워야 합니다.&lt;/p&gt;

&lt;p&gt;모델 객체가 삭제될 때 그 모델 객체에 연결된 파일도 자동으로 함께 지우는 기능은 따로 구현해야 합니다. 몇 가지 방법이 있습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;모델을 삭제하는 기능이 호출되면 파일 삭제 기능도 실행&lt;/li&gt;
&lt;li&gt;모델이 삭제되는 신호가 감지되면 파일 삭제 기능도 실행 &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2번은 나중에 알아보기로 하고, 이번 편에서는 1번 방법을 구현해 보겠습니다.&lt;/p&gt;

&lt;p&gt;Django framework은 &lt;code&gt;delete&lt;/code&gt;라는 인스턴스 메서드를 호출하여 모델 객체를 지웁니다. Admin 영역에 있는 삭제 기능도 이 메서드를 호출하는 겁니다. 이 메서드는 &lt;code&gt;Model&lt;/code&gt; 클래스에 정의되어 있습니다. 우리가 Django 모델을 만들 때 클래스에 &lt;code&gt;models.Model&lt;/code&gt;을 상속받도록 지정했기 때문에 우리가 만든 모델에 &lt;code&gt;delete&lt;/code&gt; 메서드를 따로 만들지 않아도 됐던 것이지요. 그렇다면 우리가 만든 모델에 &lt;code&gt;delete&lt;/code&gt; 인스턴스 메서드를 만들고 이 메서드가 호출되면 업로드 파일을 지우고 나서 모델 객체를 지우는 원래 &lt;code&gt;delete&lt;/code&gt; 메서드 기능을 수행하면 되겠군요. 그런 기능을 구현한 코드부터 보겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;class Photo(models.Model):
    # 중략

    def delete(self, *args, **kwargs):
        self.image_file.delete()
        self.filtered_image_file.delete()
        super(Photo, self).delete(*args, **kwargs)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;먼저 &lt;code&gt;def delete(self, *args, **kwargs):&lt;/code&gt;는 특별한 내용은 없습니다. &lt;code&gt;delete&lt;/code&gt; 함수는 인스턴스 메서드이므로 첫 번째 인자로 객체 자신을 &lt;code&gt;self&lt;/code&gt;라는 이름으로 넘겨 받습니다. &lt;a href=&quot;http://stackoverflow.com/questions/3394835/args-and-kwargs&quot;&gt;&lt;code&gt;*args&lt;/code&gt;와 &lt;code&gt;**kwargs&lt;/code&gt;는 함수가 넘겨받는 인자를 미리 알지 못하는 경우에 함수가 넘겨받는 인자를 담는 객체&lt;/a&gt;입니다. &lt;code&gt;delete&lt;/code&gt; 메서드로 뭘 인자로 넘길 지는 모르겠지만 어쨌든 넘겨받은 그대로 &lt;code&gt;Model&lt;/code&gt;클래스의 &lt;code&gt;delete&lt;/code&gt; 메서드로 넘겨줘야 해서 저렇게 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;self.image_file.delete()&lt;/code&gt;에서 &lt;code&gt;self.image_file&lt;/code&gt;는 &lt;code&gt;image_file&lt;/code&gt; 모델 필드를 뜻합니다. Python 클래스의 인스턴스 메서드 안에서 속성(attribute)에 접근하려면 &lt;code&gt;self.속성이름&lt;/code&gt;으로 접근하지요. &lt;code&gt;self&lt;/code&gt;는 &lt;code&gt;delete&lt;/code&gt; 인스턴스 메서드에서 첫 번째 인자로 넘겨 받았고요. 인스턴스 밖에서 접근하려면 &lt;code&gt;photo.image_file&lt;/code&gt; 이렇게 접근하겠고요. 이 &lt;code&gt;image_file&lt;/code&gt; 모델 필드는 Django의 모델 필드인 &lt;code&gt;ImageField&lt;/code&gt; 클래스의 인스턴스입니다. &lt;code&gt;ImageField&lt;/code&gt; 클래스로 만든 인스턴스는 &lt;code&gt;delete&lt;/code&gt;라는 인스턴스 메서드를 제공하며, 이름에서 알 수 있듯이 해당 모델 필드에 연결된 파일을 삭제합니다. &lt;code&gt;self.filtered_image_file.delete()&lt;/code&gt;는 무슨 코드인지 예측되지요? 필터가 적용된 이미지 파일을 지우는 겁니다.&lt;/p&gt;

&lt;p&gt;맨 마지막 줄인 &lt;code&gt;super(Photo, self).delete(*args, **kwargs)&lt;/code&gt;는 &lt;code&gt;Photo&lt;/code&gt; 모델이 상속받은 부모 클래스의 &lt;code&gt;delete&lt;/code&gt; 인스턴스 메서드를 호출합니다. 넘겨받은 인자를 그대로 전달하려고 &lt;code&gt;*args, **kwargs&lt;/code&gt;로 인자를 보내지요. 이 코드가 없으면 첨부된 업로드 파일만 삭제되고 모델 객체는 삭제되지 않습니다. 모델 객체를 지우는 건 &lt;code&gt;Model&lt;/code&gt; 클래스에 있는 &lt;code&gt;delete&lt;/code&gt; 메서드거든요. 만약 &lt;code&gt;Model&lt;/code&gt; 클래스의 &lt;code&gt;delete&lt;/code&gt; 메서드를 사용해서 모델 객체를 삭제하지 않고 여러분이 독자 구현한 코드로 모델 객체를 지우고자 한다면 &lt;code&gt;super(...)&lt;/code&gt; 이 부분을 지우고 직접 구현하면 됩니다.&lt;/p&gt;

&lt;p&gt;자, 여기까지 구현한 기능을 한 번 Admin 영역에서 시험 작동해 보세요. 모델 내용이 바뀌어서 마이그레이션 하라는 안내가 나올텐데, 해주죠, 뭐. :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;from django.db import models

class Photo(models.Model):
    image_file = models.ImageField(upload_to=&#39;static_files/uploaded/%Y/%m/%d&#39;)
    filtered_image_file = models.ImageField(upload_to=&#39;static_files/uploaded/%Y/%m/%d&#39;)
    description = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)

    def delete(self, *args, **kwargs):
        self.image_file.delete()
        self.filtered_image_file.delete()
        super(Photo, self).delete(*args, **kwargs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아직 &lt;code&gt;Photo&lt;/code&gt; 모델에 추가할 내용이 많습니다. 누가 사진을 올렸는지 회원 정보도 담아야 하고, 사진을 올리는 경로도 손볼 것입니다. 차근 차근 구현해 나가겠습니다.&lt;/p&gt;

&lt;h3&gt;2. 부록&lt;/h3&gt;

&lt;h4&gt;(1) Django Admin 주소&lt;/h4&gt;

&lt;p&gt;Django에서 제공하는 Admin 기능은 &lt;code&gt;settings.py&lt;/code&gt;에 설정되어 있습니다. &lt;code&gt;INSTALLED_APPS&lt;/code&gt;라는 변수를 찾아 보시면 &lt;code&gt;django.contrib.admin&lt;/code&gt;이라는 줄이 보입니다. 우리가 만든 &lt;code&gt;photo&lt;/code&gt; 앱도 이곳에 추가했지요.&lt;/p&gt;

&lt;p&gt;그럼 &lt;code&gt;http://127.0.0.1:8000/admin&lt;/code&gt; 주소(URL)에서 &lt;code&gt;admin&lt;/code&gt; 부분도 어딘가에 미리 설정되어 있는 걸까요? 맞습니다. &lt;code&gt;urls.py&lt;/code&gt;에 기본으로 설정되어 있습니다. &lt;code&gt;pystagram&lt;/code&gt; 패키지(디렉터리)에 있는 &lt;code&gt;urls.py&lt;/code&gt;을 열어 보시면 &lt;code&gt;url(r&#39;^admin/&#39;, include(admin.site.urls)),&lt;/code&gt;이라는 내용이 보일 겁니다. 경로 맨 앞에 &lt;code&gt;admin&lt;/code&gt;이 있는 모든 경로를 &lt;code&gt;admin.site.urls&lt;/code&gt;에 설정되어 있는 경로에 연결(matching)하겠다는 내용입니다. 이건 &lt;code&gt;django.contrib.admin&lt;/code&gt; 패키지에서 &lt;code&gt;sites.py&lt;/code&gt; 파일에 보면 &lt;code&gt;AdminSite&lt;/code&gt; 클래스가 있는데, 그 클래스의 &lt;code&gt;get_urls&lt;/code&gt;라는 인스턴스 메서드를 호출하는 겁니다. 메서드를 프로퍼티화 하는 &lt;code&gt;@property&lt;/code&gt; 장식자(decorator)를 이용하여 &lt;code&gt;urls&lt;/code&gt;를 호출하면 &lt;code&gt;get_urls&lt;/code&gt; 인스턴스 메서드가 반환하는 정보를 던져주는 것이지요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://127.0.0.1:8000/admin&lt;/code&gt; 이 주소 대신 &lt;code&gt;/_admin&lt;/code&gt;으로 접근하고 싶다면 &lt;code&gt;^admin/&lt;/code&gt; 부분을 &lt;code&gt;^_admin/&lt;/code&gt;으로 고치면 됩니다.&lt;/p&gt;

&lt;h4&gt;(2) Django Admin 필요성&lt;/h4&gt;

&lt;p&gt;Django Admin은 이용자가 꽤 유연하게 변경하도록 만들어져 있습니다. 서비스는 고객이 사용하는 제품부 뿐만 아니라 운영에 필요한 관리 영역을 만드는 데에도 상당한 노고가 필요한데, Django Admin을 쓰면 그런 노고가 줄어 듭니다. Django Admin은 그 자체만으로도 확장성 있게 잘 만들어져 있고, Django의 모델이나 미들웨어 체계와 강하게 연계되어 있어서 직접 구현하려면 번거로운 기능을 쉽고 편하게 구현하도록 합니다.&lt;/p&gt;

&lt;p&gt;저는 이 강좌에서 Django Admin 부분만 따로 할당하지 않고, 그때 그때 필요한 내용을 설명하도록 하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이것으로 강좌 4편을 마칩니다. 늦어서 죄송합니다. 요즘 많이 바빠서 연재하기 힘드네요. ㅜㅜ 한 편에 너무 많은 내용을 담느라 연재 주기가 늘어지지 않도록 해보겠습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/04-fullsource/pystagram&quot;&gt;4편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 05 Oct 2014 19:00:49 +0900</pubDate>
        <link>http://blog.hannal.com//2014/10/start_with_django_webframework_04</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/10/start_with_django_webframework_04</guid>
        
        <category>django</category>
        
        <category>migration</category>
        
        <category>django admin</category>
        
        <category>django model</category>
        
        
        <category>start_with_django_webframework</category>
        
      </item>
    
      <item>
        <title>3. Photo 앱과 모델 만들기</title>
        <description>&lt;p&gt;이 강좌를 연재하는 중에 Django 1.7이 정식 출시됐습니다. 다행히(?) Django를 본격 다루기 전이니 이번 편부터 Django 1.7판을 기준으로 작성하겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Django Project와 App&lt;/h3&gt;

&lt;h4&gt;(1) 개념&lt;/h4&gt;

&lt;p&gt;Python 코드가 담긴 파일을 &lt;a href=&quot;https://docs.python.org/2/tutorial/modules.html&quot;&gt;Python 모듈&lt;/a&gt;이라고 하며, &lt;a href=&quot;(https://docs.python.org/2/tutorial/modules.html#packages)&quot;&gt;Python package&lt;/a&gt;는 Python module을 묶어놓은 단위입니다. 파일 체계로 보면 디렉터리지요. Python 패키지는 반드시 초기화 모듈인 &lt;code&gt;__init__.py&lt;/code&gt;이 필요합니다.&lt;/p&gt;

&lt;p&gt;Django는 &lt;a href=&quot;https://docs.djangoproject.com/en/1.6/glossary/#term-project&quot;&gt;Django project&lt;/a&gt; 단위로 만드는데, Python 체계로 보면 Python 패키지를 뜻합니다. Django로 만드는 프로젝트에 사용되는 코드와 Django 설정값이 Python 모듈로 존재하고 모두를 포함하는 Python 패키지로 묶은 것이지요.&lt;/p&gt;

&lt;p&gt;우리가 Pystagram 프로젝트를 Django로 만든다는 건 Pystagram이라는 Python 패키지를 만들고, Pystagram에 들어가는 기능은 Python 모듈로 만든다는 뜻입니다. 그럼 Django를 써서 Pystagram을 만들려면 먼저 Pystagram 디렉터리를 만들어야 겠지요. 이 디렉터리는 Python 패키지니까 초기화 파일인 &lt;code&gt;__init__.py&lt;/code&gt;이 필요합니다. 그리고 Django framework이 참조할 프로젝트 설정 항목은 settings라는 모듈이므로 &lt;code&gt;settings.py&lt;/code&gt;라는 파일로 필요합니다. 웹 주소(URL)로 서비스에 접근하므로 각 접근 주소에 연결될 기능을 설정하는 &lt;code&gt;urls.py&lt;/code&gt;라는 파일도 필요합니다. 이 중에서 &lt;code&gt;settings.py&lt;/code&gt;는 필수 모듈입니다.&lt;/p&gt;

&lt;h4&gt;(2) Django project 만들기&lt;/h4&gt;

&lt;h5&gt;django-admin.py&lt;/h5&gt;

&lt;p&gt;Python 패키지인 Pystagram 디렉터리를 만들고, 여기에 필수 모듈인 &lt;code&gt;settings.py&lt;/code&gt;와 &lt;code&gt;__init__.py&lt;/code&gt;를 만드는 과정을 간편하게 처리하는 프로그램이 &lt;code&gt;django-admin.py&lt;/code&gt;입니다. 이 파일로 Pystagram 프로젝트를 개설하겠습니다. 그 전에 지난 편에서 꾸려놓은 개발 환경을 먼저 써볼까요?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ workon pystagram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;virtualenv로 만든 pystagram 가상 환경에 들어가는 겁니다. 지난 편에서 우리는 이 가상 영역에 Django를 설치했지요.&lt;/p&gt;

&lt;p&gt;이번엔 Pystagram 프로젝트를 개설합니다. 여러분이 원하는 아무 곳(디렉터리)에 만들어도 됩니다. 저는 &lt;code&gt;~/Workspace&lt;/code&gt; 안에다 프로그래밍 프로젝트를 넣어두니 이 안에 만들겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ django-admin.py startproject pystagram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;django-admin.py&lt;/code&gt; 프로그램(script file)에 첫 번째 인자로 &lt;code&gt;startproject&lt;/code&gt;라는 명령어를 넣고 두 번째 인자에 만들 프로젝트 이름을 넣습니다. 그러면 두 번째 인자로 넣은 프로젝트 이름으로 디렉터리가 하나 만들어 집니다.&lt;/p&gt;

&lt;h5&gt;Django Project와 Python 패키지&lt;/h5&gt;

&lt;p&gt;앞으로 만들 Pystagram 소스 파일이나 각종 매체(media) 파일은 이곳에 담는데, 이 디렉터리 자체는 Python 패키지는 아닙니다. Python 패키지가 아니므로 Python으로 불러들일 수 없고(import), 그러므로 이 디렉터리 이름은 Pystagram으로 하든 HelloWorld로 하든 아무 상관 없습니다. 만약 Pystagram이라는 이름이나 기본 기능은 그대로 쓰지만, 몇 가지 실험성 기능을 넣어서 PystagramStory라는 걸 운영하고 싶다면 이 디렉터리를 복사하면 그만입니다. Django계에서 이 디렉터리를 뜻하는 별도 용어가 있진 않고 그냥 Django project를 포함하는 뿌리 디렉터리(root directory)라고 부릅니다.&lt;/p&gt;

&lt;p&gt;실제로 Django project는 pystagram 디렉터리 안에 있는 pystagram이라는 디렉터리입니다. 그러니까 &lt;code&gt;django-admin.py&lt;/code&gt;가 만든 디렉터리는 이렇게 구성되어 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pystagram/
    manage.py
    pystagram/
        __init__.py
        settings.py
        urls.py
        wsgi.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pystagram 디렉터리 안에 있는 pystagram 디렉터리가 실제로 사용되는 Python 패키지입니다. 이 디렉터리는 Pystagram 프로젝트에서 사용할 시작 패키지라고 보면 됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/startproject/pystagram&quot;&gt;pystagram 프로젝트를 생성한 단계의 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;manage.py와 개발용 내장 웹 서버&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;manage.py&lt;/code&gt; 파일은 Django로 돌아가는 프로젝트를 다양하게 다루는 도구입니다. Database를 만들거나 개발용 내장 웹서버로 우리가 만드는 프로젝트를 서버로 구동하는 기능 등 여러 편의 요소를 제공합니다. 말이 나온 김에 Django project가 잘 만들어졌는지 &lt;code&gt;manage.py&lt;/code&gt;로 확인해 볼까요?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py runserver

또는

$ python manage.py runserver

(중략)
Django version 1.6.6, using settings &#39;pystagram.settings&#39;
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;manage.py&lt;/code&gt; 파일에 첫 번째 인자로 &lt;code&gt;runserver&lt;/code&gt; 명령을 주어 서버를 실행하자, 쉘 프롬프트가 사라지고 Django framework이 제공하는 개발용 내장 웹 서버가 실행된 상태로 대기하고 있습니다. &lt;code&gt;pystagram&lt;/code&gt; package 안에 있는 &lt;code&gt;settings&lt;/code&gt; 모듈을 참조하여 &lt;code&gt;127.0.0.1&lt;/code&gt; 주소와 &lt;code&gt;8000&lt;/code&gt;번 포트로 개발용 서버를 띄웠다는 내용, 그리고 Control 글쇠와 C 글쇠를 누르면 이 서버를 종료한다는 내용이 나와 있습니다.&lt;/p&gt;

&lt;p&gt;Django 내장 개발용 웹서버로 띄운 서비스에 접속할 수 있는 주소를 알게 됐으니 웹 브라우저를 열어서 확인합시다. &lt;code&gt;http://localhost:8000&lt;/code&gt;이나 &lt;code&gt;http://127.0.0.1:8000&lt;/code&gt;로 접속하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/09/03-django_project_works.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It worked!&lt;/p&gt;

&lt;p&gt;우린 그냥 Django project를 생성한 것 뿐인데 깔끔하게 디자인 된 환영 페이지가 뜨네요. 저도 동참하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;여러분, Django 웹 프레임워크 세상에 오신 걸 환영합니다.&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;내장 웹서버 접속 주소 바꾸기&lt;/h5&gt;

&lt;p&gt;아무 전달인자를 주지 않으면 내장 웹서버는 호스트는 127.0.0.1를, 포트는 8000를 기본으로 사용합니다. 이 주소를 바꾸려면 사용할 주소를 지정하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py runserver 127.0.0.1:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;(3) Pystagram Project 초기/사전 작업&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;django-admin.py&lt;/code&gt;로 Pystagram project를 만들고 나면 데이터베이스를 동기화하는 과정을 거칩니다. 데이터베이스를 전혀 사용하지 않는다면 생략하기도 합니다. 데이터 자체는 외부에서 매번 요청하여 가져오고, 이 데이터를 적절히 가공하여 바로 출력하면 굳이 데이터베이스를 쓰지 않아도 됩니다. 가령 &lt;a href=&quot;http://www.restapitutorial.com/&quot;&gt;REST API&lt;/a&gt;로&lt;sup id=&quot;fnref-3137:1&quot;&gt;&lt;a href=&quot;#fn-3137:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 데이터를 &lt;a href=&quot;http://json.org/json-ko.html&quot;&gt;JSON&lt;/a&gt; 형식으로 가져온 뒤 출력 양식만 바꾸거나 데이터에 접근하는 방식을 바꾸어 사용자 경험을 제공하는 식이지요.&lt;/p&gt;

&lt;p&gt;하지만 Pystagram은 데이터베이스를 사용합니다. 또한 Django에서 제공하는 여러 &lt;a href=&quot;https://docs.djangoproject.com/en/1.7/topics/http/middleware/&quot;&gt;미들웨어&lt;/a&gt;나 앱을 사용하는데, 이러한 도구도 데이터베이스를 씁니다. 그래서 동기화 과정이 필요합니다. 방법은 간단합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;manage.py&lt;/code&gt;에 &lt;code&gt;migrate&lt;/code&gt; 명령어를 주면 Django framework에서 제공하는 도구가 사용하는 데이터베이스 관련 작업을 자동으로 진행합니다. 이 &lt;code&gt;migrate&lt;/code&gt; 명령어는 Django 1.7판에 생긴 명령어인데, 1.6이하 버전에서는 &lt;code&gt;syncdb&lt;/code&gt;라는 명령어가 거의 비슷한 작업을 수행했습니다. 실제로 &lt;code&gt;syncdb&lt;/code&gt; 명령어에 대한 코드를 보면 &lt;code&gt;migrate&lt;/code&gt; 명령어를 호출합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;    def handle_noargs(self, **options):
        warnings.warn(&quot;The syncdb command will be removed in Django 1.9&quot;, RemovedInDjango19Warning)
        call_command(&quot;migrate&quot;, **options)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 코드는 &lt;code&gt;django/core/management/commands/&lt;/code&gt; 패키지에 있는 &lt;code&gt;syncdb.py&lt;/code&gt; 모듈에 있습니다. &lt;code&gt;syncdb&lt;/code&gt; 명령어(command)를 실행하면 이 모듈에 있는 내용이 수행되는 것이지요. 위 코드에서 &lt;code&gt;call_command(&quot;migrate&quot;, **options)&lt;/code&gt; 부분을 보면 &lt;code&gt;syncdb&lt;/code&gt;가 넘겨받은 매개변수 &lt;code&gt;**options&lt;/code&gt;를 그대로 &lt;code&gt;migrate&lt;/code&gt; 명령어를 호출하며 넘깁니다. &lt;code&gt;syncdb&lt;/code&gt; 명령어가 1.7판에도 여전히 존재하지만 1.9판에서는 제거될 예정이라는 안내 문구도 보이는군요. ^^&lt;/p&gt;

&lt;p&gt;하지만 &lt;code&gt;migrate&lt;/code&gt;와 &lt;code&gt;syncdb&lt;/code&gt;가 똑같은 일을 수행하지는 않습니다. &lt;code&gt;syncdb&lt;/code&gt;는 &lt;code&gt;migrate&lt;/code&gt; 명령어를 수행한 다음에 최고 권한 이용자(super user)를 만드는 일도 합니다. 이 작업은 &lt;code&gt;createsuperuser&lt;/code&gt; 명령어로 합니다. 즉 &lt;code&gt;syncdb&lt;/code&gt; == &lt;code&gt;migrate&lt;/code&gt; + &lt;code&gt;createsuperuser&lt;/code&gt;인 셈이지요. 최고 권한 이용자도 만들겠습니다. 곧 필요하거든요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py createsuperuser
Username (leave blank to use &#39;hannal&#39;): hannal
Email address: 
Password:
Password (again):
Superuser created successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;비밀번호는 언제든지 &lt;code&gt;changepassword&lt;/code&gt; 명령어로 바꿀 수 있습니다. 바꿀 대상(username)을 지정하면 되지요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py changepassword hannal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;바꿀 대상을 지정하지 않으면 처음 만든 이용자가 기본 지정됩니다.&lt;/p&gt;

&lt;p&gt;이렇게 수행한 데이터베이스 작업은 &lt;code&gt;db.sqlite3&lt;/code&gt;라는 파일에 저장됩니다. 이 파일은 &lt;a href=&quot;http://sqlite.org/&quot;&gt;sqlite3&lt;/a&gt;이라는 데이터베이스 엔진이 다루는 데이터베이스 파일입니다. Django framework은 따로 &lt;code&gt;settings.py&lt;/code&gt;에 설정하지 않으면 기본으로 sqlite3 데이터베이스를 사용하도록 되어 있습니다. 서비스용으로는 쓰기엔 기능과 성능이 부족하지만, 가볍고 간단해서 개발용으로 쓰기엔 더할 나위없이 좋습니다. 더구나 Linux나 Mac OS X은 운영체제에서 기본 제공하며, Python도 sqlite의 데이터베이스를 다루는 API를 기본 내장하고 있습니다.&lt;/p&gt;

&lt;p&gt;Django framework에서 제공하는 도구가 사용할 데이터베이스 관련 작업과 최고 권한 이용자를 만들었으니 이제 본격 Pystagram을 만들 차례입니다.&lt;/p&gt;

&lt;h4&gt;(4) Photo App 초기 작업&lt;/h4&gt;

&lt;h5&gt;Django App&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.hannal.com/start_with_django_webframework_01/&quot;&gt;Pystagram 기획&lt;/a&gt;에서 가장 먼저 기획한 기능이 무엇일까요? 퀴즈 아니니 기억 안 나시면 기획 내용 보고 오셔도 됩니다. 제가 가장 먼저 기획한 기능은 사진 관련 기능이었습니다. 그 다음이 사용자와 회원 기능, 그 다음이 사진 모아보는 기능이었지요. 이 각각은 사진 올리기, 사진 보기와 같이 세부 기능이 묶여 있지요. 이렇게 목적을 가진 뭔가를 수행하는 애플리케이션(application)을 Django계에선 Django App이라고 부릅니다. Django project는 이러한 App이 하나 이상 조합물입니다.&lt;/p&gt;

&lt;p&gt;보통은 Django App은 해당 App으로 분리된 Python 패키지 형식입니다. &lt;code&gt;models&lt;/code&gt;와 &lt;code&gt;views&lt;/code&gt; 모듈과 같이 각 App에 필요한 모듈로 구성합니다. 필수 모듈은 아니지만, “어떤 목적을 수행하는 애플리케이션”이라는 정의를 따른다면 자연스레 이런 모듈이 필요하게 됩니다. 그리고 Django project와 마찬가지로 Django app도 자동화 도구로 편하게 생성할 수 있습니다.&lt;/p&gt;

&lt;h5&gt;manage.py로 Photo App 만들기&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;manage.py&lt;/code&gt;가 Django project로 돌아가는 프로젝트를 지원하는 도구라는 것 기억하시죠? 이 파일로 App을 만들면 편합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py startapp photo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;django-admin.py&lt;/code&gt;과 마찬가지로 별다른 안내 없이 생성됩니다. 뭔가 안내가 나타났다면 문제가 있는 거고요. &lt;code&gt;manage.py&lt;/code&gt;로 만든 Django app인 Photo app은 다음과 같이 구성되어 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pystagram/
    manage.py
    pystagram/
        __init__.py
        settings.py
        urls.py
        wsgi.py
    photo/
        __init__.py
        admin.py
        models.py
        tests.py
        views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;photo&lt;/code&gt; package가 photo app입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/startapp_photo/pystagram&quot;&gt;photo App을 생성한 단계의 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;admin.py&lt;/code&gt;는 관리자 영역에서 이 App을 다루는 코드를 담는 모듈입니다. Django의 강점이자 매력 요소인데, 다음 편에서 다룹니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;models.py&lt;/code&gt;은 모델을 정의하는 모듈인데 모델(model)은 데이터(data)를 구성하는 항목 자체(field)와 데이터를 다루는 행위(behaviour)를 포함한 것입니다. 사진은 찍은 날짜, 사진 그 자체, 인화지, 이름과 같은 사진 구성 정보, 그리고 사진을 크게 확대해서 보거나 특정 부분을 오려내거나 복사하거나 종이로 접어 날려보내는 것과 같이 관련 행위로 구성됩니다. 이런 사진 관련 정보나 행위를 사진이라는 객체로 표현하는 것이 모델입니다. 우리가 다루고자 하는 대상 그 자체인데, 사람이 인지(recognition)하는 표현물은 아닙니다. 비유를 들자면, 하드 디스크에 있는 사진이라는 이미지 파일인 겁니다. 이미지 데이터일 뿐, 그게 어떤 사진인지는 알지 못 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views.py&lt;/code&gt;는 특정 주소(URL)에 접근하면 화면에 내용을 표시하는 Python 함수를 호출하는 내용을 담습니다. 이름만 보면 인화되거나 출력된 표현물 같지만, 정확한 용도는 우리가 인지하는 표현물로 안내하는 역할을 합니다. 비유를 들자면, 이미지 파일 뷰어나 프린터입니다. 그럼 대체 표현물은 뭘까요? MVC 패턴에서는 View가 표현물이지만, Django계에서는 &lt;code&gt;template&lt;/code&gt;이 표현물입니다. Django에서 View는 데이터(모델)를 표현(템플릿)하는 연결자이자 안내자입니다. MVC 패턴으로 보면 Controller와 유사합니다.&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;code&gt;tests.py&lt;/code&gt;은 &lt;a href=&quot;http://ko.wikipedia.org/wiki/%EC%9C%A0%EB%8B%9B_%ED%85%8C%EC%8A%A4%ED%8A%B8&quot;&gt;Unit test&lt;/a&gt; 내용을 담는 모듈입니다. 나중에 직접 겪어 보도록 하겠습니다.&lt;/p&gt;

&lt;h4&gt;(4) Photo App 만들기&lt;/h4&gt;

&lt;p&gt;사진을 다루는 App인 Photo App을 만들려면 무엇부터 해야 할까요? 뭔가를 만드는 시작은 &lt;a href=&quot;http://ko.wikipedia.org/wiki/Hello_world_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8&quot;&gt;Hello world&lt;/a&gt;류이니 템플릿으로 화면에 뭔가를 출력하는 게 미덕이겠지만, 우리가 직접 입력한 Python 코드만 없을 뿐 Django 템플릿을 이용해 “It worked!”를 이미 출력해 봤습니다. 그러니 모델을 실제로 만들어 보도록 하겠습니다.&lt;/p&gt;

&lt;h5&gt;Photo model 만들기&lt;/h5&gt;

&lt;p&gt;Django project에서 모델은 &lt;code&gt;db&lt;/code&gt; package의 &lt;code&gt;models&lt;/code&gt; 모듈에 있는 &lt;code&gt;Model&lt;/code&gt; 클래스(class) 사용하여 만듭니다. 말이 복잡한데 간단히 말해서 &lt;code&gt;models&lt;/code&gt; 모듈이 django의 &lt;code&gt;db&lt;/code&gt; package 안에 있으니 &lt;code&gt;from django.db import models&lt;/code&gt; 이렇게 접근해서 불러온다는 뜻입니다. Django로 만드는 애플리케이션의 모델은 바로 이 &lt;code&gt;Model&lt;/code&gt; 클래스의 자식클래스(하위클래스, subclass)이므로 &lt;code&gt;Model&lt;/code&gt; 클래스를 상속 받습니다.&lt;/p&gt;

&lt;p&gt;그럼 &lt;code&gt;Model&lt;/code&gt; 클래스를 사용하여 &lt;code&gt;photo&lt;/code&gt; App에 &lt;code&gt;Photo&lt;/code&gt; 모델을 만들어 보겠습니다. 이 모델은 사진을 다루는 기본 데이터를 다룹니다. 모델이니 &lt;code&gt;models.py&lt;/code&gt;를 고쳐야겠지요?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;# coding: utf-8

from django.db import models

class Photo(models.Model):
    id = &#39;개별 사진을 구분하는 색인값&#39;
    image_file = &#39;원본 사진 파일&#39;
    filtered_image_file = &#39;필터 적용된 사진 파일&#39;
    description = &#39;사진에 대한 설명문&#39;
    created_at = &#39;생성일시&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Django에서 모델의 속성(attribute)은 데이터베이스 필드(field)로 나타냅니다. Python 클래스로 놓고 보면 속성이지만, Django 모델의 데이터 요소로 다루고자 할 경우 Django 모델이 제공하는 별도 자료형(type)으로 값을 다루는데, 이 자료형인 값을 모델 필드라고 하지요. 그래서 위 모델에서 &lt;code&gt;image_file&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; 등은 아직은 그냥 Python 클래스 속성입니다. 각각이 무엇인지는 코드로 표현해놨으니 따로 설명드리진 않겠습니다.&lt;/p&gt;

&lt;p&gt;이제 이 속성들을 Django 모델 필드로 바꾸겠습니다. 그래야 비로소 Django model이 제공하는 기능을 쓸 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;image_file&lt;/code&gt;은 이용자가 올리는 원본 이미지 파일을 담습니다. Django의 model에는 파일을 다루는 필드는 &lt;code&gt;FileField&lt;/code&gt;가 있는데, 이런 필드 종류를 Django에서는 필드 타입(field type)이라고 부릅니다. 이 필드로 파일을 건내면 저장소(storage)에 파일을 저장하고 이 파일에 접근하는 연결자 역할을 하며, 파일 관련 기능이나 정보를 제공합니다. 이 필드 자체에 파일을 직접 저장하는 건 아닙니다. 그리고 파일 중에서도 이미지 파일을 대상으로 하는 &lt;code&gt;ImageField&lt;/code&gt;도 있습니다. &lt;code&gt;ImageField&lt;/code&gt;의 기본 바탕은 &lt;code&gt;FileField&lt;/code&gt;인데, 실제로도 &lt;code&gt;FileField&lt;/code&gt;를 상속 받은 클래스입니다&lt;sup id=&quot;fnref-3137:2&quot;&gt;&lt;a href=&quot;#fn-3137:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. 이미지 면적(dimension)이나 길이(width, height)같은 정보를 제공해서 이미지 파일만 다룬다면 &lt;code&gt;ImageField&lt;/code&gt;를 쓰는 게 더 편합니다.&lt;/p&gt;

&lt;p&gt;모델 필드에는 몇 가지 선택 항목을 지정하곤 하는데, 이런 선택 항목을 필드 옵션(field option)이라고 합니다. &lt;code&gt;ImageField&lt;/code&gt; 필드엔 &lt;code&gt;upload_to&lt;/code&gt;, &lt;code&gt;height_field&lt;/code&gt;, &lt;code&gt;width_field&lt;/code&gt;, &lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;storage&lt;/code&gt; 등이 있는데, &lt;code&gt;height_field&lt;/code&gt;, &lt;code&gt;width_field&lt;/code&gt;가 &lt;code&gt;ImageField&lt;/code&gt; 전용 옵션이며, 나머지는 &lt;code&gt;FileField&lt;/code&gt;에서 상속받은 항목입니다. 이 항목은 필수 지정 사항은 아니며, 따로 설정하지 않으면 Django에서 기본 설정된 내용을 따릅니다. 자세한 건 나중에 다시 설명하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;filtered_image_file&lt;/code&gt;는 원본 이미지 파일에 필터(filter)를 적용한, 즉 가공을 거친 파일입니다. 원본 이미지 파일을 저장하지 않는다면 필요없는 필드인데, 여러분을 좀 괴롭히는 기능을 만들 거라서 원본 이미지 파일과 가공을 거친 이미지 파일을 구분해서 모두 저장하겠습니다. 어쨌든 가공을 거친 파일도 이미지 파일이므로 &lt;code&gt;ImageField&lt;/code&gt; 필드 타입을 쓰겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;description&lt;/code&gt;은 사진에 사진글 작성자가 기입한 내용입니다. 그냥 글자만 넣으면 되는데, 글자를 입력하는 필드 타입은 &lt;code&gt;CharField&lt;/code&gt;와 &lt;code&gt;TextField&lt;/code&gt;가 있습니다. 물론 &lt;code&gt;ImageField&lt;/code&gt;이 &lt;code&gt;FileField&lt;/code&gt;를 상속 받아서 확장된 기능을 제공하는 것처럼 &lt;code&gt;CharField&lt;/code&gt; 필드 타입을 상속받아서 특별한 임무를 수행하는 클래스도 있습니다. &lt;code&gt;SlugField&lt;/code&gt;나 &lt;code&gt;URLField&lt;/code&gt;, &lt;code&gt;EmailField&lt;/code&gt;, &lt;code&gt;CommaSeperatedIntegerField&lt;/code&gt;  같은 거죠. 필드 타입명만으로 무슨 역할을 할 지 대략 예상이 가는군요. &lt;code&gt;CommaSeperatedIntegerField&lt;/code&gt;는 정수(Integer)를 다루는 필드처럼 보이는데 &lt;code&gt;CharField&lt;/code&gt;를 상속하는 문자형 필드인 이유는 쉼표(comma) 자체가 문자이기 때문입니다.&lt;/p&gt;

&lt;p&gt;문자열을 다룬다는 점에서 &lt;code&gt;CharField&lt;/code&gt;와 &lt;code&gt;TextField&lt;/code&gt;는 같지만, 실은 전혀 다릅니다. &lt;code&gt;CharField&lt;/code&gt;는 데이터베이스의 &lt;code&gt;VARCHAR&lt;/code&gt;에 대응합니다. Django는 통상 200자 정도를 보장합니다. “보장”이라는 표현을 쓴 이유는 데이터베이스 시스템에 따라 &lt;code&gt;VARCHAR&lt;/code&gt; 제한 길이가 다르기 때문입니다. 그에 반해 &lt;code&gt;TextField&lt;/code&gt;는 이보다 훨씬 긴 문자열을 다룹니다. 이것도 데이터베이스 시스템에 따라 길이 제한이 다른데, SQLite3는 약 1기가 바이트까지 저장하는 &lt;code&gt;text&lt;/code&gt;, PostgreSQL은 길이 제한이 없는 &lt;code&gt;text&lt;/code&gt;, MySQL은 약 4기가 바이트까지 담는 &lt;code&gt;longtext&lt;/code&gt;, Oracle은 약 8~12테라 바이트까지 담는 &lt;code&gt;NCLOB&lt;/code&gt;에 대응합니다&lt;sup id=&quot;fnref-3137:3&quot;&gt;&lt;a href=&quot;#fn-3137:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref-3137:4&quot;&gt;&lt;a href=&quot;#fn-3137:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. 보통은 긴 문자열을 담는 저러한 필드형에는 데이터베이스 인덱스가 걸리지 않으므로 Django의 &lt;code&gt;TextField&lt;/code&gt; 필드에도 데이터베이스의 인덱스가(필드 옵션 : &lt;code&gt;db_index&lt;/code&gt;) 걸리지 않습니다.&lt;/p&gt;

&lt;p&gt;어쨌든 데이터베이스 시스템에 따라서 &lt;code&gt;TextField&lt;/code&gt; 필드의 길이제한 단위가 무시무시한데, 굳이 저렇게 긴 문자열을 저장하진 않을 겁니다. 안 예쁘잖아요. 최대 길이를 500자로 제한하겠습니다. &lt;code&gt;CharField&lt;/code&gt;와 &lt;code&gt;TextField&lt;/code&gt; 둘 다 &lt;code&gt;max_length&lt;/code&gt;라는 필드 옵션으로 최대 문자열 길이를 제한하며, &lt;code&gt;CharField&lt;/code&gt;는 &lt;code&gt;max_length&lt;/code&gt; 필드 옵션을 반드시 넣어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;created_at&lt;/code&gt;은 Photo 모델이 생성되어 데이터베이스에 저장되는 시각을 담는데, Django에는 날짜를 다루는 &lt;code&gt;DateField&lt;/code&gt;, 시간을 다루는 &lt;code&gt;TimeField&lt;/code&gt;, 그리고 날짜와 시간을 같이 다루는 &lt;code&gt;DateTimeField&lt;/code&gt;가 있습니다. 생성일시 정보를 다루니 &lt;code&gt;DateTimeField&lt;/code&gt;를 쓰겠습니다. 이 필드에는 &lt;code&gt;auto_now&lt;/code&gt; 옵션과 &lt;code&gt;auto_now_add&lt;/code&gt; 옵션이 있는데, 자동으로 현재 시간 정보를 담을 지 여부를 &lt;code&gt;True&lt;/code&gt;와 &lt;code&gt;False&lt;/code&gt;로 지정합니다. &lt;code&gt;auto_now_add&lt;/code&gt;는 객체가 처음 생성될 때, &lt;code&gt;auto_now&lt;/code&gt;는 객체가 저장될 때 자동으로 시간 정보를 담습니다. &lt;code&gt;auto_now&lt;/code&gt;는 &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;auto_now_add&lt;/code&gt;는 &lt;code&gt;True&lt;/code&gt;로 설정한다면, 데이터가 처음 저장되는 시간 정보만 잡히고, 이후에 그 데이터를 수정하여 저장하더라도 자동으로 시간 정보가 담기진 않겠지요. 코드로 표현한다면 이런 모습일 겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;from datetime import datetime

the_photo.save()

if the_photo.is_created is True:
    the_photo.created_at = datetime.now()
    the_photo.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;저 두 옵션을 활용하면 이런 코드를 생략하는 것이니 깔끔하고 편하지요.&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;code&gt;id&lt;/code&gt;는 값이 겹치지 않는 색인이며, 이 값이 각 사진을 구분 짓는 고유값입니다. Django에서는 &lt;code&gt;id&lt;/code&gt;라는 필드를 따로 정하지 않으면 관례에(conventional) 따라 &lt;code&gt;AutoField&lt;/code&gt;로 &lt;code&gt;id&lt;/code&gt;를 Django framework가 알아서(자동으로) 만들어 다룹니다. 그러니 우리는 굳이 &lt;code&gt;id&lt;/code&gt;를 정의하지 않아도 됩니다.&lt;/p&gt;

&lt;p&gt;자, 이제 그냥 클래스 속성으로 구성된 기존 &lt;code&gt;Photo&lt;/code&gt; 모델을 Django 모델로 바꿔 보겠습니다. 아참, 이 필드들은 &lt;code&gt;models&lt;/code&gt; 모듈에 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;class Photo(models.Model):
    image_file = models.ImageField()
    filtered_image_file = models.ImageField()
    description = models.TextField(max_length=500)
    created_at = models.DateTimeField(auto_now_add=True, auto_now=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;데이터베이스에 반영 (migration)&lt;/h5&gt;

&lt;p&gt;Django 1.7 이전 판에서는 &lt;code&gt;manage.py&lt;/code&gt;에 &lt;code&gt;syncdb&lt;/code&gt; 명령으로 우리가 만든 모델을 데이터베이스에 반영했지만, 1.7판부터는 &lt;code&gt;makemigrations&lt;/code&gt;과 &lt;code&gt;migrate&lt;/code&gt; 명령어를 이용합니다. &lt;code&gt;Photo&lt;/code&gt; 모델을 마이그레이션 하려면 &lt;code&gt;settings.py&lt;/code&gt;에 &lt;code&gt;photo&lt;/code&gt; 앱을 추가해야 하니 &lt;code&gt;settings.py&lt;/code&gt;에서 &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 항목을 찾아서 다음과 같이 &lt;code&gt;photo&lt;/code&gt;를 추가합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;INSTALLED_APPS = (
    &#39;django.contrib.admin&#39;,
    &#39;django.contrib.auth&#39;,
    &#39;django.contrib.contenttypes&#39;,
    &#39;django.contrib.sessions&#39;,
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
    &#39;photo&#39;,
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그 다음에 &lt;code&gt;makemigrations&lt;/code&gt;으로 마이그레이션 작업 내용을 만듭니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py makemigrations 
Migrations for &#39;photo&#39;:
  0001_initial.py:
    - Create model Photo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;마이그레이션 작업 내용은 &lt;code&gt;0001_initial.py&lt;/code&gt;에 있으며, &lt;code&gt;Photo&lt;/code&gt; 모델을 생성하는 것만 있네요. 실제 코드는 &lt;code&gt;photo&lt;/code&gt; 디렉터리의 &lt;code&gt;migrations&lt;/code&gt; 디렉터리 안에 &lt;code&gt;0001_initial.py&lt;/code&gt; 있습니다. 이 작업을 실제로 수행하려면 &lt;code&gt;migrate&lt;/code&gt; 명령을 내리면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./manage.py migrate
Operations to perform:
  Apply all migrations: admin, photo, contenttypes, auth, sessions
Running migrations:
  Applying photo.0001_initial... OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 해서 &lt;code&gt;Photo&lt;/code&gt; 모델을 데이터베이스에 반영하여 연결하였습니다. 이제부터는 &lt;code&gt;Photo&lt;/code&gt; 모델로 데이터를 데이터베이스에 저장하고 찾아 꺼내며 다룰 수 있습니다.&lt;/p&gt;

&lt;h3&gt;2. 부록&lt;/h3&gt;

&lt;h4&gt;(1) MTV와 MVC&lt;/h4&gt;

&lt;p&gt;Django는 Model, Template, View의 앞자를 따서 MTV 패턴을 따릅니다. Model-View-Controller인 &lt;a href=&quot;http://opentutorials.org/course/697/3828&quot;&gt;MVC 패턴&lt;/a&gt;과 유사한데, 실제로 많은 사람은 이 패턴의 개념에 별 차이를 두지 않습니다. Django의 View는 MVC 패턴의 Controller, Template은 MVC 패턴의 View로 적당히 퉁쳐서 이해합니다. 역할로 보면 그다지 틀린 말도 아니지만, &lt;a href=&quot;https://docs.djangoproject.com/en/1.6/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names&quot;&gt;Django framework가 지향하는 철학면에서 보면 MTV 패턴과 MVC 패턴엔 미묘한 차이&lt;/a&gt;가 있습니다.&lt;/p&gt;

&lt;p&gt;재료를 가공하여 손에 닿는 결과물로 만드는 상황을 가정하지요. 여기서 재료란 Data, 즉 Model이고, 재료로 만들어 낸 결과물이 View입니다. 가공하는 행위자가 바로 Controller지요. 이게 MVC 패턴이라면, &lt;a href=&quot;https://www.djangoproject.com/foundation/&quot;&gt;Django 소프트웨어 재단&lt;/a&gt;에서는 MVC 패턴의 Controller 역할은 Django framework 그 자체가 하고 있다고 봅니다.&lt;/p&gt;

&lt;p&gt;무슨 말인지 알 듯 하기도 하고 모를 듯 하기도 하네요. :)&lt;/p&gt;

&lt;h4&gt;(2) 한날이 아이디어를 구체화 하는 과정&lt;/h4&gt;

&lt;p&gt;저는 막연한 아이디어를 구현하고자 할 땐 표현물부터 만듭니다. 가령 고객을 대상으로 하는 제품 설명서를 작성하거나 정해놓은 흐름대로만(시나리오) 작동하는 견본(sample)을 만듭니다.&lt;/p&gt;

&lt;p&gt;표현물을 먼저 만드는 이유는 사용 경험 수단을 만들어서 겪어보고, 그러면서 저 스스로 만들 대상을 실체화하는 데 좋기 때문입니다. 왜(why) 만드는지 고민하는 것이지요. 실체화(구체화)가 되면 모델을 구상합니다. 모델도 행위를 중심으로 구상합니다. 어떤 정보(데이터)가 있는지는 정보를 어떻게 보일 것인지 고민하면 얼개를 짤 수 있습니다. 그리고 보여진 데이터로 어떤 행위를 할 수 있는지 생각하면 데이터 간 관계, 연관 데이터를 예상할 수 있습니다. 어떻게(how) 목표에 달성하는지 고민한 것입니다. 그런 과정을 얼추 마치면 방법(how)에 필요한 재료를 제한합니다. 물론 만들면서 그때 그때 필요한 재료를 추가하거나 필요없는 재료를 빼기도 합니다.&lt;/p&gt;

&lt;p&gt;이렇게 하는 이유는 이런 개발 과정이 재밌어서 그렇습니다. 취향이자 성향이지요. 이 강좌를 보시는 여러분의 취향이나 성향, 철학은 각양각색이니 제 취향과 성향대로 개발하고 설명해 나가겠습니다. ^^&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이것으로 강좌 3편을 마칩니다. 모델을 만들고 데이터를 실제로 저장하는 부분까지 하려 했는데, 분량이 많아져서 3편을 여기서 끊네요. 4편에서는 꼭 데이터를 저장하고 꺼내 봅시다! :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hannal/start_with_django_webframework/tree/03-fullsource/pystagram&quot;&gt;3편까지 진행한 전체 소스 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-3137:1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/leewin12/rest-api-seolgye&quot;&gt;REST API 설계&lt;/a&gt; 발표 자료에서 한국어로 잘 설명 해놨습니다.&amp;#160;&lt;a href=&quot;#fnref-3137:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3137:2&quot;&gt;
&lt;p&gt;&lt;code&gt;django/db/models/fields/files.py&lt;/code&gt; 모듈에 정의되어 있는 &lt;code&gt;ImageField&lt;/code&gt; 클래스를 참조하세요.&amp;#160;&lt;a href=&quot;#fnref-3137:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3137:3&quot;&gt;
&lt;p&gt;&lt;code&gt;django/db/backends/&lt;/code&gt;에서 mysql, oracle, sqlite3 패키지 안에 있는 &lt;code&gt;creation.py&lt;/code&gt; 모듈을 참조하세요.&amp;#160;&lt;a href=&quot;#fnref-3137:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3137:4&quot;&gt;
&lt;p&gt;글자 수가 아니라 바이트입니다.&amp;#160;&lt;a href=&quot;#fnref-3137:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 15 Sep 2014 02:05:48 +0900</pubDate>
        <link>http://blog.hannal.com//2014/9/start_with_django_webframework_03</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/9/start_with_django_webframework_03</guid>
        
        <category>django</category>
        
        <category>model</category>
        
        <category>migration</category>
        
        
        <category>start_with_django_webframework</category>
        
      </item>
    
      <item>
        <title>wkhtmltopdf 에서 글자 겹치는 문제</title>
        <description>&lt;p&gt;wkhtmltopdf (QT 패치 적용한 버전)으로 html을 pdf로 변환할 때 글자가 겹치는 현상이 일어나는 원인.&lt;/p&gt;

&lt;h3&gt;letter-spacing css 속성&lt;/h3&gt;

&lt;p&gt;letter-spacing이 -1px 이하인 경우 글자가 의도한 것보다 많이 겹치거나 오히려 자간이 벌어진다. -0.5px 정도로 값을 올리면 문제 해결. 하지만 환경에 따라서 이 값은 변동될 수 있으니 letter-spacing 을 적절히 조절해봐야 함.&lt;/p&gt;

&lt;h3&gt;text-indent css 속성&lt;/h3&gt;

&lt;p&gt;text-indent 속성에 엉뚱한(?) 값을 넣어 글자를 안 보이게 하는 트릭(예 : text-indent: -999999px)은 wkhtmltopdf에서 통하지 않는다. 글자들이 이상하게 커져서 한 곳에 겹쳐지는 등 전혀 엉뚱한 문제가 발생한다.&lt;/p&gt;

&lt;p&gt;해결법은 텍스트 자체를 별도 태그로 감싸서 출력을 안 시키거나 감춰야 한다.&lt;/p&gt;

&lt;p&gt;&amp;lt;div style=&quot;text-indent: -10000em;&quot;&amp;gt;&amp;lt;span style=&quot;display: none;&quot;&amp;gt;감출 글자&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;

&lt;p&gt;또는&lt;/p&gt;

&lt;p&gt;&amp;lt;div style=&quot;text-indent: -10000em;&quot;&amp;gt;&amp;lt;span style=&quot;visibility: hidden;&quot;&amp;gt;감출 글자&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;

&lt;p&gt;webkit renderer를 쓰는 safari와 chrome에서는 발견되지 않으며, wkhtmltopdf에서 발생. 이외에도 다양한 원인이 있겠지만, 현재까지 발견한 원인은 이 두 가지.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Sep 2014 00:34:40 +0900</pubDate>
        <link>http://blog.hannal.com//2014/9/letter_overlap_problem_on_wkhtmltopdf</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/9/letter_overlap_problem_on_wkhtmltopdf</guid>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>2. 개발 환경 꾸리기</title>
        <description>&lt;ul&gt;
&lt;li&gt;마지막 갱신일시 : 2014년 08월 24일 9시 37분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 2편에서는 Pystagram을 만드는 데 필요한 개발 도구를 설치하겠습니다. 저는 Mac OS X를 쓰기 때문에 Mac OS X 환경을 기준으로 설명하며, 윈도우나 리눅스 환경용 설명은 웹에 있는 관련 자료로 대신하겠습니다.&lt;/p&gt;

&lt;h3&gt;1. Python 설치&lt;/h3&gt;

&lt;h4&gt;(1) Mac OS X, Linux&lt;/h4&gt;

&lt;h5&gt;Python 설치&lt;/h5&gt;

&lt;p&gt;Python은 현재 두 개 큰 버전이 배포되고 사용됩니다. 2 버전과 3 버전입니다. 우리가 사용할 Python 버전은 2.7입니다. 터미널을 연 뒤에 다음 명령어를 입력해보세요. $는 입력하지 마시고요&lt;sup id=&quot;fnref-3125:1&quot;&gt;&lt;a href=&quot;#fn-3125:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ python --version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아마도 &lt;code&gt;Python 버전&lt;/code&gt; 형식인 문장이 출력될 겁니다. 대개는 버전이 2.7대입니다. 2버전대의 최신 버전은 &lt;a href=&quot;https://www.python.org/download&quot;&gt;Python 공식 웹사이트에서 내려받아 설치&lt;/a&gt;하거나 패키지 관리 도구로 설치하면 됩니다. 패키지 관리 도구로 프로그램과 같은 패키지를 관리하면 편하니 패키지 관리 도구를 권합니다. Mac OS X라면 &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;를 많이 씁니다. 저도 Homebrew로 설치하겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ brew install python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Homebrew가 설치되어 있지 않다면 &lt;a href=&quot;http://brew.sh/#install&quot;&gt;brew부터 설치&lt;/a&gt;해야 하며, brew 설치할 때 xcode 관련 도구인 Command Line Tools가 요구되기도 합니다. 대개는 관련 과정이 함께 안내되는데, 실수로 그냥 넘어갔거나 안내되지 않았다면 다음 명령어로 Command Line Tools를 설치하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ xcode-select --install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;보다 자세한 내용은 &lt;a href=&quot;http://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/&quot;&gt;How to Install Xcode, Homebrew, Git, RVM, Ruby &amp;amp; Rails on Snow Leopard, Lion, Mountain Lion, and Mavericks&lt;/a&gt; 글을 참조하세요. 만약 &lt;a href=&quot;https://github.com/Homebrew/homebrew/wiki/Xcode&quot;&gt;Mac OS X 버전이 너무 오래된 경우 Command Line Tools나 brew가 설치되지 않을 수도 있습니다&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Debian 계열 Linux라면 운영체제에 내장된 apt-get을 씁니다. Redhat 계열 Linux는 잘 모르겠네요. RPM을 쓰나요, Yum을 쓰나요? :) 이 강좌에선 Debian 계열을 전제로 두겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ apt-get install python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그런데 아마 접근 권한 문제로 설치되지 않을 겁니다. 오류 내용을 잘 보면 &lt;code&gt;Permission denied&lt;/code&gt; 문구가 포함되어 있지요. 이런 경우 &lt;code&gt;sudo&lt;/code&gt; 명령어도 써야 합니다. sudo는 다른 이용자(대개는 최고권한자(superuser 또는 root))의 권한으로 sudo 명령어 뒤에 나오는 내용을 수행하는 프로그램입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ sudo brew install python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;또는&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ sudo apt-get install python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그러면 비밀번호를 묻는데, 시스템 관리자 권한이 있는 계정의 비밀번호를 입력합니다. Mac OS X라면 대개는 현재 로그인한 자신의 계정이 이미 시스템 관리자 권한을 갖고 있으므로 자신의 계정 비밀번호를 입력하면 됩니다.&lt;/p&gt;

&lt;h4&gt;(2) Windows&lt;/h4&gt;

&lt;p&gt;제가 Mac OS X를 사용하다 보니 Windows 환경에서 Python을 설치하는 방법에 관해서는 설명하기 어렵습니다. 그래서 설치 관련 글을 소개하는 걸로 대신하겠습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://goo.gl/v1ikhD&quot;&gt;파이썬 윈도우 설치&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python-guide.org/en/latest/starting/install/win/&quot;&gt;Installing Python on Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;2. 개발 환경 구축&lt;/h3&gt;

&lt;p&gt;여기서부터는 Mac OS X, Linux 구분을 하지 않습니다. 다만, Windows는 제가 실제 설치와 작동을 확인하기 어려우니 설치 관련 자료를 별첨하겠습니다.&lt;/p&gt;

&lt;h4&gt;(1) pip 설치&lt;/h4&gt;

&lt;p&gt;pip는 Python에 사용되는 각종 패키지&lt;sup id=&quot;fnref-3125:2&quot;&gt;&lt;a href=&quot;#fn-3125:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;를 설치하거나 업그레이드, 삭제 등을 하는 관리 도구입니다. 이 도구를 설치하는 이유는 Django를 비롯하여 Python에 유용한 패키지를 쉽고 편하게 관리하기 위해서입니다.&lt;/p&gt;

&lt;p&gt;설치는 간단합니다. pip를 설치해주는 스크립트인 &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot;&gt;get-pip.py&lt;/a&gt; 파일을 받아서&lt;sup id=&quot;fnref-3125:3&quot;&gt;&lt;a href=&quot;#fn-3125:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 실행하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ python get-pip.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;별문제 없이 설치가 끝날 겁니다. &lt;code&gt;OSError: [Errno 13] Permission denied:&lt;/code&gt; 이런 식으로 오류가 발생하며 설치가 중단된다면 &lt;code&gt;sudo&lt;/code&gt;를 이용하여 시스템 관리자 권한으로 설치하면 됩니다.&lt;/p&gt;

&lt;p&gt;이외 다른 방법으로 pip를 설치하실 거라면 &lt;a href=&quot;https://pip.pypa.io/en/latest/installing.html&quot;&gt;pip installation&lt;/a&gt; 문서를 참조하세요. pip는 Mac OS X, Linux, 그리고 윈도우에서도 설치되고 작동합니다.&lt;/p&gt;

&lt;h4&gt;(2) virtualenv 설치&lt;/h4&gt;

&lt;p&gt;virtualenv는 가상으로 Python 환경을 만드는 도구입니다. Virtual Environment를 줄인 이름이겠지요?!&lt;/p&gt;

&lt;p&gt;실제 환경인 주 시스템(운영체제)에 패키지를 설치하면 패키지가 바뀔 때마다 그 패키지를 사용하는 프로젝트 모두가 영향을 받습니다. 예를 들어, Django 1.6 버전을 기반으로 Pystagram을 개발하였는데, 얼마 후 1.6버전과 호환성이 떨어지는 Django 1.7버전이 출시됐다고 가정하겠습니다. 만약 Django 1.7 버전을 설치한다면 Django 1.6 버전에서 잘 작동하던 Pystagram에 문제가 발생할 지도 모릅니다.&lt;/p&gt;

&lt;p&gt;Pystagram은 Django 1.6 버전을 기반으로, Hannal 프로젝트는 Django 1.5 버전 기반으로, Kay 프로젝트는 Django 1.7 버전 기반으로 환경을 분리하면 되는데, 한 시스템에서 이런 환경을 가상으로 분리하여 편하게 관리하도록 도와주는 도구가 바로 virtualenv입니다. Python 패키지 뿐만 아니라 사용할 Python 버전도 가상 환경으로 분리할 수 있습니다. 한 시스템에 여러 Python 버전을 설치하고, 버전에 따라 사용할 Python을 프로젝트 마다 지정할 수 있는 것이죠.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://virtualenv.readthedocs.org/en/latest/virtualenv.html&quot;&gt;virtualenv 설치&lt;/a&gt;는 pip를 이용하면 간단합니다. 아참, 관리자 권한이 필요하니 &lt;code&gt;sudo&lt;/code&gt;도 씁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ sudo pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;설치가 끝나면 virtualenv로 만드는 가상 환경이 저장될 공간을 만들고, 그 경로를 설정해야 합니다. 보통은 이용자 계정의 홈 디렉터리에 가상 환경 공간을 만듭니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ mkdir ~/.virtualenvs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그런 뒤 &lt;code&gt;.bashrc&lt;/code&gt; 나 &lt;code&gt;.bash_profile&lt;/code&gt; 파일&lt;sup id=&quot;fnref-3125:4&quot;&gt;&lt;a href=&quot;#fn-3125:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;에 이 경로를 지정해줍니다. 이 두 파일은 ~/ 경로에 있으며, 없으면 만들면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;export WORKON_HOME=$HOME/.virtualenvs    
export PROJECT_HOME=$HOME/Workspace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;WORKON_HOME&lt;/code&gt;은 virtualenv로 만드는 가상 환경이 저장될 경로를 지정하며, &lt;code&gt;PROJECT_HOME&lt;/code&gt;은 우리가 만드는 소스 파일을 담을 작업 공간입니다. 저는 ~/Workspace 에 코딩하는 소스 파일을 두는데, 여러분은 자신의 환경에 맞게 경로를 지정하면 되며, 꼭 &lt;code&gt;PROJECT_HOME&lt;/code&gt;을 지정하지 않아도 괜찮습니다.&lt;/p&gt;

&lt;p&gt;이제 위 내용을 실제로 반영하겠습니다. 터미널에서 다음 명령어를 입력하세요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ source ~/.bashrc

또는 

$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;터미널에서 다음 명령어를 실행했을 때 여러분이 지정한 경로가 나올 겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ echo $WORKON_HOME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이번엔 &lt;a href=&quot;http://virtualenvwrapper.readthedocs.org/&quot;&gt;virtualenvwrapper&lt;/a&gt;를 설치하겠습니다. 이름을 읽기 고약한데 virtualenv wrapper 입니다. virtualenv를 더 편하게 다루도록 도와주는 도구이지요. 이것도 pip로 설치하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;pip install virtualenvwrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아마도 &lt;code&gt;sudo&lt;/code&gt;가 필요할 겁니다.&lt;/p&gt;

&lt;p&gt;이제 쉘(shell)을 열 때마다 virtualenvwrapper를 쓰도록 해줘야 합니다. &lt;code&gt;.bashrc&lt;/code&gt; 을 열고 다음 줄을 추가하세요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;source /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;저 파일이 있는 경로는 여러분의 환경에 따라 다를 수 있는데, 보통은 &lt;code&gt;/usr/local/bin/&lt;/code&gt;에 있을 겁니다. 이제 &lt;code&gt;source ~/.bash_rc&lt;/code&gt; 를 실행하여 방금 &lt;code&gt;.bashrc&lt;/code&gt;에 추가한 내용을 반영합니다. 잘 됐는 지 확인하려면 터미널에서 &lt;code&gt;workon&lt;/code&gt; 명령어를 실행해보세요.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ workon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;별달리 출력되는 게 없다면 지금까지 과정을 제대로 마친 겁니다.&lt;/p&gt;

&lt;h5&gt;Windows에 pip와 virtualenv 설치 관련 자료&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tylerbutler.com/2012/05/how-to-install-python-pip-and-virtualenv-on-windows-with-powershell/&quot;&gt;How To Install Python, pip, and virtualenv on Windows with PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python-guide.org/en/latest/starting/install/win/#setuptools-pip&quot;&gt;Installing Python on Windows - Setuptools + Pip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;(3) SQLite 설치&lt;/h4&gt;

&lt;p&gt;데이터를 저장하는 데 필요한 데이터베이스는 &lt;a href=&quot;http://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;를 사용할 겁니다. 실제 서비스를 운영하기엔 부족하지만, 공부하는 데엔 참 좋습니다.&lt;/p&gt;

&lt;p&gt;Mac OS X나 Linux 계열 운영체제엔 SQLite 3가 보통은 이미 설치되어 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ sqlite3
SQLite version 3.8.5 2014-06-04 14:06:34
Enter &quot;.help&quot; for usage hints.
Connected to a transient in-memory database.
Use &quot;.open FILENAME&quot; to reopen on a persistent database.
sqlite&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그래서 SQLite 3 설치를 신경써야 하는 경우는 흔하지 않으며, 여러분이 SQLite 3이 설치되어 있지 않아서 문제를 겪는 경우도 드뭅니다. 하지만 그 드문 일을 대비해 설치하는 과정을 다루겠습니다.&lt;/p&gt;

&lt;p&gt;Mac OS X에서는 Homebrew로 설치하거나 버전 업그레이드를 하면 편합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ brew update
$ brew upgrade
$ brew install sqlite3
$ brew link --force sqlite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;하지만 이미 &lt;code&gt;sqlite3&lt;/code&gt;이 설치되어 있다는 경고가 표시되며 설치되지 않을 겁니다. 이미 설치되어 있을 테니까요.&lt;/p&gt;

&lt;p&gt;Debian 계열 Linux라면 apt-get으로 설치하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ apt-get install sqlite3 libsqlite3-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;libsqlite3-dev&lt;/code&gt;는 SQLite 3 개발용 라이브러리입니다.&lt;/p&gt;

&lt;p&gt;그런데 패키지 관리 도구로 설치가 안 되거나 직접 소스를 직접 컴파일하여 설치하고 싶다면 &lt;a href=&quot;http://sqlite.org/download.html&quot;&gt;sqlite.org의 Download&lt;/a&gt; 페이지에 가서  “Source Code” 영역에 있는 &lt;code&gt;sqlite-autoconf&lt;/code&gt;로 이름이 시작하는 파일을 받습니다. 파일 확장자는 &lt;code&gt;tar.gz&lt;/code&gt;입니다. 이 소스 파일을 다음과 같이 컴파일하여 설치하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ./configure --prefix=/usr/local
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SQLite 3가 &lt;code&gt;/usr/local/&lt;/code&gt; 에 설치되고, &lt;code&gt;/usr/local/bin/&lt;/code&gt;에 &lt;code&gt;sqlite3&lt;/code&gt; 파일이 생깁니다. 하지만 패키지 관리 도구로 설치되지 않을 정도로 오래된 운영체제라면 &lt;strong&gt;직접&lt;/strong&gt; 소스 컴파일해서 프로그램을 설치하느니 운영체제를 더 최신 버전으로 업그레이드 하는 게 나을 것 같습니다. :)&lt;/p&gt;

&lt;p&gt;Python으로 SQLite 3를 사용하는 데 필요한 인터페이스는 대개 Mac OS X나 Linux에 기본 내장되어 있습니다. Python 쉘에서 간단히 확인할 수 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;]]] import sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;하지만 어떤 이유에서인지 SQLite 3 인터페이스 모듈이 없거나 제대로 불러오지 못하는 경우가&lt;sup id=&quot;fnref-3125:9&quot;&gt;&lt;a href=&quot;#fn-3125:9&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; 있습니다. &lt;code&gt;ImportError: No module named _sqlite3&lt;/code&gt; 이런 오류를 내면서 말이죠. 이건 예전 Python 버전이 주 시스템에 설치되어 있는 상태에서 최신 Python 버전을 설치하는 과정 중에 &lt;code&gt;_sqlite3.so&lt;/code&gt; 파일이 제대로 설치되지 않아서 그렇습니다. 여러 해결 방법이 있지만, 저는 다른 인터페이스 모듈을 pip로 설치하여 해결하겠습니다. 물론 virtualenv 가상 환경에 말이죠.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ workon pystagram
(pystagram)$ pip install pysqlte
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pysqlite은 Python에 기본 내장된 &lt;code&gt;sqlite3&lt;/code&gt; 인터페이스와 다른 모듈입니다. 그래서 다음과 같이 사용하는 경우가 많습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;try:
    import sqlite3
except:
    from pysqlite2 import dbapi2 as sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pysqlite3&lt;/code&gt;에 있는 &lt;code&gt;dbapi2&lt;/code&gt;(database api 2)를 &lt;code&gt;sqlite3&lt;/code&gt;으로 이름 붙인 것(alias)입니다. 인터페이스가 같기 때문에 가능한 것이지요. 하지만 웬지 번거로워 보이네요. 그래도 걱정 마세요. Django에는 이미 저런 처리가 되어 있습니다.&lt;/p&gt;

&lt;h5&gt;Windows에 SQLite 3 설치&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://goo.gl/buqvp3&quot;&gt;윈도우 sqlite 설치&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;3. Django 설치&lt;/h3&gt;

&lt;p&gt;이제 드디어 Django를 설치할 차례입니다. virtualenv로 가상 환경을 만들고 그곳에 Django를 설치하겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ mkvirtualenv pystagram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt;는 필요 없으며, 위 명령어를 실행하면 아마 다음과 같이 뭔가가 출력될 겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;New python executable in pystagram/bin/python    
Installing Setuptools................................done.    
Installing Pip.......................................done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;앞에서 &lt;code&gt;WORKON_HOME&lt;/code&gt;으로 지정한 경로에 &lt;code&gt;pystagram&lt;/code&gt; 디렉터리가 생성되어 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ls $WORKON_HOME

또는 

$ ls ~/.virtualenvs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;우리가 virtualenv로 만든 pystagram이라는 가상 환경 공간에서 Django를 설치하면 Python이 설치된 주 시스템이 아닌 저 경로에(&lt;code&gt;~/.virtualenvs/pystagram&lt;/code&gt;) 설치됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkvirtualenv&lt;/code&gt;로 가상 환경을 만들면 여러분의 쉘은 자동으로 그 가상 환경으로 들어 갑니다. 아마 쉘 프롬프트는 이렇게 표시될 겁니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;(pystagram)$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그 상태에서 &lt;code&gt;deactivate&lt;/code&gt; 명령어를 실행해보세요. 그러면 쉘 프롬프트에 &lt;code&gt;(pystagram)&lt;/code&gt; 부분이 표시되지 않는데, &lt;code&gt;pystagram&lt;/code&gt;이라 이름 붙인 가상 환경에서 빠져 나와서 그렇습니다.&lt;/p&gt;

&lt;p&gt;Django를 pystagram 가상 환경에 설치하기 위해 다시 이 가상 환경으로 들어가겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ workon pystagram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;workon&lt;/code&gt;은 virtualenvwrapper에서 제공하는 명령어입니다. &lt;code&gt;workon&lt;/code&gt;만 실행하면 만들어 놓은 가상 환경 항목이 표시됩니다. &lt;code&gt;workon&lt;/code&gt; 뒤에 사용할 가상 환경 항목 이름을 일부 입력하고 탭(tab) 키를 누르면 나머지 부분이 자동 완성되기도 합니다. &lt;code&gt;workon pys&lt;/code&gt;까지 입력하고 탭을 누르면 나머지 &lt;code&gt;tagram&lt;/code&gt;이 자동 완성되는 것이지요.&lt;/p&gt;

&lt;p&gt;앞으로 우리는 이 가상 환경 안에서 Python 패키지를 관리합니다. 그 첫 번째로 Django를 설치하겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;(pystagram)$ pip install django
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;주 시스템에 설치하지 않고 가상 환경에 설치하기 때문에 관리자 권한은 필요 없어서 &lt;code&gt;sudo&lt;/code&gt;를 쓰지 않았습니다.&lt;/p&gt;

&lt;p&gt;설치가 잘 됐는지 확인해 보겠습니다. 쉘에서 &lt;code&gt;python&lt;/code&gt;을 실행하면 Python 대화형 쉘이 실행됩니다. Python 대화형 쉘에서 다음 명령어를 입력하여 Django 버전을 확인해 보겠습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;(pystagram)$ python    
Python 2.7.5 (default, Mar  9 2014, 22:15:05)    
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin    
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.    
]]] import django    
]]] django.VERSION    
(1, 6, 6, &#39;final&#39;, 0)    
]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;실제로는 프롬프트 기호가 &lt;code&gt;]]]&lt;/code&gt; 대신 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;가 표시됩니다.&lt;/p&gt;

&lt;p&gt;Python 프롬프트에서 &lt;code&gt;import django&lt;/code&gt;를 실행하면 아무런 안내없이 다음 프롬프트(&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;)가 출력되는 경우가 잘 설치된 겁니다. Django가 제대로 설치가 안 됐거나 경로(PATH) 설정에 문제가 있다면 &lt;code&gt;ImportError: No module named django&lt;/code&gt;라는 오류가 발생합니다. 하지만 가상 환경 안에서는 이런 문제가 거의 일어나지 않습니다. 설치한 Python 패키지 경로 설정이 이미 잘 되어있기 때문입니다. 만약 virtualenv로 만든 가상 환경에서 벗어나 실제 환경에서 위와 같이 Django를 가져오면(import)하면 무슨 일이 발생할까요? Django를 설치하지 않았기 때문에 &lt;code&gt;ImportError: No module named django&lt;/code&gt; 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;가상 환경 안에서 설치한 Django는 다음 경로에 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;$ ls $WORKON_HOME/pystagram/lib/python2.7/site-packages    
Django-1.6.6.dist-info    
django    
.
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4. 편리한 도구 설치&lt;/h3&gt;

&lt;p&gt;Pystagram을 만드는 데 필요한 Python 패키지는 그때그때 설치하겠습니다. 대신 Pystagram을 편하게 만드는 데 좋은 도구는 먼저 소개하겠습니다. 사용 여부는 여러분 마음입니다. :)&lt;/p&gt;

&lt;h4&gt;(1) Postman - REST Client&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.getpostman.com/&quot;&gt;Postman - REST Client&lt;/a&gt;는 HTTP 기반으로 동작하는 API를 편리하게 호출하는 클라이언트(client)입니다. 서버에 기능을 구현한 후 동작 여부를 확인하려면 클라이언트에서 접근할 수 있는 인터페이스(interface)를 만들어야 합니다. 이 클라이언트쪽 인터페이스를 만드는 것 자체가 귀찮기도 하지만, 오류를 확인하고 추적하는 디버깅(debuging) 환경이 미비하여 문제를 파악하기도 불편합니다. Postman은 개발에 용이한 클라이언트 인터페이스를 제공하는 도구입니다.&lt;/p&gt;

&lt;p&gt;Postman은 Google Chrome용 앱입니다. 비슷한 역할을 하는 Firefox용 부가기능은 &lt;a href=&quot;https://addons.mozilla.org/de/firefox/addon/restclient/&quot;&gt;RESTClient&lt;/a&gt;가 있는데, 저는 써본 적이 없습니다.&lt;/p&gt;

&lt;h4&gt;(2) 편집기&lt;/h4&gt;

&lt;p&gt;프로그래밍은 해본 적이 없고 정말 Python 등으로 Hello world만 출력해본 분이라면 코딩에 필요한 편집기를 아직 결정하지 못하셨을 겁니다. Django로 프로그래밍을 하는 데 필요한 전용 편집기는 따로 없습니다. 편집기는 다양하며 취향에 맞는 걸 쓰면 됩니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Atom (무료)&lt;/li&gt;
&lt;li&gt;eclipse + PyDev (무료)&lt;/li&gt;
&lt;li&gt;Emacs (무료)&lt;/li&gt;
&lt;li&gt;Notepad (일명 메모장. 유료 운영체제에 기본 내장)&lt;/li&gt;
&lt;li&gt;PyCharm (무료, 유료)&lt;/li&gt;
&lt;li&gt;Sublime Text (유료)&lt;/li&gt;
&lt;li&gt;Vim (무료)&lt;/li&gt;
&lt;li&gt;Visual Studio (유료, 무료)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;저는 Sublime Text 2를 구입하여 사용하고 있으며, 간간히 Vim을 씁니다. 무료인데 꽤 잘 만들어졌고 빠르게 개선되고 있는 Atom도 좋습니다.&lt;/p&gt;

&lt;p&gt;하지만 Apple Pages나 Microsoft Word 같은 도구는 코딩에 적합하지 않습니다. :)&lt;/p&gt;

&lt;h3&gt;5. Python&lt;/h3&gt;

&lt;p&gt;이 강좌는 Python 입문자를 대상으로 하지 않으므로 Python 문법 등에 대해서는 다루지 않습니다. 대신 Python 관련하여 몇 가지 규칙을 정하고, 여러분은 이 규칙을 따르시길 권합니다.&lt;/p&gt;

&lt;h4&gt;(1) utf-8&lt;/h4&gt;

&lt;p&gt;우리는 다루는 문자나 소스 파일의 문자형은 &lt;a href=&quot;http://ko.wikipedia.org/wiki/UTF-8&quot;&gt;UTF-8&lt;/a&gt;로 할 겁니다. 소스 코드를 파일로 저장할 때 꼭 파일 형식을 UTF-8로 지정해서 저장하세요. 그렇지 않으면 영문이 아닌 글자(한글 등)를 다루다 문자 인코딩(encoding) 오류를 접하게 됩니다.&lt;/p&gt;

&lt;p&gt;또, Python 소스 코드 파일 안에 한글을 표기하는 경우 파일 맨 위에&lt;sup id=&quot;fnref-3125:5&quot;&gt;&lt;a href=&quot;#fn-3125:5&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; 다음 줄을 추가해야 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;# coding: utf-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 내용은 그 Python 소스 코드 파일의 인코딩을 지정하는 역할&lt;sup id=&quot;fnref-3125:6&quot;&gt;&lt;a href=&quot;#fn-3125:6&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;을 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;# -*- coding: utf-8 -*-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 표현하기도 합니다.&lt;/p&gt;

&lt;p&gt;Python에서 문자 인코딩 오류는 입문자나 Python이 생소한 사람을 괴롭히는 흔한 오류 중 하나입니다. 소스 파일을 UTF-8로 저장하고 소스 파일에 인코딩 종류를 명기하면 정말 사소한 인코딩 오류는 만나지 않습니다.&lt;/p&gt;

&lt;h4&gt;(2) 들여쓰기&lt;/h4&gt;

&lt;p&gt;Python의 언어 문법은 코드를 들여 쓰는 규칙(indentation)을 엄격히 따릅니다. 같은 맥락에 있는 코드는 들여 쓰는 깊이가 같아야 합니다. 들여 쓰는 깊이는 탭(tab)으로 만드는데, 이 탭은 한 자리 공백(space) 문자로 표현하는 소프트 탭(soft tab) 방식과 자판에 있는 탭 키로 표현하는 하드 탭(hard tab) 방식이 있습니다. 하지만 스페이스든 탭이든 공백 문자 하나로 처리하기 때문에 스페이스와 탭을 한 코드 내에 병행해도 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;if type(1023) is int:
    print &quot;integer&quot;
else:
                print &quot;not integer&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 코드에서 &lt;code&gt;print &quot;integer&quot;&lt;/code&gt;는 스페이스 네 개로 들여 썼고, &lt;code&gt;print &quot;not integer&quot;&lt;/code&gt;는 탭 네 개로 들여 썼다고 가정하겠습니다. 이 코드는 &lt;strong&gt;눈으로 보기엔 안 좋지만&lt;/strong&gt; 들여쓰기 문법에서는 허용됩니다&lt;sup id=&quot;fnref-3125:7&quot;&gt;&lt;a href=&quot;#fn-3125:7&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;. 스페이스든 탭이든 네 개로 들여쓰기 깊이를 같게 했기 때문이지요. 만약 &lt;strong&gt;눈으로&lt;/strong&gt; 보기에 좋게 하려고 다음과 탭 네 개를 한 개로 바꿔서 공백이 네 개인 것처럼 &lt;strong&gt;보이게&lt;/strong&gt; 하면 들여쓰기 오류가 발생합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;if type(1023) is int:
    print &quot;integer&quot;
else:
    print &quot;not integer&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그래서 한 소스 파일 안에서 스페이스와 탭을 혼용하는 걸 권하지 않습니다. 소프트탭이든 하드탭이든 하나만 하길 권하지요.&lt;/p&gt;

&lt;p&gt;저는 &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0008/#indentation&quot;&gt;스페이스 네 칸을 탭 한 칸으로 표현하는 소프트탭 방식&lt;/a&gt;을 쓰겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이것으로 강좌 2편을 마칩니다. 분량이 적을 거라 예상했는데, 왜 설치하고 왜 그렇게 설치하는지 설명하려다 보니 예상보다 길게 썼네요.&lt;/p&gt;

&lt;p&gt;3편에서는 Django로 프로젝트를 만들고 데이터베이스에 데이터도 넣어볼 겁니다. 그럼 3편에서 만나요.&lt;/p&gt;

&lt;p&gt;아참. 9월 초까지 블로그를 분리하고 이전하느라 접속이 잘 안 될 수 있습니다. :)&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-3125:1&quot;&gt;
&lt;p&gt;$ 기호는 보통은 쉘 프롬프트(shell prompt)를 뜻합니다. 즉, $가 있다면 터미널을 열어서 쉘에서 실행한다는 의미입니다.&amp;#160;&lt;a href=&quot;#fnref-3125:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:2&quot;&gt;
&lt;p&gt;Python Package : 모듈은 함수나 변수, 클래스를 모아 놓은 파일이며, 패키지는 모듈을 묶어놓은 것이다. &lt;a href=&quot;https://docs.python.org/2/tutorial/modules.html#packages&quot;&gt;Python Modules - Packages&lt;/a&gt; 참조.&amp;#160;&lt;a href=&quot;#fnref-3125:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:3&quot;&gt;
&lt;p&gt;wget을 사용하면 터미널에서 파일을 간편하게 받습니다. &lt;code&gt;wget 주소(URL)&lt;/code&gt; 라고 입력하면 끝이지요. wget은 brew나 apt-get으로 설치하면 되며, &lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/wget.htm&quot;&gt;윈도우용 wget&lt;/a&gt;도 있습니다.&amp;#160;&lt;a href=&quot;#fnref-3125:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:4&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kldp.org/node/38265&quot;&gt;bashrc와 bash_profile 차이&lt;/a&gt;&amp;#160;&lt;a href=&quot;#fnref-3125:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:9&quot;&gt;
&lt;p&gt;예를 들면, Python 2.4가 설치되어 있을만큼 오래된 운영체제 배포본은 놀랍게도 SQLite 3가 설치되어 있지 않은 경우가 있습니다. 이 상태에서 Python 2.7을 설치하면 주 시스템에 SQLite 3 자체가 없어서 SQLite 3에 접근하는 인터페이스가 설치되지 않기도 합니다.&amp;#160;&lt;a href=&quot;#fnref-3125:9&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:5&quot;&gt;
&lt;p&gt;항상 맨 위는 아닙니다. 리눅스나 유닉스에서 Python 소스 코드 파일 자체를 실행하려는 경우 소스 파일 맨 위에는 이 파일을 실행하는 실행기를 명시하는데, 이런 경우 인코딩을 지정하는 내용을 두 번째 줄에 표기합니다.&amp;#160;&lt;a href=&quot;#fnref-3125:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:6&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0263/&quot;&gt;PEP 0263 - Defining Python Source Code Encodings&lt;/a&gt;&amp;#160;&lt;a href=&quot;#fnref-3125:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn-3125:7&quot;&gt;
&lt;p&gt;하지만 Python 3에서는 허용하지 않습니다.&amp;#160;&lt;a href=&quot;#fnref-3125:7&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 25 Aug 2014 00:05:44 +0900</pubDate>
        <link>http://blog.hannal.com//2014/8/start_with_django_webframework_02</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/8/start_with_django_webframework_02</guid>
        
        <category>django</category>
        
        <category>python</category>
        
        <category>파이썬</category>
        
        <category>virtualenv</category>
        
        <category>pip</category>
        
        <category>virtualenvwrapper</category>
        
        <category>설치</category>
        
        <category>postman</category>
        
        
        <category>start_with_django_webframework</category>
        
      </item>
    
      <item>
        <title>1. Pystagram 기획</title>
        <description>&lt;ul&gt;
&lt;li&gt;마지막 갱신일시 : 2014년 08월 16일 17시 40분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앞으로 우리는 Django를 이용해 &lt;a href=&quot;http://www.instagram.com&quot;&gt;Instagram&lt;/a&gt;과 비슷한 서비스를 만들 겁니다. 비슷한 서비스 중에는 &lt;a href=&quot;http://www.kakao.com/story?locale=ko&quot;&gt;카카오 스토리&lt;/a&gt;가 있지요. Django를 활용하여 만드는 것이지만 이름으로 조합하기 까다로우니 Python을 조합하여 Pystagram이라 이름을 짓도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;자, 이제 우리가 만들 것을 기획해 볼까요?&lt;/p&gt;

&lt;h3&gt;1. 개요&lt;/h3&gt;

&lt;p&gt;Instagram은 친구 및 가족들과 일상을 사진이나 동영상으로 찍어서 필터를 적용해 빠르고, 멋지고, 재미있게 공유할 수 있는 앱이라고 소개되어 있습니다. Pystagram은 Instagram을 기본으로 삼되 좀 더 단순하게 만들 겁니다. 그리고 쉽고 편하게 올리는 걸 최우선 정책 요소로 삼겠습니다. 이용자는 사진만 올릴 수 있고, 몇 가지 필터를 적용할 수 있습니다. 사진을 다루고 나면 동영상은 여러분이 직접 다룰 수 있게 될 겁니다.&lt;/p&gt;

&lt;h3&gt;2. Pystagram 기능&lt;/h3&gt;

&lt;h4&gt;(1) 사진&lt;/h4&gt;

&lt;p&gt;사진은 Pystagram에서 이용자가 활동하고 다른 사람과 교류하는 핵심 매체입니다. 서비스를 만드는 데 들어간 이미지를 제외한 모든 사진은 이용자가 올린 것이고, 이 사진에 댓글을 달거나 좋다는 표시를 남기지요. 이용자가 사진 관련해서 하는 행동을 기반으로 기능을 정리해 보겠습니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;사진 올리기
&lt;ul&gt;
&lt;li&gt;필터 적용&lt;/li&gt;
&lt;li&gt;미리보기 이미지(thumbnail image)&lt;/li&gt;
&lt;li&gt;사진 자르기, 크기 조절&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/li&gt;
&lt;li&gt;사진 보기
&lt;ul&gt;
&lt;li&gt;좋아요 표시 남기기&lt;/li&gt;
&lt;li&gt;댓글 남기기, 지우기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사진 삭제&lt;/li&gt;
&lt;li&gt;사람 태그 달기&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;사진 올리기&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/08/01-instagram_04.png&quot; alt=&quot;인스타그램 사진 올리기 화면&quot; /&gt;&lt;/p&gt;
&lt;p&gt;가장 기본 행동이죠. 사진은 오직 이용자 자신의 공간에만 올리며, 로그인한 모든 이용자가 사용하는 기능입니다.&lt;/p&gt;
&lt;p&gt;자신의 공간에만 올린다는 건, 서비스 안에서 사진을 소유한 사람이 누구이며, 그 권한 범위가 어디까지인지 정의한 것입니다. 다른 이용자의 공간에 사진을 올리거나 공용 공간에 사진을 올리지 않는다는 것이지요. 로그인한 모든 이용자가 사용하는 기능이란, 이용자는 서비스를 이용하려면 가입하고 로그인해야 대상을 뜻하며, 이용자라면 누구나 공통되게 사진을 올릴 수 있다는 의미입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로그인한 이용자만 사진을 올린다.&lt;/li&gt;
&lt;li&gt;사진은 이용자의 개인 공간에 올린다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이용자는 사진을 쉽고 편하게 보정해 올릴 수 있습니다. 쉽고 편하게 하는 것이 중요합니다. 그래서 여러 보정 요소와 수치가 미리 조정된(preset) 필터를 골라서 적용하며, 이용자가 직접 정교하게 보정 요소를 조정하지 못합니다. 필터는 한 번에 하나만 고르도록 하겠습니다. 여러 가지를 중첩하면 사진이 지저분해지기 일쑤이고, 지저분해진 상태를 해제하려고 이전 단계로 돌아가는 식으로 편집 단계나 기능이 들어가면 쉽고 편하게 하겠다는 목표를 잃을 것이기 때문이지요. 그리고 이 목표를 위해 이용자는 사진을 올리는 과정 중에만 필터를 적용하며, 사진을 올리고 나면 더는 편집할 수 없습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;미리 만들어진 필터를 제공하고, 이용자는 필터를 선택해서 사진을 보정한다.&lt;/li&gt;
&lt;li&gt;사진을 올릴 때에만 보정하며, 이미 올라간 사진은 보정할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instagram은 가로(width) 640픽셀, 세로(height) 640픽셀짜리 정사각형 사진만 표시됩니다. 그런데 사진은 대개 직사각형이므로 정사각형 모양으로 잘라야 하는데, Instagram은 사진을 편집하는 과정 중에 정사각형 틀에 맞추어 사진을 잘라내도록 합니다.&lt;/p&gt;
&lt;p&gt;우리는 좀 더 단순하게 할 예정입니다. 사진을 축소한 다음에 정사각형으로 잘라내는 거죠. 어쨌든 Pystagram도 정사각형으로 사진을 잘라냅시다. 크기는 Instagram과 같게 640x640으로 하겠습니다. 그런데 이용자가 가로나 세로 길이 중 어느 하나라도 640픽셀보다 작은 사진을 올리면 어떻게 할까요? 이런 사진을 받아들인다면 640픽셀로 사진을 늘려야 하는데, 사진을 늘리면 픽셀이 뭉개져서 썩 예쁘지 않습니다. 예쁘지 않은 사진을 올려서 손해 보는 건 엄밀히 말해 이용자이지만, 물 관리(?) 차원에서 품질이 너무 떨어지는 사진은 걸러내고자 합니다. 멋진 사진은 아니더라도 크기(길이)만은 최소한 지켜야 하는 품질을 제한하는 거죠. 그래서 가로, 세로 중 어느 한 변이라도 640픽셀보다 짧은 사진은 등록할 수 없도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;이외 더 필요한 기능은 뭐가 있을까요? 미리보기 이미지(Thumbnail image)를 만들어야겠네요. 굉장히 자주 표시(호출)될 테니 최종 결과물 사진이 저장될 때마다 미리보기 이미지도 생성해야 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사진은 가로나 세로 길이 모두 640픽셀 이상이어야 한다.&lt;/li&gt;
&lt;li&gt;최종 결과물은 640x640 정사각형으로 표시하며, 이 크기에 맞게 비율 축소/확대하거나 자른다. 이용자가 표현할 영역을 지정할 순 없다.&lt;/li&gt;
&lt;li&gt;최종 결과물 사진을 저장할 때 미리보기 이미지(thumbnail image)를 만들어 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자, 마지막으로 사진을 올릴 때 서버에 접근할 URL(Uniform Resource Locator)을 정하겠습니다. 웹과는 달리 모바일에서는 이용자가 사진을 올릴 URL을 알 필요가 없습니다. 입력하기 편하든 어렵든 상관없지요. 대신 우리는 URL을 보면 이게 어떤 작동을 하고 어떤 클래스나 함수와 관련되는지 바로 알아보기 편한 게 좋을 것 같습니다. 주소 그 자체가 자원이나 행동을 표현하는 거지요. 나중에 주소는 다시 다듬기로 하고 일단은 다음가 같은 주소로 접근해서 사진을 올리도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;protocol://domain/photo/upload/&lt;/p&gt;
&lt;p&gt;간단히 줄여서 /photo/upload/ 입니다. 이 주소는 나중에 /photo/ 로 바꿀 겁니다. 걱정 마세요. Django에서 URL을 바꾸고 그 URL에 관련된 기능을 연결하는 건 아주 쉽고 간단합니다. 이 주소 하나로 사진 올리는 인터페이스와 사진을 실제로 받아서 처리하는 기능 모두 처리할 겁니다.&lt;/p&gt;
&lt;h5&gt;사진 보기&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/08/01-instagram_05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;사진 올리기만큼이나 기본 기능입니다. Pystagram에서 사진을 보는 경로는 크게 두 가지입니다. 하나는 목록으로 여러 사진을 보는 것이고, 다른 하나는 개별 사진을 보는 것입니다. Instagram은 모바일이 기본 영역이고 모바일에서 돌아가는 서비스 내 사진을 인터넷에서 접근하여 보는 것이 보조 기능이어서 개별 사진을 보는 것도 모바일에서 보는 것과 웹에서 보는 것을 구분했습니다. 대신 웹에서 여러 사진을 목록으로 볼 수 없습니다. 그런 페이지를 제공하지 않거든요. 그리고 모바일에서는 개별로 보든 목록 중에 보든 같은 화면인데, 우리도 그렇게 하겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사진은 목록 형식으로 나열하거나 개별 사진만 따로 본다.&lt;/li&gt;
&lt;li&gt;모바일에서는 목록으로 보든 개별로 보든 동일한 화면 디자인을 따른다.&lt;/li&gt;
&lt;li&gt;웹에 개별 사진 단위로 게재(공유)할 수 있으며, 별도 화면 디자인을 따른다.&lt;/li&gt;
&lt;li&gt;웹에서는 개별 사진만 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 사진에 표시할 정보를 살펴봅시다. 그다지 많지 않습니다. 먼저 사진을 올릴 때 발생하는 정보로는 최종 결과물 사진, 올린 사람, 작성일시, 사진에 넣은 본문 정도입니다. 사진에 관련된 사람이 누구인지 태그를 달 수도 있는데, 이 태그 거는 건 손도 많이 가고 번거로우니 사진을 편집하고 올리는 과정에서는 빼겠습니다. 쉽고 편하게, 쉽고 편하게. ^^&lt;/p&gt;
&lt;p&gt;이미 올라간 사진에 이용자가 추가 행동을 하고, 이 내용도 화면에 표시돼야 합니다. 누가 사진에 남겨진 하트(좋아요) 표식을 남겼는지, 댓글은 뭐가 있으며, 관련된 사람으로 태그 걸린 사람은 누구인지, 그리고 이외 행동을 선택하는 버튼도 필요하고요. Instagram은 관련된 위치도 지정할 수 있는데, 이 기능은 일단 빼겠습니다.&lt;/p&gt;
&lt;p&gt;댓글도 단순하게 가겠습니다. 작성자와 댓글 본문, 작성일시. 댓글 작성자는 자신의 댓글에 한하여, 댓글이 달린 사진의 소유자는 사진에 달린 댓글에 한하여 댓글을 지우는 삭제 버튼이 출력돼야 합니다. 그리고 댓글에 답글을 달면 답글을 받은 사람에게 알려주면 좋겠네요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사진을 올릴 때 생성된 정보 : 최종결과물 사진, 작성자, 작성일시, 본문&lt;/li&gt;
&lt;li&gt;사진에 추가되는 정보 : 좋아요 버튼, 좋아요 표시 남긴 사람, 댓글, 태그 걸린 사람
&lt;ul&gt;
&lt;li&gt;댓글 정보 : 작성자, 댓글 본문, 작성일시&lt;/li&gt;
&lt;li&gt;댓글 관련 행동 : 삭제 버튼, 사용자 지정해서 댓글 달기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기본 기획은 이 정도로 하고, 필요한 기능이 있으면 나중에 따로 다루도록 하겠습니다. ^^&lt;/p&gt;
&lt;p&gt;이제 사진 관련 URL을 정하겠습니다. 사진을 목록으로 보는 상황은 따로 기획하기로 하고, 개별 사진을 보고, 그 사진에 댓글을 달거나 좋아요를 누르는 행동을 하는 URL부터 정하지요.&lt;/p&gt;
&lt;p&gt;개별 사진을 보는 건 /photo/&amp;lt; 사진 ID&amp;gt;/로 하겠습니다. 사진 ID 양옆에 있는 꺾쇠는 가변하는 값을 뜻합니다. 사진 ID가 1일 수도 있고 2일 수도 있으니까요. 사진에 좋아요를 누르는 건 어떻게 할까요? /like/&amp;lt; 사진 ID&amp;gt;/ 라고 해도 나쁘지 않지만, /like/ 문자열 뒤에 숫자만 있으면 이게 사진 ID를 뜻하는 것인지 좋아요 행위 자체를 기록한 좋아요 ID인지 잘 구분되지 않습니다. 우리는 특정 사진(/photo/&amp;lt; 사진 ID&amp;gt;/)에 좋아요 표시를(like) 남기는 것이니 /photo/&amp;lt; 사진 ID&amp;gt;/like/ 으로 좋아요 행위를 일으키는 URL을 하도록 하겠습니다. 행위나 자원을 나타내는 문자열이 있고, 그 문자열의 대상이 되는 값(ID)를 적는 구조이지요.&lt;/p&gt;
&lt;p&gt;댓글도 마찬가지 규칙을 따르겠습니다. 댓글은 특정 사진에 다는 것이니까 /photo/&amp;lt; 사진 ID&amp;gt;/comment/ 로 하겠습니다. 특정 댓글을 지우려면 어떤 댓글인지 알아야겠지요? 앞서 정한 규칙에 따라 /photo/&amp;lt; 사진 ID&amp;gt;/comment/&amp;lt; 댓글 ID&amp;gt;/delete/ 로 하겠습니다. /comment/&amp;lt; 댓글 ID&amp;gt;/delete/ 로 해도 별 상관없습니다. 이후 강좌에서 이와 관련된 내용을 다루겠습니다.&lt;/p&gt;
&lt;p&gt;사진에 달린 댓글은 어떻게 가져와야 할까요? /photo/&amp;lt; 사진 ID&amp;gt;/comment/ 이 URL은 특정 댓글을 지칭하는 데 사용하는 주소 규칙입니다. 사진에 달린 댓글은 comment를 복수형으로 취해 /photo/&amp;lt; 사진 ID&amp;gt;/comments/ 로 하겠습니다. s 한 글자 차이라서 구분이 잘 안 간다고요? 일리 있는 지적입니다. 그럼 눈에 확 들어오게 /photo/&amp;lt; 사진 ID&amp;gt;/get&lt;em&gt;comments/ 라고 하겠습니다. 일단은요.&lt;/p&gt;
&lt;p&gt;태그도 좋아요나 댓글과 별다를 바 없습니다. /photo/&amp;lt; 사진 ID&amp;gt;/tag/ 라고 하겠습니다.&lt;/p&gt;
&lt;p&gt;개별 사진과 관련된 URL을 정리해 보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개별 사진 보기 : /photo/&amp;lt; 사진 ID&amp;gt;/&lt;/li&gt;
&lt;li&gt;사진에 좋아요 누르기 : /photo/&amp;lt; 사진 ID&amp;gt;/like/&lt;/li&gt;
&lt;li&gt;사진에 댓글 달기 : /photo/&amp;lt; 사진 ID&amp;gt;/comment/
&lt;ul&gt;
&lt;li&gt;사진에 달린 댓글 가져오기 : /photo/&amp;lt; 사진 ID&amp;gt;/get&lt;/em&gt;comments/&lt;/li&gt;
&lt;li&gt;사진에 달린 댓글 지우기 : /photo/&amp;lt; 사진 ID&amp;gt;/comment/&amp;lt; 댓글 ID&amp;gt;/delete/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사진에 태그 달기 : /photo/&amp;lt; 사진 ID&amp;gt;/tag/&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;여러 사진 보기&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/08/01-instagram_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;사진을 여러 개 나열해서 보는 상황은 어떠한 경우일까요? 우선 이용자가 자신이 올린 사진들을 보는 경우가 있습니다. 내가 구독(following)하는 이용자들이 올린 사진을 보는 경우도 있고, 사람이나 기계가 추려낸 사진들, 가령 인기 사진들도 여러 사진을 보는 경우입니다. 더 다양한 경우가 있겠지만 우리는 이 세 경우만 만들도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;여러 사진을 보는 이 세 페이지는 오직 모바일에서만 이용할 수 있습니다. 그리고 모바일에서는 개별 사진을 따로 보는 화면 디자인이나 목록으로 나열된 개별 사진의 화면 디자인을 굳이 구분할 필요는 없습니다. 개별 사진 영역을 반복 출력하면 되니까요. 결국 출력되는 사진만 다를 뿐, 화면 디자인 요소는 이 세 페이지가 같습니다. 그렇다면 따로 화면 디자인을 할 필요가 없겠군요. 사진 보기 기획할 때 다 했으니까요. ^^&lt;/p&gt;
&lt;p&gt;그럼 각 페이지 별 기획을 하겠습니다. 먼저 내가 구독(following)하고 있는 이용자들이 올린 사진을 보는 페이지부터 볼까요. 페이스북이나 트위터를 이용하신다면 타임라인(timeline)이라는 페이지나 기능에 익숙하실 겁니다. 자신의 글이나 사진을 포함해서 친구, 혹은 나와 관련된 컨텐츠를 시간 역순으로 나열하는 컨텐츠 연대표이죠.&lt;/p&gt;
&lt;p&gt;이용자의 타임라인은 모든 이용자가 이용하는 기능이지만 이용자마다 표시되는 내용이 다른 공간입니다. 누구나 쓰는 공통 기능이며 다른 이용자가 내 타인라인을 볼 수 없으므로 굳이 타임라인 페이지를 URL로 구분할 필요는 없습니다. 그래서 /timeline/이라는 URL을 쓰겠습니다. 타임라인에는 어떤 정보를 표시하면 좋을까요? 자신이 올린 사진, 구독하는(following) 이용자의 사진, 나를 태그한 사진, 나를 언급한 댓글이 있는 사진을 가져와서 출력하면 얼추 그럴싸한 타임라인이 될 것 같습니다. 자세한 건 이 기능을 구현할 때 다루겠습니다.&lt;/p&gt;
&lt;p&gt;이번엔 선정된 사진을 보는 곳. 뭘 기준으로 선정할까요? 무난하게 정해진 시간 동안 인기를 끈 사진을 가져오는 인기 사진을 가져오도록 하겠습니다. 주소는 모든 이용자가 동일한 내용을 보는 공동 구역이니 그에 어울리는 URL로 정해야겠네요. /popular/로 하겠습니다.&lt;/p&gt;
&lt;p&gt;마지막으로 이용자가 자신이 올린 사진들을 보는 건 이용자 프로필 페이지에서 다루겠습니다. URL만 먼저 정하자면, /user/&amp;lt; 이용자 ID&amp;gt;/ 로 하겠습니다.&lt;/p&gt;
&lt;p&gt;그럼 여러 사진을 보는 페이지와 관련된 URL을 정리해 보지요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인기 사진 : /popular/&lt;/li&gt;
&lt;li&gt;이용자 개별 타임라인 : /timeline/&lt;/li&gt;
&lt;li&gt;특정 이용자가 올린 사진 : /user/&amp;lt; 이용자 ID&amp;gt;/&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;사진 삭제&lt;/h5&gt;
&lt;p&gt;사진 삭제는 간단합니다. 자신의 사진에 한해서 삭제하며, 개별 사진 영역에서 사진 삭제 버튼을 눌러서 지우면 됩니다. 지울 때 정말 지울 건지 한 번 더 물어보면 좋겠고요.&lt;/p&gt;
&lt;p&gt;사진을 지우는 URL은 사진에 좋아요 표시를 남기거나 댓글을 남기는 규칙을 따르면 됩니다.&lt;/p&gt;
&lt;p&gt;/photo/&amp;lt; 사진 ID&amp;gt;/delete/&lt;/p&gt;
&lt;p&gt;사진을 지우면 사진 파일도 지우고, 사진에 달린 활동들도 지우도록 하겠습니다.&lt;/p&gt;
&lt;h4&gt;(2) 이용자&lt;/h4&gt;
&lt;p&gt;이용자 관련 기능은 그다지 많진 않습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;회원 가입과 탈퇴&lt;/li&gt;
&lt;li&gt;로그인, 로그아웃&lt;/li&gt;
&lt;li&gt;비밀번호 찾기&lt;/li&gt;
&lt;li&gt;프로필 보기&lt;/li&gt;
&lt;li&gt;구독하기 (팔로잉(following) 기능)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;회원 가입&lt;/h5&gt;
&lt;p&gt;Instagram엔 직접 가입하는 방법과 페이스북으로 연결하여 가입하는 방법으로 회원 가입합니다. Pystagram은 ID와 비밀번호를 입력하여 직접 가입하는 방법을 기본으로 하겠습니다. 페이스북으로 연결하여 가입하는 기능은 직접 구현하진 않고 원리나 방식만 설명할 예정입니다.&lt;/p&gt;
&lt;p&gt;회원 가입에 필요한 정보는 간단하게 받습니다. 사용할 ID, 비밀번호, 그리고 전자우편 주소. 그외 정보는 가입한 후에 언제든지 입력하도록 합니다. 다만 봇(bot)으로 계정을 막 생성하려는 나쁜 사람도 있으니 &lt;a href=&quot;http://ko.wikipedia.org/wiki/CAPTCHA&quot;&gt;캡챠(Captcha)&lt;/a&gt; 기능을 구현할 필요는 있어 보입니다. 이용자가 회원 가입에 필요한 정보를 제출하면 전자우편 주소가 실제로 존재하는지 확인도 해보겠습니다. 가입 확인 전자우편을 보내는 거죠. 전자우편 주소 확인을 받지 않은 이용자는 로그인만 할 수 있고 나머지 기능은 사용할 수 없도록 권한을 제한합니다.&lt;/p&gt;
&lt;p&gt;회원 가입 URL은 /accounts/registration/ 을 쓰도록 하겠습니다. 좀 긴데, 의미 전달성이 좋고 이용자가 저 URL을 인지할 일이 없는 데다 Django에서 따로 설정 안 하면 쓰게 되는 기본 주소라서 이 주소로 선택했습니다. ^^&lt;/p&gt;
&lt;h5&gt;로그인, 로그아웃&lt;/h5&gt;
&lt;p&gt;특별한 건 없습니다. 이용자가 입력한 아이디와 비밀번호로 로그인을 하고, 로그인한 이용자에 한하여 로그아웃을 합니다.&lt;/p&gt;
&lt;p&gt;URL은 무난하게 /accounts/login/ 과 /accounts/logout/ 을 쓰도록 하겠습니다. 회원 가입 URL과 관련지은 주소이지요.&lt;/p&gt;
&lt;h5&gt;비밀번호 찾기&lt;/h5&gt;
&lt;p&gt;이 기능은 여러분이 직접 구현하셔야 합니다. :) 전자우편 주소 확인하는 기능을 활용하면 아주 간단하게 구현하실 수 있습니다.&lt;/p&gt;
&lt;h5&gt;프로필 보기&lt;/h5&gt;
&lt;p&gt;프로필 페이지는 각 이용자의 간단한 소개와 그 이용자가 올린 사진을 나열해 보여주는 곳입니다. 특정 이용자가 올린 사진, 또는 자신이 올린 사진만 보는 곳이기도 하지요. 주소는 앞서 정한 /user/&amp;lt; 이용자 ID&amp;gt;/ 입니다.&lt;/p&gt;
&lt;p&gt;프로필 페이지에서 간단한 소개 영역에 표시할 정보는 많지 않습니다. 이용자가 입력한 정보, 그리고 이용자가 서비스를 이용하며 발생시킨 정보 정도네요.&lt;/p&gt;
&lt;p&gt;이용자가 입력한 정보 중 겉으로 드러낼 만한 정보는 이용자 ID와 이용자 프로필 사진 정도입니다.&lt;/p&gt;
&lt;p&gt;이용자가 서비스를 이용하여 발생한 정보는 이용자가 구독하는(following) 이용자들, 이용자를 구독하는 이용자들(followers), 그리고 이용자가 올린 사진이 있습니다. 이용자가 구독하는 팔로잉 페이지는 /user/&amp;lt; 이용자 ID&amp;gt;/following/, 이용자를 구독하는 팔로워 페이지는 /user/&amp;lt; 이용자 ID&amp;gt;/followers/ 로 URL을 정하겠습니다. 이용자가 올린 사진은 이용자 프로필 페이지에 바로 나열하면 되고요. 하지만 웹에서는 사진을 나열해 표시하지 않기로 했으니 이용자가 올린 사진 중 하나를 무작위로 선택해서 표시하도록 하겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;간단한 소개 정보
&lt;ul&gt;
&lt;li&gt;이용자 프로필 사진&lt;/li&gt;
&lt;li&gt;이용자 ID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이용자가 사진
&lt;ul&gt;
&lt;li&gt;시간 역순으로 나열. 무한 스크롤 방식.&lt;/li&gt;
&lt;li&gt;웹에서는 이용자가 올린 사진 중 하나를 무작위로 선택해서 표시.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;팔로잉
&lt;ul&gt;
&lt;li&gt;팔로잉 수&lt;/li&gt;
&lt;li&gt;URL : /user/&amp;lt; 이용자 ID&amp;gt;/following/&lt;/li&gt;
&lt;li&gt;누르면 하위 페이지(팔로잉 페이지)로 이동&lt;/li&gt;
&lt;li&gt;각 이용자의 프로필 사진과 해당 이용자의 프로필 페이지 이동 UI(링크)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;팔로워
&lt;ul&gt;
&lt;li&gt;팔로워 수&lt;/li&gt;
&lt;li&gt;URL : /user/&amp;lt; 이용자 ID&amp;gt;/followers/&lt;/li&gt;
&lt;li&gt;이외 내용은 팔로잉과 동일&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;구독하기 (following)&lt;/h5&gt;
&lt;p&gt;구독 기능은 구독 대상 이용자가 올리는 사진을 자신의 타임라인에서 편하게 보도록 합니다. 쌍방이 관계를 맺어야 하는 친구 관계와는 달리 구독자가 구독 대상을 구독하면 그만입니다. URL은 /user/&amp;lt; 이용자 ID&amp;gt;/follow/ 로 하겠습니다. 구독과 구독 해제를 작동시키는 URL을 나눌 필요는 없습니다. 구독하고 있지 않은 상태에서 구독 기능을 호출하면 구독 상태로 바꾸고, 구독 중인 상태에서 또 호출하면 구독 상태를 해제하면 되니까요.&lt;/p&gt;
&lt;h4&gt;(3) 기능 총 정리&lt;/h4&gt;
&lt;p&gt;지금까지 기획한 기능을 총 정리해보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사진
&lt;ul&gt;
&lt;li&gt;사진 올리기
&lt;ul&gt;
&lt;li&gt;필터 적용&lt;/li&gt;
&lt;li&gt;미리보기 이미지(thumbnail image)&lt;/li&gt;
&lt;li&gt;사진 자르기, 크기 조절&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사진 보기
&lt;ul&gt;
&lt;li&gt;좋아요 표시 남기기&lt;/li&gt;
&lt;li&gt;댓글 남기기, 지우기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사진 삭제&lt;/li&gt;
&lt;li&gt;사람 태그 달기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이용자/회원
&lt;ul&gt;
&lt;li&gt;회원 가입과 탈퇴&lt;/li&gt;
&lt;li&gt;로그인, 로그아웃&lt;/li&gt;
&lt;li&gt;비밀번호 찾기&lt;/li&gt;
&lt;li&gt;프로필 보기
&lt;ul&gt;
&lt;li&gt;간단한 소개&lt;/li&gt;
&lt;li&gt;팔로잉, 팔로워&lt;/li&gt;
&lt;li&gt;이용자가 올린 사진&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;구독하기 (팔로잉(following) 기능)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사진 모아보기
&lt;ul&gt;
&lt;li&gt;타임라인 : 친구 사진들 보기&lt;/li&gt;
&lt;li&gt;인기 사진들 보기&lt;/li&gt;
&lt;li&gt;특정 이용자의 사진 보기 =&amp;gt; 프로필 보기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;큼직하게 묶어서 정리했는데 생각보다 많네요. 하지만 Django가 제공하는 기능을 쓰면 무척 쉽게 구현할 수 있습니다.&lt;/p&gt;
&lt;h4&gt;이외&lt;/h4&gt;
&lt;p&gt;이외에 필요한 페이지나 기능이 많이 남았습니다. 몇 가지만 이곳에 정리하고, 나머지는 각 기능을 구현하면서 그때 그때 만들겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로그아웃 상태에서 접속한 첫 화면&lt;/li&gt;
&lt;li&gt;로그인 실패&lt;/li&gt;
&lt;li&gt;없는 페이지에 접속했을 때 안내하는 페이지 (일명 404 페이지)&lt;/li&gt;
&lt;li&gt;허용하지 않는 페이지에 접속한 경우 처리
&lt;ul&gt;
&lt;li&gt;기획 정책 상 허용하지 않는 경우&lt;/li&gt;
&lt;li&gt;접근 권한이 없는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;오류가 발생했을 때 안내하는 페이지&lt;/li&gt;
&lt;li&gt;관리자 영역&lt;/li&gt;
&lt;li&gt;존재하는 ID나 전자우편 주소인지 검사&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. 페이지 구성&lt;/h3&gt;
&lt;p&gt;정리한 기능으로 페이지(scene)를 정리해 보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.hannal.com/assets/uploads/2014/08/01-Scene_flow.png&quot;&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/08/01-Scene_flow-400x274.png&quot; alt=&quot;페이지 흐름 및 연결도&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&amp;lt; 위 이미지는 클릭하면 크게 볼 수 있습니다. &amp;gt;&lt;/p&gt;
&lt;p&gt;둥근 모서리 사각형은 개별 페이지를 뜻합니다. 이 중에서 파란 바탕색이 적용된 사각형은 상위 페이지입니다. Instagram 모바일 앱으로 예를 들면, 앱 최하단에 있는 버튼들이 이 상위 페이지에 연결된 것인데, 페이지 안내(navigation) UI 등으로 접근하는 페이지이지요. 흰 바탕인 사각형은 이러한 상위 페이지에 속해있는 하위 페이지입니다.&lt;/p&gt;
&lt;p&gt;직각 모서리 사각형은 기능을 뜻합니다. 기능 중에는 페이지로 연결되기도 하는데, 편의상 기능으로만 표시했습니다. 기능 중 왼쪽에 있는 것은 자신의 영역에서 실행하는 기능이며, 오른쪽은 다른 이용자의 영역에서 혹은 다른 이용자가 내 영역에서 실행하는 기능입니다.&lt;/p&gt;
&lt;p&gt;펼쳐 놓으니 뭔가 많아 보이지만, 실제로는 페이지 이동이나 기능 사용이 대부분 한두 단계 안에서 이뤄집니다. 이런 간단명료한 흐름이 Instagram의 매력이고, Pystagram도 그런 매력을 따릅니다. 고민 많이 했을 Instagram 개발자의 노고에 박수를 보내 봅니다.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;이것으로 강좌 첫 회를 마칩니다. 2회에선 Django도 설치하고, 개발 환경을 꾸려볼 겁니다. 내용이 그다지 많진 않을 겁니다. 그럼 강좌 2회에서 뵙겠습니다.&lt;/p&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Aug 2014 00:01:47 +0900</pubDate>
        <link>http://blog.hannal.com//2014/8/start_with_django_webframework_01</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/8/start_with_django_webframework_01</guid>
        
        <category>django</category>
        
        <category>python</category>
        
        <category>기획</category>
        
        <category>instagram</category>
        
        <category>virtualenv</category>
        
        <category>pip</category>
        
        
        <category>start_with_django_webframework</category>
        
      </item>
    
      <item>
        <title>날로 먹는 Django 웹프레임워크 강좌, 여는 글</title>
        <description>&lt;h3&gt;hello world&lt;/h3&gt;

&lt;p&gt;2008년 6월 1일부터 8월 10일까지 저는 Python과 Django로 웹 게시판을 만드는 강좌인 “&lt;a href=&quot;http://blog.hannal.com/01-python_django_lecture/&quot;&gt;날로 먹는 Django 웹 프로그래밍&lt;/a&gt;”을 연재했습니다. 6년이 훌쩍 지났지만 여전히 저 강좌를 보러 제 블로그에 오시는 분이 참 많습니다. 구글에서 Django 강좌를 검색하면 제 강좌가 맨 위에 나오기도 하고 국내 포털 서비스에서도 Django 강좌는 제 블로그가 나오거나 제 강좌를 그대로 담아간 곳이 나오기도 하니, Django 한국어 강좌 중에선 꽤 유명한가 봅니다.&lt;/p&gt;

&lt;p&gt;부담을 안 느낀 건 아닙니다. Django 최신 버전에서는 다소 문제가 있기도 하고, 윈도우즈처럼 제가 사용하지 않는 환경에 대해 질문하신 분을 도와드리지도 못 했거든요. 적당한 시기에 잊혀지면 마음이 편할텐데, 여전히 두루 읽히며 여러 입문자가 고생하고 있을 모습이 눈에 선하니 미안한 마음이 들곤 했습니다.&lt;/p&gt;

&lt;p&gt;그래서 6년 만에 후속 강좌를 연재하려 합니다. 이름은 “날로 먹는 Django &lt;strong&gt;웹 프레임워크&lt;/strong&gt;”입니다. 지난 강좌는 Django 웹 프레임워크로 웹 프로그래밍을 입문하려는 사람을 대상으로 했다면, 이번 강좌는 Django 자체를 좀 더 들여다보고 활용해보는 내용을 담을 예정입니다. 그래서 이번 후속 강좌에선 웹 프로그래밍을 조금이라도 해봤거나 Django, Rails 같은 웹 프레임워크로 hello world라도 출력해본 분을 대상으로 합니다.&lt;/p&gt;

&lt;h3&gt;연재 계획&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;8월 18일&lt;/strong&gt;에 연재를 시작하며 내용에 따라서 10~14일에 한 회씩 게재하도록 최선을 다할 겁니다. 지난 강좌는 일주일에 한 회씩 연재했는데 정말 힘들더군요.&lt;/p&gt;

&lt;p&gt;연재는 제 블로그에 하며 소스 코드는 GitHub에서 관리합니다. 강좌 본문도 GitHub에서 관리하는데, 원문을 사본으로 담는 역할이며 피드백을 주고 받거나 서식이 적용된 원본은 제 블로그에 게재됩니다. (그래서 강좌 본문을 통채로 복사해서 올리시지 않는 게 낫습니다)&lt;/p&gt;

&lt;p&gt;제 개발 환경인 Mac OS X를 기반으로 하기 때문에 윈도우즈나 리눅스 등 다른 OS를 쓰시는 분은 좀 더 수고하셔야 할 지도 모릅니다. 다행히 인터넷에는 각 환경 별로 자신의 지식과 경험을 공유한 고마운 사람이 무척 많습니다.&lt;/p&gt;

&lt;p&gt;각 연재분에는 마지막 수정일시가 표시됩니다. 여러분이 피드백을 &lt;strong&gt;제 블로그에 게재된 강좌에 남겨 주시면&lt;/strong&gt; 참조하여 반영하도록 할 것이며, 그때마다 수정일시도 변경됩니다.&lt;/p&gt;

&lt;p&gt;이번 강좌에서는 instagram 같은 웹 서비스를 만들 겁니다. 웹 게시판이나 블로그를 만드는 자료는 워낙 많아서 다른 걸 만들고 싶었는데, 웹 게시판이나 블로그처럼 다양한 구현을 경험할 수 있고 실용성도 있을 것 같아 선택했습니다.&lt;/p&gt;

&lt;h3&gt;왜 Django 웹 프레임워크 강좌인가?&lt;/h3&gt;

&lt;p&gt;이번 강좌 연재를 위해 사전 조사를 하던 중에 Django는 이미 덩치가 커서 초보자나 입문자가 강좌로 익히기엔 부담스럽지 않겠냐는 의견을 받았습니다. &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt;는 아주 가볍고 작은 웹 프레임워크이어서 웹 프레임워크를 사용하여 웹 프로그래밍을 하는 학습 목표에 집중하기에 좋지 않겠냐는 것이지요.&lt;/p&gt;

&lt;p&gt;제가 Django를 처음 접했던 0.96 버전에도 많은 기능이 있었는데, 최근 정식 버전인 1.6엔 더 많은 기능이 포함되어 있습니다. 강좌를 준비하며 목표 대상을 먼저 만들어 봤는데, Django가 프로젝트를 잘 만들 수 있도록 저는 교통 정리만 하는 기분이 들 정도로 많은 기능이 있습니다. 이래서는 프로그래밍을 제대로 학습하지 못 할 것 같고 오류와 같은 문제가 생기면 자칫 미로에 빠져 길을 잃을 것 같아서 Django를 &lt;strong&gt;도구&lt;/strong&gt;로 쓸 지 고민하기도 했습니다.&lt;/p&gt;

&lt;p&gt;결국 Django를 선택했습니다. 이유는 오랜 시간 많은 사람에게 사랑 받으며 사용되고 있고, 그래서 수많은 질문과 답변, 코드 조각과 유용한 구현체(library 등)가 존재하기 때문입니다. 제 강좌에서 부족한 부분은 인터넷에서 얼마든지 채우실 수 있습니다. 윈도우즈에서 MySQL를 설치했는데 안 된다고요? 윈도우즈에 MySQL을 설치해본 지 6년도 훌쩍 넘은 제게 질문을 하는 것 보다는 인터넷에서 오류 문구 등으로 답변을 찾는 게 훨씬 빠르고 유용할 것입니다.&lt;/p&gt;

&lt;p&gt;마찬가지 이유로 JavaScript 라이브러리는 jQuery를 사용할 것이며, 다른 도구도 같은 기준으로 선택할 것입니다.&lt;/p&gt;

&lt;h3&gt;다룰 내용과 다루지 않을 내용&lt;/h3&gt;

&lt;p&gt;저는 이번 강좌에서 &lt;a href=&quot;https://docs.djangoproject.com/&quot;&gt;Djang 공식 문서&lt;/a&gt;에서 다루는 내용 전반을 두루 활용하여 서비스를 만들 겁니다. 또 우리가 만든 기능을 다른 오픈 소스 라이브러리로 바꿔보기도 할 겁니다. 하지만 최대한 Django가 제공하는 기능을 활용하는 것이 목표입니다.&lt;/p&gt;

&lt;p&gt;하지만 Django 웹 프레임워크 범위를 넘는 내용은 다루지 않을 예정입니다. Apache나 NGINX에 우리가 만든 Django 프로젝트를 올리는 내용은 다루지만, Apache나 NGINX 설정이나 최적화 방법 등은 다루지 않습니다. 코딩 작업에 필요한 도구를 소개하지만 그 도구를 사용하는 방법은 다루지 않습니다. Django로 작동하는 기능을 구현하는 데 집중하지만 좋은 Python 코드나 최적화 된 알고리즘을 다루진 않습니다.&lt;/p&gt;

&lt;h3&gt;저작권 및 재배포 금지&lt;/h3&gt;

&lt;p&gt;“날로 먹는 Django 웹 프레임워크” 강좌는 제 저작물이며, 제가 직접 게재하는 곳을 제외한 그 어떠한 곳도 무단으로 배포해서는 안 됩니다. 무단배포를 막는 이유는, 제가 강좌 내용을 수정하더라도 무단으로 내용을 담아가 외부에 게재된 자료엔 반영할 수 없어서 자칫 틀리거나 문제가 있는 내용이 방치될 수 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;저는 블로그를 운영하는 10년 동안 각 글의 고유주소(permalink)를 유지하려고 많이 신경써 왔습니다. 일부 첨부 파일이 누락되는 경우는 있지만, 글 본문 자체는 10년 넘게 동일한 주소로 접근할 수 있으며, 글 주소가 바뀌어도 예전 주소로 접근할 수 있습니다. 더구나 이번 강좌는 사본을 GitHub에도 남겨 놓을 겁니다. 그러니 제 블로그에 게재된 연재 글의 주소를 연결(link)하기만 해주시길 바랍니다. 여러분께서 제 강좌를 악용할 목적을 갖고 있지 않는 한, 외부 공간에 무단 배포할 이유는 전혀 없습니다. 오히려 제가 직접 게재하고 관리하는 곳에 방문하여 강좌를 보는 것이 이득입니다. :)&lt;/p&gt;

&lt;h3&gt;예고를 마치며&lt;/h3&gt;

&lt;p&gt;이렇게 예고 했으니 이제 정말 연재를 시작할 수 밖에 없게 됐네요. 어느 정도 길이가 될 지 모르겠지만 열심히 연재해 보겠습니다. :)&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Aug 2014 18:20:24 +0900</pubDate>
        <link>http://blog.hannal.com//2014/8/start_with_django_webframework_00</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/8/start_with_django_webframework_00</guid>
        
        <category>django</category>
        
        <category>python</category>
        
        <category>강좌</category>
        
        <category>웹프레임워크</category>
        
        
        <category>start_with_django_webframework</category>
        
      </item>
    
      <item>
        <title>서평 : 쫄지말고 창업</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://blog.hannal.com/assets/uploads/2014/07/book-cover_isbn-978-89-97453-26-9.jpg&quot;&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/07/book-cover_isbn-978-89-97453-26-9-317x400.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;글을 열며&lt;/h3&gt;

&lt;p&gt;한동안 정신이 나가있어서 한 달에 한두 권 정도 드문드문 책을 읽다가 슬슬 몸과 마음이 회복세에 들기 시작했다. 크게 앓은 이는 일단 죽으로 위장을 달래며 회복한다고, 복잡하거나 어려운 책, 양념 많이 뭍은 책은 손길부터 가지 않았다. 그래서 담백하면서도 명확한 책부터 읽는데 마침 이희우 대표님이 쓰신 책이 나와서 바로 샀다. 이 책은 지난 2013년 2월부터 2014년 2월까지 약 1년 동안 &lt;a href=&quot;http://platum.kr/archives/author/mlee/&quot;&gt;플래텀&lt;/a&gt;에 연재된 글을 덧대고 다듬어 묶은 책인데, 담백하면서도 시원스러운 글맛을 익히 알고 있어서 글맛 편식 중에도 고민없이 고른 것이다.&lt;/p&gt;

&lt;h3&gt;서평...?&lt;/h3&gt;

&lt;p&gt;내가 처음 종합격투기를 접한 건 2000년 초반이었다. 인터넷에서 어렵게 찾아 본 경기 영상 중엔 초창기 영상이 많았는데, 그때에 비해 고도로 기술이 발전한 최근 종합격투기에 비교하면 참 소박하다고 생각될만큼 어설프고 미숙해 보인다. 요즘이야 선수는 자신의 주 기술 기반이 있어도 그라운드 기술과 입식타격 기술 모두 훌륭하게 균형을 맞춘 선수가 많지만, 그때만 해도 마치 대전 격투 게임처럼 주력 기술과 무술만을 놓고 겨루는 것 같았다. 그래서 장르 불문하고 닥치는대로 우걱우걱 승리를 잡아먹던 그레이시 유술을 썩 좋아하지 않기도 해서 사쿠라바 카즈시 선수가 호이스 그레이시를 이긴 경기를 보며 환호하기도 했다. 어쨌든 그 당시 경기는 내게 낭만으로 남아있다.&lt;/p&gt;

&lt;p&gt;이희우 대표님은 &lt;a href=&quot;http://www.youtube.com/user/dareinvest&quot;&gt;쫄지말고 투자하라&lt;/a&gt; 팟캐스트에서 목소리로 처음 뵈었다. 대체 이 웃음소리는 누가 내는 것이지? 싶어서 방송 초반에 자기소개하며 인사를 할 때 이름을 들으려 애썼는데 좀처럼 알아듣기 힘들었던 이름. 이희웅? 이희욱? 이희우? 2002년 4월 24일 쫄투 현장에서 처음 인사를 나누고 나서야 비로소 상상 속 사람을 현실감 있게 느끼게 되었다. 그걸 인연으로 몇 차례 그와 이야기 나누거나 그의 이야기를 들었는데, 초반에 내게 새겨진 그의 인상은 낭만파였다. 남들이 &lt;strong&gt;종합&lt;/strong&gt;격투기로 거듭나고 있을 때에도 입식타격가의 낭만을 좇아 호탕하게 웃으며 실전을 누비는, 낭만을 좇는 투자가. 나는 회사 대표로, 그는 벤처캐피탈 대표로 투자 협상을 할 땐 그 인상이 (좋은 의미로)조금 깨지긴 했지만, 사석에서 만나는 그는 여전히 쫄지 않고 여러 가지 일에 도전하고 마침내 끝맺는 여전한 낭만파였다.&lt;/p&gt;

&lt;p&gt;책 이름은 “쫄지말고 창업”. 단순히 이 분의 대표 구호인 쫄지마를 브랜드로 활용한 것 같지만, 내용을 보면 이 제목이 가장 완벽하게 책을 나타낸다는 생각을 절로 하게 된다. 쫄지 않는 그의 기질 혹은 삶을 담아냈기 때문이다. 책 곳곳에도 그의 낭만스러운 면이 드러난다.&lt;/p&gt;

&lt;p&gt;그래서 읽는 중에 함정에 빠진 기분이 들기도 했다. 그는 “이런(?) 나도 창업했는데...”라는 생각을 분명히, 아니, 아마도 담아내려 한 것 같은데, 그런 쫄지 않는 그의 강단은 솔직히 말해서 그의 만렙 스킬이 아닌가 싶다. 적어도 내 성격에는 그의 그런 성향은 마치 하루에 8시간씩 충분히 자면서 공부했더니 서울대에 합격했어요, 라는 말처럼 전해진다. 공감대 형성 실패! 난 창업보다 창업 안 하는 게 더 쫄려서 창업한 것이고, 사업 하는 내내 쫄렸는데... 어쩐지 반칙처럼 느껴진다.&lt;/p&gt;

&lt;p&gt;게다가 그는 창업 과정도 내 입장에선 너무 평탄하고 수월해보였다. 적기에 여러 사람에게서 도움도 받고 팀을 만들고, 엔젤 투자까지 받았다는 그의 창업기를 익히 알고 있었기에 목차를 보자마자 후회감이 들기 시작했다. &#39;아... 실수했구나. 운기조식하며 회복 중인 내가 읽기엔 글맛은 좋을 지 모르나 도무지 공감하며 읽을 수 없겠는 걸...&#39; 그런 마음으로 2장 1절을 연 나는 그대로 끝까지 단숨에 책을 다 읽었다.&lt;/p&gt;

&lt;p&gt;이 책을 요약해서 소개를 해야 한다면 난 딱 두 절을 꼽는다. 2장 1절 - 왜 창업을 하는가?, 그리고 에필로그. 2장 1절은 창업가로서 가져야 할 “왜”에 대한 이야기라면, 에필로그는 이희우라는 사람이 창업가로서 갖고 있는 “왜”를 담고 있기 때문이다. 왜 창업을 하는가? 세상을 바꾸기 위해서? 큰 돈을 벌려고?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;열정을 다해 열심히 일해라. 단, 가장 소중한 재산인 시간을 가장 의미 있는 일에 써라. - 승려와 수수께끼, 258쪽 중에서.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;나에게 가장 소중한 재산인 시간을 가장 의미있는 일에 쓴다는 것은 내 일생을 걸고 일한다는 것을 뜻한다. 그것은 거대한 부도 명성도 아니다. 그 어느 때보다 진솔한 마음으로 나에게 삶에 대한 왜(why)를 묻고 구한 답이다. 그것이 내게 가장 의미있는 일이고, 가장 소중한 재산을 들일 가치가 있는 일이다. 그리고 그런 일에 대한 보상은 그 일을 하는 여정 그 자체이다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;여정 자체가 보상이지 그 외엔 아무것도 아닙니다. 그 목적지에 도착하려고 하는 것, 그게 바로 목적이죠. 그러니 우리에겐 낭비할 시간이 없습니다. - 쫄지말고 창업에 갈무리 된 승려와 수수께기 내용 중에서.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;만약 한 치 거짓 없이 진실된 마음으로 “왜”를 구했다면, 설령 성격이나 강단이 잘 쫄아드는 사람일지라도, 그의 말대로 쫄지말고 창업해도 될 것이다. 그 힘은 그 어떤 도움보다도 깊고 강해서 창업과 사업이라는 힘든 여정을 보상으로 만들어 줄테니 말이다.&lt;/p&gt;

&lt;p&gt;그리고 그는 그 여정을 만끽하고 있다는 걸 느꼈고, 그와 공감을 이루며 즐거이 책을 읽었다.&lt;/p&gt;

&lt;h3&gt;글을 닫으며...&lt;/h3&gt;

&lt;p&gt;분명 쫄지말고 창업하라는 책인데 읽고나면 이희우라는 사람을 소개 받은 기분이 든다. 그리고 다 읽고 나면 그가 낭만만으로 움직이는 게 아닌 현실감을 잃지 않고 실행하는 실행가라는 것도 깨닫게 된다. 마음을 움직이는 건 낭만이지만 머리를 움직이는 건 현실감이라고 할까.&lt;/p&gt;

&lt;p&gt;서평을 쓰려 했는데 감히 인평을 써버린 것 같다. 어쩔 수 없다. 이 책은 그런 책이다. 창업에 매력을 느끼는 것 보다 이희우표 쫄지 않는 낭만과 현실감에 매력을 더 느낀다면 아마도 기분 탓만은 아닐 것이다.&lt;/p&gt;

&lt;p&gt;덧쓰기 :&lt;br /&gt;
아참, 이희우 대표님. 연암 박지원의 월하일기를 즐겁게 읽으셨다 하시니, 정민 선생님이 쓰신 “비슷한 것은 가짜다” 책을 추천드려 봅니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Jul 2014 06:18:39 +0900</pubDate>
        <link>http://blog.hannal.com//2014/7/review-just_start_dont_be_chicken</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/7/review-just_start_dont_be_chicken</guid>
        
        <category>서평</category>
        
        <category>이희우</category>
        
        <category>쫄지말고창업</category>
        
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>클래시 오브 클랜즈 업데이트와 대중 마케팅</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://blog.hannal.com/assets/uploads/2014/07/coc_kayos_town-20140715.png&quot;&gt;&lt;img src=&quot;http://blog.hannal.com/assets/uploads/2014/07/coc_kayos_town-20140715-400x300.png&quot; alt=&quot;2014년 7월 15일자 내 coc 타운&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;최근에 수퍼셀이 한국에 집행한 클래시 오브 클랜즈(clash of clans, 이하 coc) 광고 물량전을 보며, 그동안 coc 업데이트에 대한 생각을 짧막하게 정리해본다.&lt;/p&gt;

&lt;h3&gt;coc 주요 업데이트 내역&lt;/h3&gt;

&lt;p&gt;coc는 작년 5월에 후반 컨텐츠 범위를 크게 확장한 이래 7월부터 후반 컨텐츠 위주로 업데이트 되어 왔다. 주요 업데이트를 간추리면 이렇다. (출처 : &lt;a href=&quot;http://clashofclans.wikia.com/wiki/Version_History&quot;&gt;Clash of Clans Wiki에서 업데이트 내역&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2013년 5월 : version 4.14
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;타운홀 최대 레벨, 10단계로 확장&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;inferno tower 등장&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/li&gt;
&lt;li&gt;2013년 7월 : version 4.74
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;witch&lt;/strong&gt; 등장&lt;/li&gt;
&lt;li&gt;wall breaker 최대 레벨, 6단계로 확장.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2013년 8월 : version 4.120
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;wizard 최대 레벨, 6단계로 확장&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;freeze spell 최대 레벨, 4단계로 확장.&lt;/li&gt;
&lt;li&gt;약탈 자원양 증가&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hog rider, 공격 우선순위 조정&lt;/strong&gt; (방어시설 우선 공격)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2013년 12월 : version 5.113.2
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;inferno tower 강화&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;최대 레벨, 3단계로 확장.&lt;/li&gt;
&lt;li&gt;inferno tower에 다중 병력(최대 다섯 기) 공격 기능 추가. &lt;/li&gt;
&lt;li&gt;inferno tower에 공격 당한 병력은 치료 불가되는 기능 추가.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2014년 1월 : version 5.172
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;영웅(babarian king, archer queen)&lt;/strong&gt;에 스킬 추가.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2014년 4월 : version 6.56.1
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;clan wars(클랜전)&lt;/strong&gt; 시스템 추가&lt;/li&gt;
&lt;li&gt;clan castle 최대 레벨, 6단계로 확장.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2014년 7월 : version 6.186.1
&lt;ul&gt;
&lt;li&gt;Hidden tesla 최대 레벨, 8단계로 확장.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;전투 밸런스 및 운용법 대규모 조정&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;후반 위주 컨텐츠 추가&lt;/h3&gt;
&lt;p&gt;보다시피 후반 컨텐츠 위주로 업데이트 되었는데, 내가 따로 걸러내서 그런 게 아니라 실제로 지난 1년 동안 추가된 컨텐츠가 후반 컨텐츠이다. 그냥 후반도 아니고 최후반이다. version 4.120에서 hog rider를 손봐서 일명 돼지떼 전술이 등장한 거 정도가 예외이다. 왜냐하면 이 전술은 10레벨 타운홀(일명 10홀) 이용자에겐 잘 안 통하지만, 9홀 이하 이용자에겐 악몽같은 전술이라서 중후반에서 후반 구간대 밸런스를 크게 흔들었기 때문이다. 하지만 이 전술이 10홀 이용자에게 안 통하게 된 것도 5.113.2 업데이트에서 inferno tower가 강화되면서 안 통한 것이며, 이 업데이트가 있기 전에는 10홀 이용자도 돼지떼에 속수무책으로 당했던, 사실상 중반부터 극후반까지 고루 아우르는 컨텐츠였다.&lt;/p&gt;
&lt;p&gt;coc가 초반, 중반, 후반이 아니라 극후반 컨텐츠를 주로 업데이트하는 이유는 간단하다. 밸런스가 잘 맞기 때문이다. 굳이 새로운 컨텐츠를 투입하여 밸런스를 흔들 필요가 없다. 자잘한 밸런스 조정은 늘 있었지만, 컨텐츠를 추가하여 판을 흔드는 업데이트는 없었다.&lt;/p&gt;
&lt;p&gt;하지만 후반과 극후반은 상황이 달랐다. 먼저 후반이라고 할 수 있는 9홀부터 보면, 많은 이용자가 9홀에서 이탈한다. 8홀까지는 자원 약탈(일명 파밍(farming)) 효율이 아주 좋아서 즐겁게 성장할 수 있다. 그런데 9홀부터는 방어 시설도 늘고, 업그레이드 해야 하는 단계도 추가되며, 자원 약탈 효율이 떨어진다. 1시간 동안 파밍에 집중한다고 했을 때, 8홀 때는 40~100만 골드를 획득할 수 있지만 9홀은 체감 상 8홀의 반 정도 수준이다. 자연스레 9홀에 오래도록 머물러서 업그레이드를 하게 되는데, 정말 무지무지 지겹다.&lt;/p&gt;
&lt;h3&gt;즐길 컨텐츠가 없는 후반 이용자&lt;/h3&gt;
&lt;p&gt;9홀 이용자가 이탈하는 현상은 10홀 이용자에게 무척 안 좋다. 10홀 중에서도 극후반에 도달한 이용자는 방어시설이나 병력, 마법 등을 모두 업그레이드 했기 때문에 더이상 파밍을 하지 않으며, 트로피를 모아 순위를 올리는 데 집중하게 된다. 그런데 극후반에 도달한 이용자가 많지 않으면 전투 매칭(matching)이 제대로 이뤄지지 않는다. 하루종일 기기를 켜두고 전투 매칭을 돌렸는데도 겨우 두세 번 승리하는 것도 힘겹다. 수시로 게임에 접속해서 매칭을 돌렸다는 게 아니라, 탈옥(jailbreak)한 아이패드에 IMOD라는 도구를 깔아서 이용자가 coc 접속에서 튕기지 않게 하여 말 그대로 하루종일(실은 6~8시간) 게임에 접속해놓고 전투 매칭을 돌려놓는데도 그런 것이다. 전투 매칭을 걸면 전투에 적합한 이용자를 찾아주는데(matching) 극후반에 도달한 이용자가 많지 않다보니 탐색하는 데 몇 십 분에서 몇 시간이 걸린다.&lt;/p&gt;
&lt;p&gt;coc의 극후반에 도달한 이용자는 돈 쓰는 코어 이용자이다. 돈을 쓸 수 밖에 없다. 내가 속한 클랜에는 적게는 몇 십에서 많게는 몇 천 만원을 결제한 이용자가 있을 정도이다. 오늘 업데이트 된 컨텐츠이고 게임 내 자원으로 해당 컨텐츠를 활성화하려면 며칠에서 2주가 소요되는데, 극후반 이용자들을 보면 업데이트 된 당일에 이미 해당 컨텐츠가 활성화 되어 있을 정도이다. 현금으로 치면 10만원 가까이 들어가는 결제를 그 자리에서 해버린 것이다.&lt;/p&gt;
&lt;p&gt;이런 코어 이용자가 즐길 수 있는 극후반 컨텐츠가 순위전 밖에 없었다. MMORPG처럼 아이템 거래를 할 수 있는 것도 아니어서 오직 순위전 외엔 즐길 게 없었다. 근데 전투 매칭이 잘 성사되지 않으니 코어 이용자가 즐길 컨텐츠가 더 빈약한 상황이었다. 극후반 코어 이용자가 호소하는 이런 피로도는 후반 컨텐츠에 도달한 이용자에게도 영향을 미친다. 안 그래도 8홀과 9홀 간극에서 스트레스 받던 9홀 이용자는 10홀에서 누릴 수 있는 컨텐츠를 포기하고 이탈하기에 이르렀다. 중산층이 무너지는 것이다.&lt;/p&gt;
&lt;p&gt;아무리 극후반 컨텐츠가 추가돼도 이 극후반 컨텐츠를 써먹을 장이(stage) 되는 컨텐츠가 보완되지 않으면 coc에 미래는 없었다. 버전 5.x대까지 업데이트 된 후반 컨텐츠를 보며 나는 “아, 수퍼셀이 마지막으로 코어 이용자 주머니 탈탈 털고나서 coc 운영을 슬슬 접으려나보다.”라고 생각했을 정도였다. 그런데 2014년 4월, 클랜전이 추가되었다.&lt;/p&gt;
&lt;h3&gt;클랜전&lt;/h3&gt;
&lt;p&gt;수퍼셀은 coc가 안고 있던 후반 이용자 이탈 문제를 클랜전 시스템으로 멋지게 대응했다.&lt;/p&gt;
&lt;p&gt;클랜전 규칙은 간단하다. 두 개 클랜이 정해진 기간 동안 전투를 펼쳐서 별을 최대한 많이 획득한 클랜이 승리하여 클랜전 보상을 받는 시스템이다. 클랜 당 최대 45명이 참가 가능하며, 한 명 당 두 번씩 전투를 진행할 수 있다. 한 이용자(town)에게서 획득할 수 있는 별은 최대 3개인데, 전투 때마다 획득하는 게 아니라 추가로 얻는 별만 획득하는 방식이라서 클랜이 획득할 수 있는 최대 개수는 135개이다. 만약 A클랜 1번 이용자가 B클랜 5번 이용자를 공격하여 별을 2개 획득했는데 A클랜 3번 이용자가 다시 쳐들어가서 별을 3개 획득하면 추가로 획득한 1개만 획득하여, A클랜이 B클랜의 5번 이용자에게 획득한 별은 3개가 되는 것이다. 만약 A클랜 3번 이용자가 1번 이용자와 마찬가지로 별 2개를 획득했다면 3번 이용자는 추가로 별을 획득하지 못 한다.&lt;/p&gt;
&lt;p&gt;클랜전을 승리하는 전략과 운영은 간단하다. 1) 가능한 많은 사람이 참여하여 2) 별 3개를 최대한 획득하는 것이다.&lt;/p&gt;
&lt;p&gt;1안은 특별한 건 아니니 별 3개를 최대한 획득하는 2안을 보면, 8~9홀 이용자가 활약을 펼쳐야 효율이 난다. 정확히는 클랜 내 &lt;strong&gt;중산층(중위층)&lt;/strong&gt;이 활약을 펼쳐야 한다. 여기서는 편의상 8~10홀이 클랜전에 참여하게 되는 클랜을 기준으로 설명하며, 상위층은 10홀, 중위층은 9홀, 하위층은 8홀이다.&lt;/p&gt;
&lt;p&gt;별 3개를 획득하려면 상대 타운을 완파해야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;타운홀 파괴 : 별 1개&lt;/li&gt;
&lt;li&gt;타운 50% 파괴 : 별 1개&lt;/li&gt;
&lt;li&gt;타운 100% 파괴 : 별 1개&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10홀이 상대 클랜의 9홀 이하 타운에 쳐들어가면 별 3개를 획득할 가능성이 높다. 하지만 그럴 경우 아군 클랜의 9홀 이하 이용자가 공격할 대상이 줄어들게 된다. coc는 자신보다 높은 홀의 타운에서 별 1개를 따내기가 대단히 어렵기 때문이다. 그래서 10홀은 어지간해서는 10홀 상대를 공격하게 되는데, 10홀 타운을 완파하는 건 대단히 어렵다. 보통은 상대 타운홀을 파괴하거나 50%를 파괴하여 별을 1~2개 획득하며, 아차! 실수하면 1개도 획득하지 못 하곤 한다.&lt;/p&gt;
&lt;p&gt;홀 레벨이 같은 경우 100% 완파하기 쉽지 않기 때문에 8홀은 별 2개 획득을 목표로 하게 된다. 하지만 9홀은 별 3개 획득을 노려볼 만하다. 상대방 8홀을 공격해도 좋고, 9홀이더라도 돼지떼 전술이나 벌미 전술(balloon과 minion 조합 전술)을 잘 쓰면 완파도 충분히 가능하다. 왜냐하면 돼지떼와 벌미 전술을 막는 데 가장 좋은 방어시설이 다중 공격 상태인 inferno인데, 이 건물은 10홀에 도달해야 지을 수 있기 때문이다.&lt;/p&gt;
&lt;p&gt;그럼 10홀이나 극후반 이용자는 즐길 것이 없는가, 하면 그렇진 않다. 전투 매칭과는 달리 클랜전은 원활하게 발생하기 때문이다.&lt;/p&gt;
&lt;p&gt;재밌는 건 클랜전 도입 이전에 업데이트 되어온 후반 컨텐츠 덕에 클랜전이 더 풍성해졌다는 점이다.&lt;/p&gt;
&lt;h3&gt;잔존율에 대한 자신감, 대규모 대중 마케팅&lt;/h3&gt;
&lt;p&gt;후반 이전 컨텐츠는 이미 훌륭한 밸런스로 충분히 안정화 되어 있다. 그리고 위태롭던 후반 컨텐츠쪽도 클랜전을 도입하여 9홀과 10홀 이용자가 활약할 장(stage)을 마련해주어 상당히 안정화 되어서, 현재까지 보건데 클랜전은 목적을 성공리에 달성하고 있는 것 같다.&lt;/p&gt;
&lt;p&gt;안정화 되고나서 얼마 후, 한국에 대규모 대중 마케팅을 집행하였고, 대중 마케팅 후반에 극후반 컨텐츠를 추가하였다(7월). 초반 컨텐츠를 추가하지 않은 채 신규 이용자 유입을 위한 대중 마케팅을 펼친다는 것은, 수퍼셀이 이용자 잔존율(retention rate)에 대해서 엄청 자신하고 있다는 표현이다.&lt;/p&gt;
&lt;p&gt;나는 이미 10홀 중후반에 이르러서 신규 이용자가 얼마나 많이 유입됐는지 확인할 길이 없어서 바로 와닿지는 않는다. 또 신규 이용자가 유입되어 중반이나 9홀 이용자에게 의미있는 영향을 미치는 데에도 한 달 정도는 걸릴 것이다. 이런 상황에서 다소 이를 수 있지만, 그동안 업데이트와 운영에 맞춘 이번 대규모 대중 마케팅은 성공적인 성과를 낼 것으로 본다.&lt;/p&gt;
&lt;p&gt;수퍼셀이 이번에 한국에 집행한 마케팅 비용이 100억원이라고 한다. 이번 한국에서 진행한 마케팅 사례를 바탕으로 한국보다 규모가 큰 시장에서 더 큰 규모로 대중 마케팅을 집행할 것으로 예상해본다.&lt;/p&gt;
&lt;p&gt;(그리고 이런 추세라면 올해 안에 타운홀 최대 레벨이 11로 확장될 것 같은 불길한 예감도 든다... 덜덜덜)&lt;/p&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Jul 2014 04:32:11 +0900</pubDate>
        <link>http://blog.hannal.com//2014/7/coc_update_plan_and_mass_marketing</link>
        <guid isPermaLink="true">http://blog.hannal.com//2014/7/coc_update_plan_and_mass_marketing</guid>
        
        <category>업데이트</category>
        
        <category>운영</category>
        
        <category>super cell</category>
        
        <category>수퍼셀</category>
        
        <category>clash of clans</category>
        
        <category>coc</category>
        
        <category>클래시 오브 클랜즈</category>
        
        <category>마케팅</category>
        
        
        <category>essay</category>
        
      </item>
    
  </channel>
</rss>
